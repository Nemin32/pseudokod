{
  "version": 3,
  "sources": ["(disabled):fs", "../node_modules/antlr4/src/antlr4/utils/stringHashCode.js", "../node_modules/antlr4/src/antlr4/polyfills/codepointat.js", "../node_modules/antlr4/src/antlr4/polyfills/fromcodepoint.js", "../node_modules/antlr4/src/antlr4/Token.js", "../node_modules/antlr4/src/antlr4/utils/equalArrays.js", "../node_modules/antlr4/src/antlr4/misc/HashCode.js", "../node_modules/antlr4/src/antlr4/utils/standardHashCodeFunction.js", "../node_modules/antlr4/src/antlr4/utils/standardEqualsFunction.js", "../node_modules/antlr4/src/antlr4/utils/valueToString.js", "../node_modules/antlr4/src/antlr4/utils/arrayToString.js", "../node_modules/antlr4/src/antlr4/misc/HashSet.js", "../node_modules/antlr4/src/antlr4/atn/SemanticContext.js", "../node_modules/antlr4/src/antlr4/atn/ATNConfig.js", "../node_modules/antlr4/src/antlr4/misc/Interval.js", "../node_modules/antlr4/src/antlr4/misc/IntervalSet.js", "../node_modules/antlr4/src/antlr4/state/ATNState.js", "../node_modules/antlr4/src/antlr4/state/RuleStopState.js", "../node_modules/antlr4/src/antlr4/transition/Transition.js", "../node_modules/antlr4/src/antlr4/transition/RuleTransition.js", "../node_modules/antlr4/src/antlr4/transition/SetTransition.js", "../node_modules/antlr4/src/antlr4/transition/NotSetTransition.js", "../node_modules/antlr4/src/antlr4/transition/WildcardTransition.js", "../node_modules/antlr4/src/antlr4/atn/AbstractPredicateTransition.js", "../node_modules/antlr4/src/antlr4/tree/Tree.js", "../node_modules/antlr4/src/antlr4/tree/SyntaxTree.js", "../node_modules/antlr4/src/antlr4/tree/ParseTree.js", "../node_modules/antlr4/src/antlr4/tree/RuleNode.js", "../node_modules/antlr4/src/antlr4/tree/TerminalNode.js", "../node_modules/antlr4/src/antlr4/tree/ErrorNode.js", "../node_modules/antlr4/src/antlr4/utils/escapeWhitespace.js", "../node_modules/antlr4/src/antlr4/tree/Trees.js", "../node_modules/antlr4/src/antlr4/context/RuleContext.js", "../node_modules/antlr4/src/antlr4/context/PredictionContext.js", "../node_modules/antlr4/src/antlr4/context/ArrayPredictionContext.js", "../node_modules/antlr4/src/antlr4/context/SingletonPredictionContext.js", "../node_modules/antlr4/src/antlr4/context/EmptyPredictionContext.js", "../node_modules/antlr4/src/antlr4/misc/HashMap.js", "../node_modules/antlr4/src/antlr4/context/PredictionContextUtils.js", "../node_modules/antlr4/src/antlr4/misc/BitSet.js", "../node_modules/antlr4/src/antlr4/atn/LL1Analyzer.js", "../node_modules/antlr4/src/antlr4/atn/ATN.js", "../node_modules/antlr4/src/antlr4/atn/ATNType.js", "../node_modules/antlr4/src/antlr4/state/BasicState.js", "../node_modules/antlr4/src/antlr4/state/DecisionState.js", "../node_modules/antlr4/src/antlr4/state/BlockStartState.js", "../node_modules/antlr4/src/antlr4/state/BlockEndState.js", "../node_modules/antlr4/src/antlr4/state/LoopEndState.js", "../node_modules/antlr4/src/antlr4/state/RuleStartState.js", "../node_modules/antlr4/src/antlr4/state/TokensStartState.js", "../node_modules/antlr4/src/antlr4/state/PlusLoopbackState.js", "../node_modules/antlr4/src/antlr4/state/StarLoopbackState.js", "../node_modules/antlr4/src/antlr4/state/StarLoopEntryState.js", "../node_modules/antlr4/src/antlr4/state/PlusBlockStartState.js", "../node_modules/antlr4/src/antlr4/state/StarBlockStartState.js", "../node_modules/antlr4/src/antlr4/state/BasicBlockStartState.js", "../node_modules/antlr4/src/antlr4/transition/AtomTransition.js", "../node_modules/antlr4/src/antlr4/transition/RangeTransition.js", "../node_modules/antlr4/src/antlr4/transition/ActionTransition.js", "../node_modules/antlr4/src/antlr4/transition/EpsilonTransition.js", "../node_modules/antlr4/src/antlr4/atn/Predicate.js", "../node_modules/antlr4/src/antlr4/transition/PredicateTransition.js", "../node_modules/antlr4/src/antlr4/atn/PrecedencePredicate.js", "../node_modules/antlr4/src/antlr4/transition/PrecedencePredicateTransition.js", "../node_modules/antlr4/src/antlr4/atn/ATNDeserializationOptions.js", "../node_modules/antlr4/src/antlr4/atn/LexerActionType.js", "../node_modules/antlr4/src/antlr4/action/LexerAction.js", "../node_modules/antlr4/src/antlr4/action/LexerSkipAction.js", "../node_modules/antlr4/src/antlr4/action/LexerChannelAction.js", "../node_modules/antlr4/src/antlr4/action/LexerCustomAction.js", "../node_modules/antlr4/src/antlr4/action/LexerMoreAction.js", "../node_modules/antlr4/src/antlr4/action/LexerTypeAction.js", "../node_modules/antlr4/src/antlr4/action/LexerPushModeAction.js", "../node_modules/antlr4/src/antlr4/action/LexerPopModeAction.js", "../node_modules/antlr4/src/antlr4/action/LexerModeAction.js", "../node_modules/antlr4/src/antlr4/atn/ATNDeserializer.js", "../node_modules/antlr4/src/antlr4/error/ErrorListener.js", "../node_modules/antlr4/src/antlr4/error/ConsoleErrorListener.js", "../node_modules/antlr4/src/antlr4/error/ProxyErrorListener.js", "../node_modules/antlr4/src/antlr4/Recognizer.js", "../node_modules/antlr4/src/antlr4/CommonToken.js", "../node_modules/antlr4/src/antlr4/CommonTokenFactory.js", "../node_modules/antlr4/src/antlr4/error/RecognitionException.js", "../node_modules/antlr4/src/antlr4/error/LexerNoViableAltException.js", "../node_modules/antlr4/src/antlr4/Lexer.js", "../node_modules/antlr4/src/antlr4/atn/ATNConfigSet.js", "../node_modules/antlr4/src/antlr4/dfa/DFAState.js", "../node_modules/antlr4/src/antlr4/atn/ATNSimulator.js", "../node_modules/antlr4/src/antlr4/atn/OrderedATNConfigSet.js", "../node_modules/antlr4/src/antlr4/atn/LexerATNConfig.js", "../node_modules/antlr4/src/antlr4/action/LexerIndexedCustomAction.js", "../node_modules/antlr4/src/antlr4/atn/LexerActionExecutor.js", "../node_modules/antlr4/src/antlr4/atn/LexerATNSimulator.js", "../node_modules/antlr4/src/antlr4/dfa/PredPrediction.js", "../node_modules/antlr4/src/antlr4/misc/AltDict.js", "../node_modules/antlr4/src/antlr4/atn/PredictionMode.js", "../node_modules/antlr4/src/antlr4/error/NoViableAltException.js", "../node_modules/antlr4/src/antlr4/utils/DoubleDict.js", "../node_modules/antlr4/src/antlr4/atn/ParserATNSimulator.js", "../node_modules/antlr4/src/antlr4/atn/index.js", "../node_modules/antlr4/src/antlr4/dfa/DFASerializer.js", "../node_modules/antlr4/src/antlr4/dfa/LexerDFASerializer.js", "../node_modules/antlr4/src/antlr4/dfa/DFA.js", "../node_modules/antlr4/src/antlr4/dfa/index.js", "../node_modules/antlr4/src/antlr4/tree/ParseTreeListener.js", "../node_modules/antlr4/src/antlr4/tree/ParseTreeVisitor.js", "../node_modules/antlr4/src/antlr4/tree/ParseTreeWalker.js", "../node_modules/antlr4/src/antlr4/tree/index.js", "../node_modules/antlr4/src/antlr4/error/InputMismatchException.js", "../node_modules/antlr4/src/antlr4/error/FailedPredicateException.js", "../node_modules/antlr4/src/antlr4/error/DiagnosticErrorListener.js", "../node_modules/antlr4/src/antlr4/error/ParseCancellationException.js", "../node_modules/antlr4/src/antlr4/error/ErrorStrategy.js", "../node_modules/antlr4/src/antlr4/error/DefaultErrorStrategy.js", "../node_modules/antlr4/src/antlr4/error/BailErrorStrategy.js", "../node_modules/antlr4/src/antlr4/error/index.js", "../node_modules/antlr4/src/antlr4/InputStream.js", "../node_modules/antlr4/src/antlr4/CharStreams.js", "../node_modules/antlr4/src/antlr4/FileStream.js", "../node_modules/antlr4/src/antlr4/TokenStream.js", "../node_modules/antlr4/src/antlr4/BufferedTokenStream.js", "../node_modules/antlr4/src/antlr4/CommonTokenStream.js", "../node_modules/antlr4/src/antlr4/TraceListener.js", "../node_modules/antlr4/src/antlr4/Parser.js", "../node_modules/antlr4/src/antlr4/atn/PredictionContextCache.js", "../node_modules/antlr4/src/antlr4/tree/TerminalNodeImpl.js", "../node_modules/antlr4/src/antlr4/tree/ErrorNodeImpl.js", "../node_modules/antlr4/src/antlr4/context/ParserRuleContext.js", "../node_modules/antlr4/src/antlr4/utils/index.js", "../node_modules/antlr4/src/antlr4/index.js", "../src/libs/PseudoCodeLexer.js", "../src/libs/PseudoCodeListener.js", "../src/libs/PseudoCodeVisitor.js", "../src/libs/PseudoCodeParser.js", "../src/Stack.js", "../src/LinearGenerator.js", "../src/DebugPrompt.js", "../src/PseudoVisitor.js", "../src/index.js"],
  "sourcesContent": ["", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nString.prototype.seed = String.prototype.seed || Math.round(Math.random() * Math.pow(2, 32));\n\nString.prototype.hashCode = function () {\n    const key = this.toString();\n    let h1b, k1;\n\n    const remainder = key.length & 3; // key.length % 4\n    const bytes = key.length - remainder;\n    let h1 = String.prototype.seed;\n    const c1 = 0xcc9e2d51;\n    const c2 = 0x1b873593;\n    let i = 0;\n\n    while (i < bytes) {\n        k1 =\n            ((key.charCodeAt(i) & 0xff)) |\n            ((key.charCodeAt(++i) & 0xff) << 8) |\n            ((key.charCodeAt(++i) & 0xff) << 16) |\n            ((key.charCodeAt(++i) & 0xff) << 24);\n        ++i;\n\n        k1 = ((((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16))) & 0xffffffff;\n        k1 = (k1 << 15) | (k1 >>> 17);\n        k1 = ((((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16))) & 0xffffffff;\n\n        h1 ^= k1;\n        h1 = (h1 << 13) | (h1 >>> 19);\n        h1b = ((((h1 & 0xffff) * 5) + ((((h1 >>> 16) * 5) & 0xffff) << 16))) & 0xffffffff;\n        h1 = (((h1b & 0xffff) + 0x6b64) + ((((h1b >>> 16) + 0xe654) & 0xffff) << 16));\n    }\n\n    k1 = 0;\n\n    switch (remainder) {\n        case 3:\n            k1 ^= (key.charCodeAt(i + 2) & 0xff) << 16;\n        // no-break\n        case 2:\n            k1 ^= (key.charCodeAt(i + 1) & 0xff) << 8;\n        // no-break\n        case 1:\n            k1 ^= (key.charCodeAt(i) & 0xff);\n            k1 = (((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16)) & 0xffffffff;\n            k1 = (k1 << 15) | (k1 >>> 17);\n            k1 = (((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16)) & 0xffffffff;\n            h1 ^= k1;\n    }\n\n    h1 ^= key.length;\n\n    h1 ^= h1 >>> 16;\n    h1 = (((h1 & 0xffff) * 0x85ebca6b) + ((((h1 >>> 16) * 0x85ebca6b) & 0xffff) << 16)) & 0xffffffff;\n    h1 ^= h1 >>> 13;\n    h1 = ((((h1 & 0xffff) * 0xc2b2ae35) + ((((h1 >>> 16) * 0xc2b2ae35) & 0xffff) << 16))) & 0xffffffff;\n    h1 ^= h1 >>> 16;\n\n    return h1 >>> 0;\n};\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n/*! https://mths.be/codepointat v0.2.0 by @mathias */\nif (!String.prototype.codePointAt) {\n\t(function() {\n\t\t'use strict'; // needed to support `apply`/`call` with `undefined`/`null`\n\t\tvar defineProperty = (function() {\n\t\t\t// IE 8 only supports `Object.defineProperty` on DOM elements\n\t\t\tlet result;\n\t\t\ttry {\n\t\t\t\tconst object = {};\n\t\t\t\tconst $defineProperty = Object.defineProperty;\n\t\t\t\tresult = $defineProperty(object, object, object) && $defineProperty;\n\t\t\t} catch(error) {\n\t\t\t\t/* eslint no-empty: [ \"off\" ] */\n\t\t\t}\n\t\t\treturn result;\n\t\t}());\n\t\tconst codePointAt = function(position) {\n\t\t\tif (this == null) {\n\t\t\t\tthrow TypeError();\n\t\t\t}\n\t\t\tconst string = String(this);\n\t\t\tconst size = string.length;\n\t\t\t// `ToInteger`\n\t\t\tlet index = position ? Number(position) : 0;\n\t\t\tif (index !== index) { // better `isNaN`\n\t\t\t\tindex = 0;\n\t\t\t}\n\t\t\t// Account for out-of-bounds indices:\n\t\t\tif (index < 0 || index >= size) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\t// Get the first code unit\n\t\t\tconst first = string.charCodeAt(index);\n\t\t\tlet second;\n\t\t\tif ( // check if it\u2019s the start of a surrogate pair\n\t\t\t\tfirst >= 0xD800 && first <= 0xDBFF && // high surrogate\n\t\t\t\tsize > index + 1 // there is a next code unit\n\t\t\t) {\n\t\t\t\tsecond = string.charCodeAt(index + 1);\n\t\t\t\tif (second >= 0xDC00 && second <= 0xDFFF) { // low surrogate\n\t\t\t\t\t// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n\t\t\t\t\treturn (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn first;\n\t\t};\n\t\tif (defineProperty) {\n\t\t\tdefineProperty(String.prototype, 'codePointAt', {\n\t\t\t\t'value': codePointAt,\n\t\t\t\t'configurable': true,\n\t\t\t\t'writable': true\n\t\t\t});\n\t\t} else {\n\t\t\tString.prototype.codePointAt = codePointAt;\n\t\t}\n\t}());\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n/*! https://mths.be/fromcodepoint v0.2.1 by @mathias */\nif (!String.fromCodePoint) {\n\t(function() {\n\t\tconst defineProperty = (function() {\n\t\t\t// IE 8 only supports `Object.defineProperty` on DOM elements\n\t\t\tlet result;\n\t\t\ttry {\n\t\t\t\tconst object = {};\n\t\t\t\tconst $defineProperty = Object.defineProperty;\n\t\t\t\tresult = $defineProperty(object, object, object) && $defineProperty;\n\t\t\t} catch(error) {\n\t\t\t\t/* eslint no-empty: [ \"off\" ] */\n\t\t\t}\n\t\t\treturn result;\n\t\t}());\n\t\tconst stringFromCharCode = String.fromCharCode;\n\t\tconst floor = Math.floor;\n\t\tconst fromCodePoint = function(_) {\n\t\t\tconst MAX_SIZE = 0x4000;\n\t\t\tconst codeUnits = [];\n\t\t\tlet highSurrogate;\n\t\t\tlet lowSurrogate;\n\t\t\tlet index = -1;\n\t\t\tconst length = arguments.length;\n\t\t\tif (!length) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t\tlet result = '';\n\t\t\twhile (++index < length) {\n\t\t\t\tlet codePoint = Number(arguments[index]);\n\t\t\t\tif (\n\t\t\t\t\t!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n\t\t\t\t\tcodePoint < 0 || // not a valid Unicode code point\n\t\t\t\t\tcodePoint > 0x10FFFF || // not a valid Unicode code point\n\t\t\t\t\tfloor(codePoint) !== codePoint // not an integer\n\t\t\t\t) {\n\t\t\t\t\tthrow RangeError('Invalid code point: ' + codePoint);\n\t\t\t\t}\n\t\t\t\tif (codePoint <= 0xFFFF) { // BMP code point\n\t\t\t\t\tcodeUnits.push(codePoint);\n\t\t\t\t} else { // Astral code point; split in surrogate halves\n\t\t\t\t\t// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n\t\t\t\t\tcodePoint -= 0x10000;\n\t\t\t\t\thighSurrogate = (codePoint >> 10) + 0xD800;\n\t\t\t\t\tlowSurrogate = (codePoint % 0x400) + 0xDC00;\n\t\t\t\t\tcodeUnits.push(highSurrogate, lowSurrogate);\n\t\t\t\t}\n\t\t\t\tif (index + 1 === length || codeUnits.length > MAX_SIZE) {\n\t\t\t\t\tresult += stringFromCharCode.apply(null, codeUnits);\n\t\t\t\t\tcodeUnits.length = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t};\n\t\tif (defineProperty) {\n\t\t\tdefineProperty(String, 'fromCodePoint', {\n\t\t\t\t'value': fromCodePoint,\n\t\t\t\t'configurable': true,\n\t\t\t\t'writable': true\n\t\t\t});\n\t\t} else {\n\t\t\tString.fromCodePoint = fromCodePoint;\n\t\t}\n\t}());\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n/**\n * A token has properties: text, type, line, character position in the line\n * (so we can ignore tabs), token channel, index, and source from which\n * we obtained this token.\n */\nexport default class Token {\n\tconstructor() {\n\t\tthis.source = null;\n\t\tthis.type = null; // token type of the token\n\t\tthis.channel = null; // The parser ignores everything not on DEFAULT_CHANNEL\n\t\tthis.start = null; // optional; return -1 if not implemented.\n\t\tthis.stop = null; // optional; return -1 if not implemented.\n\t\tthis.tokenIndex = null; // from 0..n-1 of the token object in the input stream\n\t\tthis.line = null; // line=1..n of the 1st character\n\t\tthis.column = null; // beginning of the line at which it occurs, 0..n-1\n\t\tthis._text = null; // text of the token.\n\t}\n\n\tgetTokenSource() {\n\t\treturn this.source[0];\n\t}\n\n\tgetInputStream() {\n\t\treturn this.source[1];\n\t}\n\n\tget text(){\n\t\treturn this._text;\n\t}\n\n\tset text(text) {\n\t\tthis._text = text;\n\t}\n}\n\nToken.INVALID_TYPE = 0;\n\n/**\n * During lookahead operations, this \"token\" signifies we hit rule end ATN state\n * and did not follow it despite needing to.\n */\nToken.EPSILON = -2;\n\nToken.MIN_USER_TOKEN_TYPE = 1;\n\nToken.EOF = -1;\n\n/**\n * All tokens go to the parser (unless skip() is called in that rule)\n * on a particular \"channel\". The parser tunes to a particular channel\n * so that whitespace etc... can go to the parser on a \"hidden\" channel.\n */\nToken.DEFAULT_CHANNEL = 0;\n\n/**\n * Anything on different channel than DEFAULT_CHANNEL is not parsed\n * by parser.\n */\nToken.HIDDEN_CHANNEL = 1;\n\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nexport default function equalArrays(a, b) {\n    if (!Array.isArray(a) || !Array.isArray(b))\n        return false;\n    if (a === b)\n        return true;\n    if (a.length !== b.length)\n        return false;\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] === b[i])\n            continue;\n        if (!a[i].equals || !a[i].equals(b[i]))\n            return false;\n    }\n    return true;\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nexport default class HashCode {\n\n    constructor() {\n        this.count = 0;\n        this.hash = 0;\n    }\n\n    update() {\n        for(let i=0;i<arguments.length;i++) {\n            const value = arguments[i];\n            if (value == null)\n                continue;\n            if(Array.isArray(value))\n                this.update.apply(this, value);\n            else {\n                let k = 0;\n                switch (typeof(value)) {\n                    case 'undefined':\n                    case 'function':\n                        continue;\n                    case 'number':\n                    case 'boolean':\n                        k = value;\n                        break;\n                    case 'string':\n                        k = value.hashCode();\n                        break;\n                    default:\n                        if(value.updateHashCode)\n                            value.updateHashCode(this);\n                        else\n                            console.log(\"No updateHashCode for \" + value.toString())\n                        continue;\n                }\n                k = k * 0xCC9E2D51;\n                k = (k << 15) | (k >>> (32 - 15));\n                k = k * 0x1B873593;\n                this.count = this.count + 1;\n                let hash = this.hash ^ k;\n                hash = (hash << 13) | (hash >>> (32 - 13));\n                hash = hash * 5 + 0xE6546B64;\n                this.hash = hash;\n            }\n        }\n    }\n\n    finish() {\n        let hash = this.hash ^ (this.count * 4);\n        hash = hash ^ (hash >>> 16);\n        hash = hash * 0x85EBCA6B;\n        hash = hash ^ (hash >>> 13);\n        hash = hash * 0xC2B2AE35;\n        hash = hash ^ (hash >>> 16);\n        return hash;\n    }\n\n    static hashStuff() {\n        const hash = new HashCode();\n        hash.update.apply(hash, arguments);\n        return hash.finish();\n    }\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nexport default function standardHashCodeFunction(a) {\n    return a ? a.hashCode() : -1;\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nexport default function standardEqualsFunction(a, b) {\n    return a ? a.equals(b) : a===b;\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nexport default function valueToString(v) {\n    return v === null ? \"null\" : v;\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport valueToString from \"./valueToString.js\";\n\nexport default function arrayToString(a) {\n    return Array.isArray(a) ? (\"[\" + a.map(valueToString).join(\", \") + \"]\") : \"null\";\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport standardHashCodeFunction from \"../utils/standardHashCodeFunction.js\";\nimport standardEqualsFunction from \"../utils/standardEqualsFunction.js\";\nimport arrayToString from \"../utils/arrayToString.js\";\n\nconst HASH_KEY_PREFIX = \"h-\";\n\nexport default class HashSet {\n\n    constructor(hashFunction, equalsFunction) {\n        this.data = {};\n        this.hashFunction = hashFunction || standardHashCodeFunction;\n        this.equalsFunction = equalsFunction || standardEqualsFunction;\n    }\n\n    add(value) {\n        const key = HASH_KEY_PREFIX + this.hashFunction(value);\n        if (key in this.data) {\n            const values = this.data[key];\n            for (let i = 0; i < values.length; i++) {\n                if (this.equalsFunction(value, values[i])) {\n                    return values[i];\n                }\n            }\n            values.push(value);\n            return value;\n        } else {\n            this.data[key] = [value];\n            return value;\n        }\n    }\n\n    has(value) {\n        return this.get(value) != null;\n    }\n\n    get(value) {\n        const key = HASH_KEY_PREFIX + this.hashFunction(value);\n        if (key in this.data) {\n            const values = this.data[key];\n            for (let i = 0; i < values.length; i++) {\n                if (this.equalsFunction(value, values[i])) {\n                    return values[i];\n                }\n            }\n        }\n        return null;\n    }\n\n    values() {\n        return Object.keys(this.data).filter(key => key.startsWith(HASH_KEY_PREFIX)).flatMap(key => this.data[key], this);\n    }\n\n    toString() {\n        return arrayToString(this.values());\n    }\n\n    get length() {\n        return Object.keys(this.data).filter(key => key.startsWith(HASH_KEY_PREFIX)).map(key => this.data[key].length, this).reduce((accum, item) => accum + item, 0);\n    }\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nimport equalArrays from \"../utils/equalArrays.js\";\nimport HashCode from \"../misc/HashCode.js\";\nimport HashSet from \"../misc/HashSet.js\";\n\n/**\n * A tree structure used to record the semantic context in which\n * an ATN configuration is valid.  It's either a single predicate,\n * a conjunction {@code p1&&p2}, or a sum of products {@code p1||p2}.\n *\n * <p>I have scoped the {@link AND}, {@link OR}, and {@link Predicate} subclasses of\n * {@link SemanticContext} within the scope of this outer class.</p>\n */\nexport default class SemanticContext {\n\n\thashCode() {\n\t\tconst hash = new HashCode();\n\t\tthis.updateHashCode(hash);\n\t\treturn hash.finish();\n\t}\n\n\t/**\n\t * For context independent predicates, we evaluate them without a local\n\t * context (i.e., null context). That way, we can evaluate them without\n\t * having to create proper rule-specific context during prediction (as\n\t * opposed to the parser, which creates them naturally). In a practical\n\t * sense, this avoids a cast exception from RuleContext to myruleContext.\n\t *\n\t * <p>For context dependent predicates, we must pass in a local context so that\n\t * references such as $arg evaluate properly as _localctx.arg. We only\n\t * capture context dependent predicates in the context in which we begin\n\t * prediction, so we passed in the outer context here in case of context\n\t * dependent predicate evaluation.</p>\n\t */\n\tevaluate(parser, outerContext) {}\n\n\t/**\n\t * Evaluate the precedence predicates for the context and reduce the result.\n\t *\n\t * @param parser The parser instance.\n\t * @param outerContext The current parser context object.\n\t * @return The simplified semantic context after precedence predicates are\n\t * evaluated, which will be one of the following values.\n\t * <ul>\n\t * <li>{@link //NONE}: if the predicate simplifies to {@code true} after\n\t * precedence predicates are evaluated.</li>\n\t * <li>{@code null}: if the predicate simplifies to {@code false} after\n\t * precedence predicates are evaluated.</li>\n\t * <li>{@code this}: if the semantic context is not changed as a result of\n\t * precedence predicate evaluation.</li>\n\t * <li>A non-{@code null} {@link SemanticContext}: the new simplified\n\t * semantic context after precedence predicates are evaluated.</li>\n\t * </ul>\n\t */\n\tevalPrecedence(parser, outerContext) {\n\t\treturn this;\n\t}\n\n\tstatic andContext(a, b) {\n\t\tif (a === null || a === SemanticContext.NONE) {\n\t\t\treturn b;\n\t\t}\n\t\tif (b === null || b === SemanticContext.NONE) {\n\t\t\treturn a;\n\t\t}\n\t\tconst result = new AND(a, b);\n\t\tif (result.opnds.length === 1) {\n\t\t\treturn result.opnds[0];\n\t\t} else {\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tstatic orContext(a, b) {\n\t\tif (a === null) {\n\t\t\treturn b;\n\t\t}\n\t\tif (b === null) {\n\t\t\treturn a;\n\t\t}\n\t\tif (a === SemanticContext.NONE || b === SemanticContext.NONE) {\n\t\t\treturn SemanticContext.NONE;\n\t\t}\n\t\tconst result = new OR(a, b);\n\t\tif (result.opnds.length === 1) {\n\t\t\treturn result.opnds[0];\n\t\t} else {\n\t\t\treturn result;\n\t\t}\n\t}\n}\n\n\n\nclass AND extends SemanticContext {\n\t/**\n\t * A semantic context which is true whenever none of the contained contexts\n\t * is false\n\t */\n\tconstructor(a, b) {\n\t\tsuper();\n\t\tconst operands = new HashSet();\n\t\tif (a instanceof AND) {\n\t\t\ta.opnds.map(function(o) {\n\t\t\t\toperands.add(o);\n\t\t\t});\n\t\t} else {\n\t\t\toperands.add(a);\n\t\t}\n\t\tif (b instanceof AND) {\n\t\t\tb.opnds.map(function(o) {\n\t\t\t\toperands.add(o);\n\t\t\t});\n\t\t} else {\n\t\t\toperands.add(b);\n\t\t}\n\t\tconst precedencePredicates = filterPrecedencePredicates(operands);\n\t\tif (precedencePredicates.length > 0) {\n\t\t\t// interested in the transition with the lowest precedence\n\t\t\tlet reduced = null;\n\t\t\tprecedencePredicates.map( function(p) {\n\t\t\t\tif(reduced===null || p.precedence<reduced.precedence) {\n\t\t\t\t\treduced = p;\n\t\t\t\t}\n\t\t\t});\n\t\t\toperands.add(reduced);\n\t\t}\n\t\tthis.opnds = Array.from(operands.values());\n\t}\n\n\tequals(other) {\n\t\tif (this === other) {\n\t\t\treturn true;\n\t\t} else if (!(other instanceof AND)) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn equalArrays(this.opnds, other.opnds);\n\t\t}\n\t}\n\n\tupdateHashCode(hash) {\n\t\thash.update(this.opnds, \"AND\");\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>\n\t * The evaluation of predicates by this context is short-circuiting, but\n\t * unordered.</p>\n\t */\n\tevaluate(parser, outerContext) {\n\t\tfor (let i = 0; i < this.opnds.length; i++) {\n\t\t\tif (!this.opnds[i].evaluate(parser, outerContext)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tevalPrecedence(parser, outerContext) {\n\t\tlet differs = false;\n\t\tconst operands = [];\n\t\tfor (let i = 0; i < this.opnds.length; i++) {\n\t\t\tconst context = this.opnds[i];\n\t\t\tconst evaluated = context.evalPrecedence(parser, outerContext);\n\t\t\tdiffers |= (evaluated !== context);\n\t\t\tif (evaluated === null) {\n\t\t\t\t// The AND context is false if any element is false\n\t\t\t\treturn null;\n\t\t\t} else if (evaluated !== SemanticContext.NONE) {\n\t\t\t\t// Reduce the result by skipping true elements\n\t\t\t\toperands.push(evaluated);\n\t\t\t}\n\t\t}\n\t\tif (!differs) {\n\t\t\treturn this;\n\t\t}\n\t\tif (operands.length === 0) {\n\t\t\t// all elements were true, so the AND context is true\n\t\t\treturn SemanticContext.NONE;\n\t\t}\n\t\tlet result = null;\n\t\toperands.map(function(o) {\n\t\t\tresult = result === null ? o : SemanticContext.andContext(result, o);\n\t\t});\n\t\treturn result;\n\t}\n\n\ttoString() {\n\t\tconst s = this.opnds.map(o => o.toString());\n\t\treturn (s.length > 3 ? s.slice(3) : s).join(\"&&\");\n\t}\n}\n\n\nclass OR extends SemanticContext {\n\t/**\n\t * A semantic context which is true whenever at least one of the contained\n\t * contexts is true\n\t */\n\tconstructor(a, b) {\n\t\tsuper();\n\t\tconst operands = new HashSet();\n\t\tif (a instanceof OR) {\n\t\t\ta.opnds.map(function(o) {\n\t\t\t\toperands.add(o);\n\t\t\t});\n\t\t} else {\n\t\t\toperands.add(a);\n\t\t}\n\t\tif (b instanceof OR) {\n\t\t\tb.opnds.map(function(o) {\n\t\t\t\toperands.add(o);\n\t\t\t});\n\t\t} else {\n\t\t\toperands.add(b);\n\t\t}\n\n\t\tconst precedencePredicates = filterPrecedencePredicates(operands);\n\t\tif (precedencePredicates.length > 0) {\n\t\t\t// interested in the transition with the highest precedence\n\t\t\tconst s = precedencePredicates.sort(function(a, b) {\n\t\t\t\treturn a.compareTo(b);\n\t\t\t});\n\t\t\tconst reduced = s[s.length-1];\n\t\t\toperands.add(reduced);\n\t\t}\n\t\tthis.opnds = Array.from(operands.values());\n\t}\n\n\tequals(other) {\n\t\tif (this === other) {\n\t\t\treturn true;\n\t\t} else if (!(other instanceof OR)) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn equalArrays(this.opnds, other.opnds);\n\t\t}\n\t}\n\n\tupdateHashCode(hash) {\n\t\thash.update(this.opnds, \"OR\");\n\t}\n\n\t/**\n\t * <p>\n\t * The evaluation of predicates by this context is short-circuiting, but\n\t * unordered.</p>\n\t */\n\tevaluate(parser, outerContext) {\n\t\tfor (let i = 0; i < this.opnds.length; i++) {\n\t\t\tif (this.opnds[i].evaluate(parser, outerContext)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tevalPrecedence(parser, outerContext) {\n\t\tlet differs = false;\n\t\tconst operands = [];\n\t\tfor (let i = 0; i < this.opnds.length; i++) {\n\t\t\tconst context = this.opnds[i];\n\t\t\tconst evaluated = context.evalPrecedence(parser, outerContext);\n\t\t\tdiffers |= (evaluated !== context);\n\t\t\tif (evaluated === SemanticContext.NONE) {\n\t\t\t\t// The OR context is true if any element is true\n\t\t\t\treturn SemanticContext.NONE;\n\t\t\t} else if (evaluated !== null) {\n\t\t\t\t// Reduce the result by skipping false elements\n\t\t\t\toperands.push(evaluated);\n\t\t\t}\n\t\t}\n\t\tif (!differs) {\n\t\t\treturn this;\n\t\t}\n\t\tif (operands.length === 0) {\n\t\t\t// all elements were false, so the OR context is false\n\t\t\treturn null;\n\t\t}\n\t\tconst result = null;\n\t\toperands.map(function(o) {\n\t\t\treturn result === null ? o : SemanticContext.orContext(result, o);\n\t\t});\n\t\treturn result;\n\t}\n\n\ttoString() {\n\t\tconst s = this.opnds.map(o => o.toString());\n\t\treturn (s.length > 3 ? s.slice(3) : s).join(\"||\");\n\t}\n}\n\nfunction filterPrecedencePredicates(set) {\n\tconst result = [];\n\tset.values().map( function(context) {\n\t\tif (context instanceof SemanticContext.PrecedencePredicate) {\n\t\t\tresult.push(context);\n\t\t}\n\t});\n\treturn result;\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nimport SemanticContext from './SemanticContext.js';\nimport HashCode from \"../misc/HashCode.js\";\n\nfunction checkParams(params, isCfg) {\n\tif(params===null) {\n\t\tconst result = { state:null, alt:null, context:null, semanticContext:null };\n\t\tif(isCfg) {\n\t\t\tresult.reachesIntoOuterContext = 0;\n\t\t}\n\t\treturn result;\n\t} else {\n\t\tconst props = {};\n\t\tprops.state = params.state || null;\n\t\tprops.alt = (params.alt === undefined) ? null : params.alt;\n\t\tprops.context = params.context || null;\n\t\tprops.semanticContext = params.semanticContext || null;\n\t\tif(isCfg) {\n\t\t\tprops.reachesIntoOuterContext = params.reachesIntoOuterContext || 0;\n\t\t\tprops.precedenceFilterSuppressed = params.precedenceFilterSuppressed || false;\n\t\t}\n\t\treturn props;\n\t}\n}\n\nexport default class ATNConfig {\n    /**\n     * @param {Object} params A tuple: (ATN state, predicted alt, syntactic, semantic context).\n     * The syntactic context is a graph-structured stack node whose\n     * path(s) to the root is the rule invocation(s)\n     * chain used to arrive at the state.  The semantic context is\n     * the tree of semantic predicates encountered before reaching\n     * an ATN state\n     */\n    constructor(params, config) {\n        this.checkContext(params, config);\n        params = checkParams(params);\n        config = checkParams(config, true);\n        // The ATN state associated with this configuration///\n        this.state = params.state!==null ? params.state : config.state;\n        // What alt (or lexer rule) is predicted by this configuration///\n        this.alt = params.alt!==null ? params.alt : config.alt;\n        /**\n         * The stack of invoking states leading to the rule/states associated\n         * with this config.  We track only those contexts pushed during\n         * execution of the ATN simulator\n         */\n        this.context = params.context!==null ? params.context : config.context;\n        this.semanticContext = params.semanticContext!==null ? params.semanticContext :\n            (config.semanticContext!==null ? config.semanticContext : SemanticContext.NONE);\n        // TODO: make it a boolean then\n        /**\n         * We cannot execute predicates dependent upon local context unless\n         * we know for sure we are in the correct context. Because there is\n         * no way to do this efficiently, we simply cannot evaluate\n         * dependent predicates unless we are in the rule that initially\n         * invokes the ATN simulator.\n         * closure() tracks the depth of how far we dip into the\n         * outer context: depth &gt; 0.  Note that it may not be totally\n         * accurate depth since I don't ever decrement\n         */\n        this.reachesIntoOuterContext = config.reachesIntoOuterContext;\n        this.precedenceFilterSuppressed = config.precedenceFilterSuppressed;\n    }\n\n    checkContext(params, config) {\n        if((params.context===null || params.context===undefined) &&\n                (config===null || config.context===null || config.context===undefined)) {\n            this.context = null;\n        }\n    }\n\n    hashCode() {\n        const hash = new HashCode();\n        this.updateHashCode(hash);\n        return hash.finish();\n    }\n\n    updateHashCode(hash) {\n        hash.update(this.state.stateNumber, this.alt, this.context, this.semanticContext);\n    }\n\n    /**\n     * An ATN configuration is equal to another if both have\n     * the same state, they predict the same alternative, and\n     * syntactic/semantic contexts are the same\n     */\n    equals(other) {\n        if (this === other) {\n            return true;\n        } else if (! (other instanceof ATNConfig)) {\n            return false;\n        } else {\n            return this.state.stateNumber===other.state.stateNumber &&\n                this.alt===other.alt &&\n                (this.context===null ? other.context===null : this.context.equals(other.context)) &&\n                this.semanticContext.equals(other.semanticContext) &&\n                this.precedenceFilterSuppressed===other.precedenceFilterSuppressed;\n        }\n    }\n\n    hashCodeForConfigSet() {\n        const hash = new HashCode();\n        hash.update(this.state.stateNumber, this.alt, this.semanticContext);\n        return hash.finish();\n    }\n\n    equalsForConfigSet(other) {\n        if (this === other) {\n            return true;\n        } else if (! (other instanceof ATNConfig)) {\n            return false;\n        } else {\n            return this.state.stateNumber===other.state.stateNumber &&\n                this.alt===other.alt &&\n                this.semanticContext.equals(other.semanticContext);\n        }\n    }\n\n    toString() {\n        return \"(\" + this.state + \",\" + this.alt +\n            (this.context!==null ? \",[\" + this.context.toString() + \"]\" : \"\") +\n            (this.semanticContext !== SemanticContext.NONE ?\n                    (\",\" + this.semanticContext.toString())\n                    : \"\") +\n            (this.reachesIntoOuterContext>0 ?\n                    (\",up=\" + this.reachesIntoOuterContext)\n                    : \"\") + \")\";\n    }\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n/* stop is not included! */\nexport default class Interval {\n\n    constructor(start, stop) {\n        this.start = start;\n        this.stop = stop;\n    }\n\n    clone() {\n        return new Interval(this.start, this.stop);\n    }\n\n    contains(item) {\n        return item >= this.start && item < this.stop;\n    }\n\n    toString() {\n        if(this.start===this.stop-1) {\n            return this.start.toString();\n        } else {\n            return this.start.toString() + \"..\" + (this.stop-1).toString();\n        }\n    }\n\n    get length(){\n        return this.stop - this.start;\n    }\n}\n\nInterval.INVALID_INTERVAL = new Interval(-1, -2);\n\n", "/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nimport Token from '../Token.js';\nimport Interval from \"./Interval.js\";\n\nexport default class IntervalSet {\n\tconstructor() {\n\t\tthis.intervals = null;\n\t\tthis.readOnly = false;\n\t}\n\n\tfirst(v) {\n\t\tif (this.intervals === null || this.intervals.length===0) {\n\t\t\treturn Token.INVALID_TYPE;\n\t\t} else {\n\t\t\treturn this.intervals[0].start;\n\t\t}\n\t}\n\n\taddOne(v) {\n\t\tthis.addInterval(new Interval(v, v + 1));\n\t}\n\n\taddRange(l, h) {\n\t\tthis.addInterval(new Interval(l, h + 1));\n\t}\n\n\taddInterval(toAdd) {\n\t\tif (this.intervals === null) {\n\t\t\tthis.intervals = [];\n\t\t\tthis.intervals.push(toAdd.clone());\n\t\t} else {\n\t\t\t// find insert pos\n\t\t\tfor (let pos = 0; pos < this.intervals.length; pos++) {\n\t\t\t\tconst existing = this.intervals[pos];\n\t\t\t\t// distinct range -> insert\n\t\t\t\tif (toAdd.stop < existing.start) {\n\t\t\t\t\tthis.intervals.splice(pos, 0, toAdd);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// contiguous range -> adjust\n\t\t\t\telse if (toAdd.stop === existing.start) {\n\t\t\t\t\tthis.intervals[pos] = new Interval(toAdd.start, existing.stop)\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// overlapping range -> adjust and reduce\n\t\t\t\telse if (toAdd.start <= existing.stop) {\n\t\t\t\t\tthis.intervals[pos] = new Interval(Math.min(existing.start, toAdd.start), Math.max(existing.stop, toAdd.stop));\n\t\t\t\t\tthis.reduce(pos);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// greater than any existing\n\t\t\tthis.intervals.push(toAdd.clone());\n\t\t}\n\t}\n\n\taddSet(other) {\n\t\tif (other.intervals !== null) {\n\t\t\tother.intervals.forEach( toAdd => this.addInterval(toAdd), this);\n\t\t}\n\t\treturn this;\n\t}\n\n\treduce(pos) {\n\t\t// only need to reduce if pos is not the last\n\t\tif (pos < this.intervals.length - 1) {\n\t\t\tconst current = this.intervals[pos];\n\t\t\tconst next = this.intervals[pos + 1];\n\t\t\t// if next contained in current\n\t\t\tif (current.stop >= next.stop) {\n\t\t\t\tthis.intervals.splice(pos + 1, 1);\n\t\t\t\tthis.reduce(pos);\n\t\t\t} else if (current.stop >= next.start) {\n\t\t\t\tthis.intervals[pos] = new Interval(current.start, next.stop);\n\t\t\t\tthis.intervals.splice(pos + 1, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\tcomplement(start, stop) {\n\t\tconst result = new IntervalSet();\n\t\tresult.addInterval(new Interval(start, stop + 1));\n\t\tif(this.intervals !== null)\n\t\t\tthis.intervals.forEach(toRemove => result.removeRange(toRemove));\n\t\treturn result;\n\t}\n\n\tcontains(item) {\n\t\tif (this.intervals === null) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\tfor (let k = 0; k < this.intervals.length; k++) {\n\t\t\t\tif(this.intervals[k].contains(item)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tremoveRange(toRemove) {\n\t\tif(toRemove.start===toRemove.stop-1) {\n\t\t\tthis.removeOne(toRemove.start);\n\t\t} else if (this.intervals !== null) {\n\t\t\tlet pos = 0;\n\t\t\tfor(let n=0; n<this.intervals.length; n++) {\n\t\t\t\tconst existing = this.intervals[pos];\n\t\t\t\t// intervals are ordered\n\t\t\t\tif (toRemove.stop<=existing.start) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// check for including range, split it\n\t\t\t\telse if(toRemove.start>existing.start && toRemove.stop<existing.stop) {\n\t\t\t\t\tthis.intervals[pos] = new Interval(existing.start, toRemove.start);\n\t\t\t\t\tconst x = new Interval(toRemove.stop, existing.stop);\n\t\t\t\t\tthis.intervals.splice(pos, 0, x);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// check for included range, remove it\n\t\t\t\telse if(toRemove.start<=existing.start && toRemove.stop>=existing.stop) {\n\t\t\t\t\tthis.intervals.splice(pos, 1);\n\t\t\t\t\tpos = pos - 1; // need another pass\n\t\t\t\t}\n\t\t\t\t// check for lower boundary\n\t\t\t\telse if(toRemove.start<existing.stop) {\n\t\t\t\t\tthis.intervals[pos] = new Interval(existing.start, toRemove.start);\n\t\t\t\t}\n\t\t\t\t// check for upper boundary\n\t\t\t\telse if(toRemove.stop<existing.stop) {\n\t\t\t\t\tthis.intervals[pos] = new Interval(toRemove.stop, existing.stop);\n\t\t\t\t}\n\t\t\t\tpos += 1;\n\t\t\t}\n\t\t}\n\t}\n\n\tremoveOne(value) {\n\t\tif (this.intervals !== null) {\n\t\t\tfor (let i = 0; i < this.intervals.length; i++) {\n\t\t\t\tconst existing = this.intervals[i];\n\t\t\t\t// intervals are ordered\n\t\t\t\tif (value < existing.start) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// check for single value range\n\t\t\t\telse if (value === existing.start && value === existing.stop - 1) {\n\t\t\t\t\tthis.intervals.splice(i, 1);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// check for lower boundary\n\t\t\t\telse if (value === existing.start) {\n\t\t\t\t\tthis.intervals[i] = new Interval(existing.start + 1, existing.stop);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// check for upper boundary\n\t\t\t\telse if (value === existing.stop - 1) {\n\t\t\t\t\tthis.intervals[i] = new Interval(existing.start, existing.stop - 1);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// split existing range\n\t\t\t\telse if (value < existing.stop - 1) {\n\t\t\t\t\tconst replace = new Interval(existing.start, value);\n\t\t\t\t\texisting.start = value + 1;\n\t\t\t\t\tthis.intervals.splice(i, 0, replace);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\ttoString(literalNames, symbolicNames, elemsAreChar) {\n\t\tliteralNames = literalNames || null;\n\t\tsymbolicNames = symbolicNames || null;\n\t\telemsAreChar = elemsAreChar || false;\n\t\tif (this.intervals === null) {\n\t\t\treturn \"{}\";\n\t\t} else if(literalNames!==null || symbolicNames!==null) {\n\t\t\treturn this.toTokenString(literalNames, symbolicNames);\n\t\t} else if(elemsAreChar) {\n\t\t\treturn this.toCharString();\n\t\t} else {\n\t\t\treturn this.toIndexString();\n\t\t}\n\t}\n\n\ttoCharString() {\n\t\tconst names = [];\n\t\tfor (let i = 0; i < this.intervals.length; i++) {\n\t\t\tconst existing = this.intervals[i];\n\t\t\tif(existing.stop===existing.start+1) {\n\t\t\t\tif ( existing.start===Token.EOF ) {\n\t\t\t\t\tnames.push(\"<EOF>\");\n\t\t\t\t} else {\n\t\t\t\t\tnames.push(\"'\" + String.fromCharCode(existing.start) + \"'\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tnames.push(\"'\" + String.fromCharCode(existing.start) + \"'..'\" + String.fromCharCode(existing.stop-1) + \"'\");\n\t\t\t}\n\t\t}\n\t\tif (names.length > 1) {\n\t\t\treturn \"{\" + names.join(\", \") + \"}\";\n\t\t} else {\n\t\t\treturn names[0];\n\t\t}\n\t}\n\n\ttoIndexString() {\n\t\tconst names = [];\n\t\tfor (let i = 0; i < this.intervals.length; i++) {\n\t\t\tconst existing = this.intervals[i];\n\t\t\tif(existing.stop===existing.start+1) {\n\t\t\t\tif ( existing.start===Token.EOF ) {\n\t\t\t\t\tnames.push(\"<EOF>\");\n\t\t\t\t} else {\n\t\t\t\t\tnames.push(existing.start.toString());\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tnames.push(existing.start.toString() + \"..\" + (existing.stop-1).toString());\n\t\t\t}\n\t\t}\n\t\tif (names.length > 1) {\n\t\t\treturn \"{\" + names.join(\", \") + \"}\";\n\t\t} else {\n\t\t\treturn names[0];\n\t\t}\n\t}\n\n\ttoTokenString(literalNames, symbolicNames) {\n\t\tconst names = [];\n\t\tfor (let i = 0; i < this.intervals.length; i++) {\n\t\t\tconst existing = this.intervals[i];\n\t\t\tfor (let j = existing.start; j < existing.stop; j++) {\n\t\t\t\tnames.push(this.elementName(literalNames, symbolicNames, j));\n\t\t\t}\n\t\t}\n\t\tif (names.length > 1) {\n\t\t\treturn \"{\" + names.join(\", \") + \"}\";\n\t\t} else {\n\t\t\treturn names[0];\n\t\t}\n\t}\n\n\telementName(literalNames, symbolicNames, token) {\n\t\tif (token === Token.EOF) {\n\t\t\treturn \"<EOF>\";\n\t\t} else if (token === Token.EPSILON) {\n\t\t\treturn \"<EPSILON>\";\n\t\t} else {\n\t\t\treturn literalNames[token] || symbolicNames[token];\n\t\t}\n\t}\n\n\tget length(){\n\t\treturn this.intervals.map( interval => interval.length ).reduce((acc, val) => acc + val);\n\t}\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n/**\n * The following images show the relation of states and\n * {@link ATNState//transitions} for various grammar constructs.\n *\n * <ul>\n *\n * <li>Solid edges marked with an &//0949; indicate a required\n * {@link EpsilonTransition}.</li>\n *\n * <li>Dashed edges indicate locations where any transition derived from\n * {@link Transition} might appear.</li>\n *\n * <li>Dashed nodes are place holders for either a sequence of linked\n * {@link BasicState} states or the inclusion of a block representing a nested\n * construct in one of the forms below.</li>\n *\n * <li>Nodes showing multiple outgoing alternatives with a {@code ...} support\n * any number of alternatives (one or more). Nodes without the {@code ...} only\n * support the exact number of alternatives shown in the diagram.</li>\n *\n * </ul>\n *\n * <h2>Basic Blocks</h2>\n *\n * <h3>Rule</h3>\n *\n * <embed src=\"images/Rule.svg\" type=\"image/svg+xml\"/>\n *\n * <h3>Block of 1 or more alternatives</h3>\n *\n * <embed src=\"images/Block.svg\" type=\"image/svg+xml\"/>\n *\n * <h2>Greedy Loops</h2>\n *\n * <h3>Greedy Closure: {@code (...)*}</h3>\n *\n * <embed src=\"images/ClosureGreedy.svg\" type=\"image/svg+xml\"/>\n *\n * <h3>Greedy Positive Closure: {@code (...)+}</h3>\n *\n * <embed src=\"images/PositiveClosureGreedy.svg\" type=\"image/svg+xml\"/>\n *\n * <h3>Greedy Optional: {@code (...)?}</h3>\n *\n * <embed src=\"images/OptionalGreedy.svg\" type=\"image/svg+xml\"/>\n *\n * <h2>Non-Greedy Loops</h2>\n *\n * <h3>Non-Greedy Closure: {@code (...)*?}</h3>\n *\n * <embed src=\"images/ClosureNonGreedy.svg\" type=\"image/svg+xml\"/>\n *\n * <h3>Non-Greedy Positive Closure: {@code (...)+?}</h3>\n *\n * <embed src=\"images/PositiveClosureNonGreedy.svg\" type=\"image/svg+xml\"/>\n *\n * <h3>Non-Greedy Optional: {@code (...)??}</h3>\n *\n * <embed src=\"images/OptionalNonGreedy.svg\" type=\"image/svg+xml\"/>\n */\nexport default class ATNState {\n    constructor() {\n        // Which ATN are we in?\n        this.atn = null;\n        this.stateNumber = ATNState.INVALID_STATE_NUMBER;\n        this.stateType = null;\n        this.ruleIndex = 0; // at runtime, we don't have Rule objects\n        this.epsilonOnlyTransitions = false;\n        // Track the transitions emanating from this ATN state.\n        this.transitions = [];\n        // Used to cache lookahead during parsing, not used during construction\n        this.nextTokenWithinRule = null;\n    }\n\n    toString() {\n        return this.stateNumber;\n    }\n\n    equals(other) {\n        if (other instanceof ATNState) {\n            return this.stateNumber===other.stateNumber;\n        } else {\n            return false;\n        }\n    }\n\n    isNonGreedyExitState() {\n        return false;\n    }\n\n    addTransition(trans, index) {\n        if(index===undefined) {\n            index = -1;\n        }\n        if (this.transitions.length===0) {\n            this.epsilonOnlyTransitions = trans.isEpsilon;\n        } else if(this.epsilonOnlyTransitions !== trans.isEpsilon) {\n            this.epsilonOnlyTransitions = false;\n        }\n        if (index===-1) {\n            this.transitions.push(trans);\n        } else {\n            this.transitions.splice(index, 1, trans);\n        }\n    }\n}\n\n// constants for serialization\nATNState.INVALID_TYPE = 0;\nATNState.BASIC = 1;\nATNState.RULE_START = 2;\nATNState.BLOCK_START = 3;\nATNState.PLUS_BLOCK_START = 4;\nATNState.STAR_BLOCK_START = 5;\nATNState.TOKEN_START = 6;\nATNState.RULE_STOP = 7;\nATNState.BLOCK_END = 8;\nATNState.STAR_LOOP_BACK = 9;\nATNState.STAR_LOOP_ENTRY = 10;\nATNState.PLUS_LOOP_BACK = 11;\nATNState.LOOP_END = 12;\n\nATNState.serializationNames = [\n            \"INVALID\",\n            \"BASIC\",\n            \"RULE_START\",\n            \"BLOCK_START\",\n            \"PLUS_BLOCK_START\",\n            \"STAR_BLOCK_START\",\n            \"TOKEN_START\",\n            \"RULE_STOP\",\n            \"BLOCK_END\",\n            \"STAR_LOOP_BACK\",\n            \"STAR_LOOP_ENTRY\",\n            \"PLUS_LOOP_BACK\",\n            \"LOOP_END\" ];\n\nATNState.INVALID_STATE_NUMBER = -1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport ATNState from \"./ATNState.js\";\n\n/**\n * The last node in the ATN for a rule, unless that rule is the start symbol.\n * In that case, there is one transition to EOF. Later, we might encode\n * references to all calls to this rule to compute FOLLOW sets for\n * error handling\n */\nexport default class RuleStopState extends ATNState {\n    constructor() {\n        super();\n        this.stateType = ATNState.RULE_STOP;\n        return this;\n    }\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n/**\n * An ATN transition between any two ATN states.  Subclasses define\n * atom, set, epsilon, action, predicate, rule transitions.\n *\n * <p>This is a one way link.  It emanates from a state (usually via a list of\n * transitions) and has a target state.</p>\n *\n * <p>Since we never have to change the ATN transitions once we construct it,\n * we can fix these transitions as specific classes. The DFA transitions\n * on the other hand need to update the labels as it adds transitions to\n * the states. We'll use the term Edge for the DFA to distinguish them from\n * ATN transitions.</p>\n */\nexport default class Transition {\n    constructor(target) {\n        // The target of this transition.\n        if (target===undefined || target===null) {\n            throw \"target cannot be null.\";\n        }\n        this.target = target;\n        // Are we epsilon, action, sempred?\n        this.isEpsilon = false;\n        this.label = null;\n    }\n}\n\n// constants for serialization\n\nTransition.EPSILON = 1;\nTransition.RANGE = 2;\nTransition.RULE = 3;\n// e.g., {isType(input.LT(1))}?\nTransition.PREDICATE = 4;\nTransition.ATOM = 5;\nTransition.ACTION = 6;\n// ~(A|B) or ~atom, wildcard, which convert to next 2\nTransition.SET = 7;\nTransition.NOT_SET = 8;\nTransition.WILDCARD = 9;\nTransition.PRECEDENCE = 10;\n\nTransition.serializationNames = [\n            \"INVALID\",\n            \"EPSILON\",\n            \"RANGE\",\n            \"RULE\",\n            \"PREDICATE\",\n            \"ATOM\",\n            \"ACTION\",\n            \"SET\",\n            \"NOT_SET\",\n            \"WILDCARD\",\n            \"PRECEDENCE\"\n        ];\n\nTransition.serializationTypes = {\n        EpsilonTransition: Transition.EPSILON,\n        RangeTransition: Transition.RANGE,\n        RuleTransition: Transition.RULE,\n        PredicateTransition: Transition.PREDICATE,\n        AtomTransition: Transition.ATOM,\n        ActionTransition: Transition.ACTION,\n        SetTransition: Transition.SET,\n        NotSetTransition: Transition.NOT_SET,\n        WildcardTransition: Transition.WILDCARD,\n        PrecedencePredicateTransition: Transition.PRECEDENCE\n    };\n\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport Transition from \"./Transition.js\";\n\nexport default class RuleTransition extends Transition {\n    constructor(ruleStart, ruleIndex, precedence, followState) {\n        super(ruleStart);\n        // ptr to the rule definition object for this rule ref\n        this.ruleIndex = ruleIndex;\n        this.precedence = precedence;\n        // what node to begin computations following ref to rule\n        this.followState = followState;\n        this.serializationType = Transition.RULE;\n        this.isEpsilon = true;\n    }\n\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n        return false;\n    }\n}\n\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n// A transition containing a set of values.\nimport IntervalSet from \"../misc/IntervalSet.js\";\nimport Token from '../Token.js';\nimport Transition from \"./Transition.js\";\n\nexport default class SetTransition extends Transition {\n    constructor(target, set) {\n        super(target);\n        this.serializationType = Transition.SET;\n        if (set !==undefined && set !==null) {\n            this.label = set;\n        } else {\n            this.label = new IntervalSet();\n            this.label.addOne(Token.INVALID_TYPE);\n        }\n    }\n\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n        return this.label.contains(symbol);\n    }\n\n    toString() {\n        return this.label.toString();\n    }\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport Transition from \"./Transition.js\";\nimport SetTransition from \"./SetTransition.js\";\n\nexport default class NotSetTransition extends SetTransition {\n    constructor(target, set) {\n        super(target, set);\n        this.serializationType = Transition.NOT_SET;\n    }\n\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n        return symbol >= minVocabSymbol && symbol <= maxVocabSymbol &&\n            !super.matches(symbol, minVocabSymbol, maxVocabSymbol);\n    }\n\n    toString() {\n        return '~' + super.toString();\n    }\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport Transition from \"./Transition.js\";\n\nexport default class WildcardTransition extends Transition {\n    constructor(target) {\n        super(target);\n        this.serializationType = Transition.WILDCARD;\n    }\n\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n        return symbol >= minVocabSymbol && symbol <= maxVocabSymbol;\n    }\n\n    toString() {\n        return \".\";\n    }\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport Transition from \"../transition/Transition.js\";\n\nexport default class AbstractPredicateTransition extends Transition {\n    constructor(target) {\n        super(target);\n    }\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n/**\n * The basic notion of a tree has a parent, a payload, and a list of children.\n * It is the most abstract interface for all the trees used by ANTLR.\n */\nexport default class Tree {}\n\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport Tree from \"./Tree.js\";\n\nexport default class SyntaxTree extends Tree {\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport SyntaxTree from \"./SyntaxTree.js\";\n\nexport default class ParseTree extends SyntaxTree {\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport ParseTree from \"./ParseTree.js\";\n\nexport default class RuleNode extends ParseTree {\n\n    getRuleContext(){\n        throw new Error(\"missing interface implementation\")\n    }\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport ParseTree from \"./ParseTree.js\";\n\nexport default class TerminalNode extends ParseTree {\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport TerminalNode from \"./TerminalNode.js\";\n\nexport default class ErrorNode extends TerminalNode {\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nexport default function escapeWhitespace(s, escapeSpaces) {\n    s = s.replace(/\\t/g, \"\\\\t\")\n        .replace(/\\n/g, \"\\\\n\")\n        .replace(/\\r/g, \"\\\\r\");\n    if (escapeSpaces) {\n        s = s.replace(/ /g, \"\\u00B7\");\n    }\n    return s;\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nimport Token from '../Token.js';\nimport ErrorNode from './ErrorNode.js';\nimport TerminalNode from './TerminalNode.js';\nimport RuleNode from './RuleNode.js';\nimport escapeWhitespace from \"../utils/escapeWhitespace.js\";\n\n/** A set of utility routines useful for all kinds of ANTLR trees. */\nconst Trees = {\n    /**\n     * Print out a whole tree in LISP form. {@link //getNodeText} is used on the\n     *  node payloads to get the text for the nodes.  Detect\n     *  parse trees and extract data appropriately.\n     */\n    toStringTree: function(tree, ruleNames, recog) {\n        ruleNames = ruleNames || null;\n        recog = recog || null;\n        if(recog!==null) {\n            ruleNames = recog.ruleNames;\n        }\n        let s = Trees.getNodeText(tree, ruleNames);\n        s = escapeWhitespace(s, false);\n        const c = tree.getChildCount();\n        if(c===0) {\n            return s;\n        }\n        let res = \"(\" + s + ' ';\n        if(c>0) {\n            s = Trees.toStringTree(tree.getChild(0), ruleNames);\n            res = res.concat(s);\n        }\n        for(let i=1;i<c;i++) {\n            s = Trees.toStringTree(tree.getChild(i), ruleNames);\n            res = res.concat(' ' + s);\n        }\n        res = res.concat(\")\");\n        return res;\n    },\n\n    getNodeText: function(t, ruleNames, recog) {\n        ruleNames = ruleNames || null;\n        recog = recog || null;\n        if(recog!==null) {\n            ruleNames = recog.ruleNames;\n        }\n        if(ruleNames!==null) {\n            if (t instanceof RuleNode) {\n                const context = t.getRuleContext()\n                const altNumber = context.getAltNumber();\n                // use const value of ATN.INVALID_ALT_NUMBER to avoid circular dependency\n                if ( altNumber != 0 ) {\n                    return ruleNames[t.ruleIndex]+\":\"+altNumber;\n                }\n                return ruleNames[t.ruleIndex];\n            } else if ( t instanceof ErrorNode) {\n                return t.toString();\n            } else if(t instanceof TerminalNode) {\n                if(t.symbol!==null) {\n                    return t.symbol.text;\n                }\n            }\n        }\n        // no recog for rule names\n        const payload = t.getPayload();\n        if (payload instanceof Token ) {\n            return payload.text;\n        }\n        return t.getPayload().toString();\n    },\n\n    /**\n     * Return ordered list of all children of this node\n     */\n    getChildren: function(t) {\n        const list = [];\n        for(let i=0;i<t.getChildCount();i++) {\n            list.push(t.getChild(i));\n        }\n        return list;\n    },\n\n    /**\n     * Return a list of all ancestors of this node.  The first node of\n     * list is the root and the last is the parent of this node.\n     */\n    getAncestors: function(t) {\n        let ancestors = [];\n        t = t.getParent();\n        while(t!==null) {\n            ancestors = [t].concat(ancestors);\n            t = t.getParent();\n        }\n        return ancestors;\n    },\n\n    findAllTokenNodes: function(t, ttype) {\n        return Trees.findAllNodes(t, ttype, true);\n    },\n\n    findAllRuleNodes: function(t, ruleIndex) {\n        return Trees.findAllNodes(t, ruleIndex, false);\n    },\n\n    findAllNodes: function(t, index, findTokens) {\n        const nodes = [];\n        Trees._findAllNodes(t, index, findTokens, nodes);\n        return nodes;\n    },\n\n    _findAllNodes: function(t, index, findTokens, nodes) {\n        // check this node (the root) first\n        if(findTokens && (t instanceof TerminalNode)) {\n            if(t.symbol.type===index) {\n                nodes.push(t);\n            }\n        } else if(!findTokens && (t instanceof RuleNode)) {\n            if(t.ruleIndex===index) {\n                nodes.push(t);\n            }\n        }\n        // check children\n        for(let i=0;i<t.getChildCount();i++) {\n            Trees._findAllNodes(t.getChild(i), index, findTokens, nodes);\n        }\n    },\n\n    descendants: function(t) {\n        let nodes = [t];\n        for(let i=0;i<t.getChildCount();i++) {\n            nodes = nodes.concat(Trees.descendants(t.getChild(i)));\n        }\n        return nodes;\n    }\n}\n\nexport default Trees;\n", "/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nimport RuleNode from '../tree/RuleNode.js';\nimport Interval from '../misc/Interval.js';\nimport Trees from '../tree/Trees.js';\n\nexport default class RuleContext extends RuleNode {\n    /** A rule context is a record of a single rule invocation. It knows\n     * which context invoked it, if any. If there is no parent context, then\n     * naturally the invoking state is not valid.  The parent link\n     * provides a chain upwards from the current rule invocation to the root\n     * of the invocation tree, forming a stack. We actually carry no\n     * information about the rule associated with this context (except\n     * when parsing). We keep only the state number of the invoking state from\n     * the ATN submachine that invoked this. Contrast this with the s\n     * pointer inside ParserRuleContext that tracks the current state\n     * being \"executed\" for the current rule.\n     *\n     * The parent contexts are useful for computing lookahead sets and\n     * getting error information.\n     *\n     * These objects are used during parsing and prediction.\n     * For the special case of parsers, we use the subclass\n     * ParserRuleContext.\n     *\n     * @see ParserRuleContext\n     */\n    constructor(parent, invokingState) {\n        // What context invoked this rule?\n        super();\n        this.parentCtx = parent || null;\n        /**\n         * What state invoked the rule associated with this context?\n         * The \"return address\" is the followState of invokingState\n         * If parent is null, this should be -1.\n         */\n        this.invokingState = invokingState || -1;\n    }\n\n    depth() {\n        let n = 0;\n        let p = this;\n        while (p !== null) {\n            p = p.parentCtx;\n            n += 1;\n        }\n        return n;\n    }\n\n    /**\n     * A context is empty if there is no invoking state; meaning nobody call\n     * current context.\n     */\n    isEmpty() {\n        return this.invokingState === -1;\n    }\n\n// satisfy the ParseTree / SyntaxTree interface\n    getSourceInterval() {\n        return Interval.INVALID_INTERVAL;\n    }\n\n    getRuleContext() {\n        return this;\n    }\n\n    getPayload() {\n        return this;\n    }\n\n    /**\n     * Return the combined text of all child nodes. This method only considers\n     * tokens which have been added to the parse tree.\n     * <p>\n     * Since tokens on hidden channels (e.g. whitespace or comments) are not\n     * added to the parse trees, they will not appear in the output of this\n     * method.\n     */\n    getText() {\n        if (this.getChildCount() === 0) {\n            return \"\";\n        } else {\n            return this.children.map(function (child) {\n                return child.getText();\n            }).join(\"\");\n        }\n    }\n\n    /**\n     * For rule associated with this parse tree internal node, return\n     * the outer alternative number used to match the input. Default\n     * implementation does not compute nor store this alt num. Create\n     * a subclass of ParserRuleContext with backing field and set\n     * option contextSuperClass.\n     * to set it.\n     */\n    getAltNumber() {\n        // use constant value of ATN.INVALID_ALT_NUMBER to avoid circular dependency\n        return 0;\n    }\n\n    /**\n     * Set the outer alternative number for this context node. Default\n     * implementation does nothing to avoid backing field overhead for\n     * trees that don't need it.  Create\n     * a subclass of ParserRuleContext with backing field and set\n     * option contextSuperClass.\n     */\n    setAltNumber(altNumber) {\n    }\n\n    getChild(i) {\n        return null;\n    }\n\n    getChildCount() {\n        return 0;\n    }\n\n    accept(visitor) {\n        return visitor.visitChildren(this);\n    }\n\n    /**\n     * Print out a whole tree, not just a node, in LISP format\n     * (root child1 .. childN). Print just a node if this is a leaf.\n     */\n    toStringTree(ruleNames, recog) {\n        return Trees.toStringTree(this, ruleNames, recog);\n    }\n\n    toString(ruleNames, stop) {\n        ruleNames = ruleNames || null;\n        stop = stop || null;\n        let p = this;\n        let s = \"[\";\n        while (p !== null && p !== stop) {\n            if (ruleNames === null) {\n                if (!p.isEmpty()) {\n                    s += p.invokingState;\n                }\n            } else {\n                const ri = p.ruleIndex;\n                const ruleName = (ri >= 0 && ri < ruleNames.length) ? ruleNames[ri]\n                    : \"\" + ri;\n                s += ruleName;\n            }\n            if (p.parentCtx !== null && (ruleNames !== null || !p.parentCtx.isEmpty())) {\n                s += \" \";\n            }\n            p = p.parentCtx;\n        }\n        s += \"]\";\n        return s;\n    }\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nexport default class PredictionContext {\n\n\tconstructor(cachedHashCode) {\n\t\tthis.cachedHashCode = cachedHashCode;\n\t}\n\n\t/**\n\t * Stores the computed hash code of this {@link PredictionContext}. The hash\n\t * code is computed in parts to match the following reference algorithm.\n\t *\n\t * <pre>\n\t * private int referenceHashCode() {\n\t * int hash = {@link MurmurHash//initialize MurmurHash.initialize}({@link\n\t * //INITIAL_HASH});\n\t *\n\t * for (int i = 0; i &lt; {@link //size()}; i++) {\n\t * hash = {@link MurmurHash//update MurmurHash.update}(hash, {@link //getParent\n\t * getParent}(i));\n\t * }\n\t *\n\t * for (int i = 0; i &lt; {@link //size()}; i++) {\n\t * hash = {@link MurmurHash//update MurmurHash.update}(hash, {@link\n\t * //getReturnState getReturnState}(i));\n\t * }\n\t *\n\t * hash = {@link MurmurHash//finish MurmurHash.finish}(hash, 2// {@link\n\t * //size()});\n\t * return hash;\n\t * }\n\t * </pre>\n\t * This means only the {@link //EMPTY} context is in set.\n\t */\n\tisEmpty() {\n\t\treturn this === PredictionContext.EMPTY;\n\t}\n\n\thasEmptyPath() {\n\t\treturn this.getReturnState(this.length - 1) === PredictionContext.EMPTY_RETURN_STATE;\n\t}\n\n\thashCode() {\n\t\treturn this.cachedHashCode;\n\t}\n\n\tupdateHashCode(hash) {\n\t\thash.update(this.cachedHashCode);\n\t}\n}\n\n/**\n * Represents {@code $} in local context prediction, which means wildcard.\n * {@code//+x =//}.\n */\nPredictionContext.EMPTY = null;\n\n/**\n * Represents {@code $} in an array in full context mode, when {@code $}\n * doesn't mean wildcard: {@code $ + x = [$,x]}. Here,\n * {@code $} = {@link //EMPTY_RETURN_STATE}.\n */\nPredictionContext.EMPTY_RETURN_STATE = 0x7FFFFFFF;\n\nPredictionContext.globalNodeCount = 1;\nPredictionContext.id = PredictionContext.globalNodeCount;\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport PredictionContext from \"./PredictionContext.js\";\nimport equalArrays from \"../utils/equalArrays.js\";\nimport HashCode from \"../misc/HashCode.js\";\n\nexport default class ArrayPredictionContext extends PredictionContext {\n\n    constructor(parents, returnStates) {\n        /**\n         * Parent can be null only if full ctx mode and we make an array\n         * from {@link //EMPTY} and non-empty. We merge {@link //EMPTY} by using\n         * null parent and\n         * returnState == {@link //EMPTY_RETURN_STATE}.\n         */\n        const h = new HashCode();\n        h.update(parents, returnStates);\n        const hashCode = h.finish();\n        super(hashCode);\n        this.parents = parents;\n        this.returnStates = returnStates;\n        return this;\n    }\n\n    isEmpty() {\n        // since EMPTY_RETURN_STATE can only appear in the last position, we\n        // don't need to verify that size==1\n        return this.returnStates[0] === PredictionContext.EMPTY_RETURN_STATE;\n    }\n\n    getParent(index) {\n        return this.parents[index];\n    }\n\n    getReturnState(index) {\n        return this.returnStates[index];\n    }\n\n    equals(other) {\n        if (this === other) {\n            return true;\n        } else if (!(other instanceof ArrayPredictionContext)) {\n            return false;\n        } else if (this.hashCode() !== other.hashCode()) {\n            return false; // can't be same if hash is different\n        } else {\n            return equalArrays(this.returnStates, other.returnStates) &&\n                equalArrays(this.parents, other.parents);\n        }\n    }\n\n    toString() {\n        if (this.isEmpty()) {\n            return \"[]\";\n        } else {\n            let s = \"[\";\n            for (let i = 0; i < this.returnStates.length; i++) {\n                if (i > 0) {\n                    s = s + \", \";\n                }\n                if (this.returnStates[i] === PredictionContext.EMPTY_RETURN_STATE) {\n                    s = s + \"$\";\n                    continue;\n                }\n                s = s + this.returnStates[i];\n                if (this.parents[i] !== null) {\n                    s = s + \" \" + this.parents[i];\n                } else {\n                    s = s + \"null\";\n                }\n            }\n            return s + \"]\";\n        }\n    }\n\n    get length(){\n        return this.returnStates.length;\n    }\n}\n\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport PredictionContext from './PredictionContext.js';\nimport HashCode from \"../misc/HashCode.js\";\n\nexport default class SingletonPredictionContext extends PredictionContext {\n\n    constructor(parent, returnState) {\n        let hashCode = 0;\n        const hash = new HashCode();\n        if(parent !== null) {\n            hash.update(parent, returnState);\n        } else {\n            hash.update(1);\n        }\n        hashCode = hash.finish();\n        super(hashCode);\n        this.parentCtx = parent;\n        this.returnState = returnState;\n    }\n\n    getParent(index) {\n        return this.parentCtx;\n    }\n\n    getReturnState(index) {\n        return this.returnState;\n    }\n\n    equals(other) {\n        if (this === other) {\n            return true;\n        } else if (!(other instanceof SingletonPredictionContext)) {\n            return false;\n        } else if (this.hashCode() !== other.hashCode()) {\n            return false; // can't be same if hash is different\n        } else {\n            if(this.returnState !== other.returnState)\n                return false;\n            else if(this.parentCtx==null)\n                return other.parentCtx==null\n            else\n                return this.parentCtx.equals(other.parentCtx);\n        }\n    }\n\n    toString() {\n        const up = this.parentCtx === null ? \"\" : this.parentCtx.toString();\n        if (up.length === 0) {\n            if (this.returnState === PredictionContext.EMPTY_RETURN_STATE) {\n                return \"$\";\n            } else {\n                return \"\" + this.returnState;\n            }\n        } else {\n            return \"\" + this.returnState + \" \" + up;\n        }\n    }\n\n    get length(){\n        return 1;\n    }\n\n    static create(parent, returnState) {\n        if (returnState === PredictionContext.EMPTY_RETURN_STATE && parent === null) {\n            // someone can pass in the bits of an array ctx that mean $\n            return PredictionContext.EMPTY;\n        } else {\n            return new SingletonPredictionContext(parent, returnState);\n        }\n    }\n}\n\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport PredictionContext from \"./PredictionContext.js\";\nimport SingletonPredictionContext from \"./SingletonPredictionContext.js\";\n\nexport default class EmptyPredictionContext extends SingletonPredictionContext {\n\n    constructor() {\n        super(null, PredictionContext.EMPTY_RETURN_STATE);\n    }\n\n    isEmpty() {\n        return true;\n    }\n\n    getParent(index) {\n        return null;\n    }\n\n    getReturnState(index) {\n        return this.returnState;\n    }\n\n    equals(other) {\n        return this === other;\n    }\n\n    toString() {\n        return \"$\";\n    }\n}\n\n\nPredictionContext.EMPTY = new EmptyPredictionContext();\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport standardEqualsFunction from \"../utils/standardEqualsFunction.js\";\nimport standardHashCodeFunction from \"../utils/standardHashCodeFunction.js\";\n\nconst HASH_KEY_PREFIX = \"h-\";\n\nexport default class HashMap {\n\n    constructor(hashFunction, equalsFunction) {\n        this.data = {};\n        this.hashFunction = hashFunction || standardHashCodeFunction;\n        this.equalsFunction = equalsFunction || standardEqualsFunction;\n    }\n\n    set(key, value) {\n        const hashKey = HASH_KEY_PREFIX + this.hashFunction(key);\n        if (hashKey in this.data) {\n            const entries = this.data[hashKey];\n            for (let i = 0; i < entries.length; i++) {\n                const entry = entries[i];\n                if (this.equalsFunction(key, entry.key)) {\n                    const oldValue = entry.value;\n                    entry.value = value;\n                    return oldValue;\n                }\n            }\n            entries.push({key:key, value:value});\n            return value;\n        } else {\n            this.data[hashKey] = [{key:key, value:value}];\n            return value;\n        }\n    }\n\n    containsKey(key) {\n        const hashKey = HASH_KEY_PREFIX + this.hashFunction(key);\n        if(hashKey in this.data) {\n            const entries = this.data[hashKey];\n            for (let i = 0; i < entries.length; i++) {\n                const entry = entries[i];\n                if (this.equalsFunction(key, entry.key))\n                    return true;\n            }\n        }\n        return false;\n    }\n\n    get(key) {\n        const hashKey = HASH_KEY_PREFIX + this.hashFunction(key);\n        if(hashKey in this.data) {\n            const entries = this.data[hashKey];\n            for (let i = 0; i < entries.length; i++) {\n                const entry = entries[i];\n                if (this.equalsFunction(key, entry.key))\n                    return entry.value;\n            }\n        }\n        return null;\n    }\n\n    entries() {\n        return Object.keys(this.data).filter(key => key.startsWith(HASH_KEY_PREFIX)).flatMap(key => this.data[key], this);\n    }\n\n    getKeys() {\n        return this.entries().map(e => e.key);\n    }\n\n    getValues() {\n        return this.entries().map(e => e.value);\n    }\n\n    toString() {\n        const ss = this.entries().map(e => '{' + e.key + ':' + e.value + '}');\n        return '[' + ss.join(\", \") + ']';\n    }\n\n    get length() {\n        return Object.keys(this.data).filter(key => key.startsWith(HASH_KEY_PREFIX)).map(key => this.data[key].length, this).reduce((accum, item) => accum + item, 0);\n    }\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport RuleContext from \"./RuleContext.js\";\nimport PredictionContext from \"./PredictionContext.js\";\nimport ArrayPredictionContext from \"./ArrayPredictionContext.js\";\nimport SingletonPredictionContext from \"./SingletonPredictionContext.js\";\nimport EmptyPredictionContext from \"./EmptyPredictionContext.js\";\nimport HashMap from \"../misc/HashMap.js\";\n\n/**\n * Convert a {@link RuleContext} tree to a {@link PredictionContext} graph.\n * Return {@link //EMPTY} if {@code outerContext} is empty or null.\n */\nexport function predictionContextFromRuleContext(atn, outerContext) {\n    if (outerContext === undefined || outerContext === null) {\n        outerContext = RuleContext.EMPTY;\n    }\n    // if we are in RuleContext of start rule, s, then PredictionContext\n    // is EMPTY. Nobody called us. (if we are empty, return empty)\n    if (outerContext.parentCtx === null || outerContext === RuleContext.EMPTY) {\n        return PredictionContext.EMPTY;\n    }\n    // If we have a parent, convert it to a PredictionContext graph\n    const parent = predictionContextFromRuleContext(atn, outerContext.parentCtx);\n    const state = atn.states[outerContext.invokingState];\n    const transition = state.transitions[0];\n    return SingletonPredictionContext.create(parent, transition.followState.stateNumber);\n}\n\n\nexport function getCachedPredictionContext(context, contextCache, visited) {\n    if (context.isEmpty()) {\n        return context;\n    }\n    let existing = visited.get(context) || null;\n    if (existing !== null) {\n        return existing;\n    }\n    existing = contextCache.get(context);\n    if (existing !== null) {\n        visited.set(context, existing);\n        return existing;\n    }\n    let changed = false;\n    let parents = [];\n    for (let i = 0; i < parents.length; i++) {\n        const parent = getCachedPredictionContext(context.getParent(i), contextCache, visited);\n        if (changed || parent !== context.getParent(i)) {\n            if (!changed) {\n                parents = [];\n                for (let j = 0; j < context.length; j++) {\n                    parents[j] = context.getParent(j);\n                }\n                changed = true;\n            }\n            parents[i] = parent;\n        }\n    }\n    if (!changed) {\n        contextCache.add(context);\n        visited.set(context, context);\n        return context;\n    }\n    let updated = null;\n    if (parents.length === 0) {\n        updated = PredictionContext.EMPTY;\n    } else if (parents.length === 1) {\n        updated = SingletonPredictionContext.create(parents[0], context\n            .getReturnState(0));\n    } else {\n        updated = new ArrayPredictionContext(parents, context.returnStates);\n    }\n    contextCache.add(updated);\n    visited.set(updated, updated);\n    visited.set(context, updated);\n\n    return updated;\n}\n\nexport function merge(a, b, rootIsWildcard, mergeCache) {\n    // share same graph if both same\n    if (a === b) {\n        return a;\n    }\n    if (a instanceof SingletonPredictionContext && b instanceof SingletonPredictionContext) {\n        return mergeSingletons(a, b, rootIsWildcard, mergeCache);\n    }\n    // At least one of a or b is array\n    // If one is $ and rootIsWildcard, return $ as// wildcard\n    if (rootIsWildcard) {\n        if (a instanceof EmptyPredictionContext) {\n            return a;\n        }\n        if (b instanceof EmptyPredictionContext) {\n            return b;\n        }\n    }\n    // convert singleton so both are arrays to normalize\n    if (a instanceof SingletonPredictionContext) {\n        a = new ArrayPredictionContext([a.getParent()], [a.returnState]);\n    }\n    if (b instanceof SingletonPredictionContext) {\n        b = new ArrayPredictionContext([b.getParent()], [b.returnState]);\n    }\n    return mergeArrays(a, b, rootIsWildcard, mergeCache);\n}\n\n\n/**\n * Merge two {@link ArrayPredictionContext} instances.\n *\n * <p>Different tops, different parents.<br>\n * <embed src=\"images/ArrayMerge_DiffTopDiffPar.svg\" type=\"image/svg+xml\"/></p>\n *\n * <p>Shared top, same parents.<br>\n * <embed src=\"images/ArrayMerge_ShareTopSamePar.svg\" type=\"image/svg+xml\"/></p>\n *\n * <p>Shared top, different parents.<br>\n * <embed src=\"images/ArrayMerge_ShareTopDiffPar.svg\" type=\"image/svg+xml\"/></p>\n *\n * <p>Shared top, all shared parents.<br>\n * <embed src=\"images/ArrayMerge_ShareTopSharePar.svg\"\n * type=\"image/svg+xml\"/></p>\n *\n * <p>Equal tops, merge parents and reduce top to\n * {@link SingletonPredictionContext}.<br>\n * <embed src=\"images/ArrayMerge_EqualTop.svg\" type=\"image/svg+xml\"/></p>\n */\nfunction mergeArrays(a, b, rootIsWildcard, mergeCache) {\n    if (mergeCache !== null) {\n        let previous = mergeCache.get(a, b);\n        if (previous !== null) {\n            return previous;\n        }\n        previous = mergeCache.get(b, a);\n        if (previous !== null) {\n            return previous;\n        }\n    }\n    // merge sorted payloads a + b => M\n    let i = 0; // walks a\n    let j = 0; // walks b\n    let k = 0; // walks target M array\n\n    let mergedReturnStates = [];\n    let mergedParents = [];\n    // walk and merge to yield mergedParents, mergedReturnStates\n    while (i < a.returnStates.length && j < b.returnStates.length) {\n        const a_parent = a.parents[i];\n        const b_parent = b.parents[j];\n        if (a.returnStates[i] === b.returnStates[j]) {\n            // same payload (stack tops are equal), must yield merged singleton\n            const payload = a.returnStates[i];\n            // $+$ = $\n            const bothDollars = payload === PredictionContext.EMPTY_RETURN_STATE &&\n                a_parent === null && b_parent === null;\n            const ax_ax = (a_parent !== null && b_parent !== null && a_parent === b_parent); // ax+ax\n            // ->\n            // ax\n            if (bothDollars || ax_ax) {\n                mergedParents[k] = a_parent; // choose left\n                mergedReturnStates[k] = payload;\n            } else { // ax+ay -> a'[x,y]\n                mergedParents[k] = merge(a_parent, b_parent, rootIsWildcard, mergeCache);\n                mergedReturnStates[k] = payload;\n            }\n            i += 1; // hop over left one as usual\n            j += 1; // but also skip one in right side since we merge\n        } else if (a.returnStates[i] < b.returnStates[j]) { // copy a[i] to M\n            mergedParents[k] = a_parent;\n            mergedReturnStates[k] = a.returnStates[i];\n            i += 1;\n        } else { // b > a, copy b[j] to M\n            mergedParents[k] = b_parent;\n            mergedReturnStates[k] = b.returnStates[j];\n            j += 1;\n        }\n        k += 1;\n    }\n    // copy over any payloads remaining in either array\n    if (i < a.returnStates.length) {\n        for (let p = i; p < a.returnStates.length; p++) {\n            mergedParents[k] = a.parents[p];\n            mergedReturnStates[k] = a.returnStates[p];\n            k += 1;\n        }\n    } else {\n        for (let p = j; p < b.returnStates.length; p++) {\n            mergedParents[k] = b.parents[p];\n            mergedReturnStates[k] = b.returnStates[p];\n            k += 1;\n        }\n    }\n    // trim merged if we combined a few that had same stack tops\n    if (k < mergedParents.length) { // write index < last position; trim\n        if (k === 1) { // for just one merged element, return singleton top\n            const a_ = SingletonPredictionContext.create(mergedParents[0],\n                mergedReturnStates[0]);\n            if (mergeCache !== null) {\n                mergeCache.set(a, b, a_);\n            }\n            return a_;\n        }\n        mergedParents = mergedParents.slice(0, k);\n        mergedReturnStates = mergedReturnStates.slice(0, k);\n    }\n\n    const M = new ArrayPredictionContext(mergedParents, mergedReturnStates);\n\n    // if we created same array as a or b, return that instead\n    // TODO: track whether this is possible above during merge sort for speed\n    if (M === a) {\n        if (mergeCache !== null) {\n            mergeCache.set(a, b, a);\n        }\n        return a;\n    }\n    if (M === b) {\n        if (mergeCache !== null) {\n            mergeCache.set(a, b, b);\n        }\n        return b;\n    }\n    combineCommonParents(mergedParents);\n\n    if (mergeCache !== null) {\n        mergeCache.set(a, b, M);\n    }\n    return M;\n}\n\n\n/**\n * Make pass over all <em>M</em> {@code parents}; merge any {@code equals()}\n * ones.\n */\nfunction combineCommonParents(parents) {\n    const uniqueParents = new HashMap();\n\n    for (let p = 0; p < parents.length; p++) {\n        const parent = parents[p];\n        if (!(uniqueParents.containsKey(parent))) {\n            uniqueParents.set(parent, parent);\n        }\n    }\n    for (let q = 0; q < parents.length; q++) {\n        parents[q] = uniqueParents.get(parents[q]);\n    }\n}\n\n\n/**\n * Merge two {@link SingletonPredictionContext} instances.\n *\n * <p>Stack tops equal, parents merge is same; return left graph.<br>\n * <embed src=\"images/SingletonMerge_SameRootSamePar.svg\"\n * type=\"image/svg+xml\"/></p>\n *\n * <p>Same stack top, parents differ; merge parents giving array node, then\n * remainders of those graphs. A new root node is created to point to the\n * merged parents.<br>\n * <embed src=\"images/SingletonMerge_SameRootDiffPar.svg\"\n * type=\"image/svg+xml\"/></p>\n *\n * <p>Different stack tops pointing to same parent. Make array node for the\n * root where both element in the root point to the same (original)\n * parent.<br>\n * <embed src=\"images/SingletonMerge_DiffRootSamePar.svg\"\n * type=\"image/svg+xml\"/></p>\n *\n * <p>Different stack tops pointing to different parents. Make array node for\n * the root where each element points to the corresponding original\n * parent.<br>\n * <embed src=\"images/SingletonMerge_DiffRootDiffPar.svg\"\n * type=\"image/svg+xml\"/></p>\n *\n * @param a the first {@link SingletonPredictionContext}\n * @param b the second {@link SingletonPredictionContext}\n * @param rootIsWildcard {@code true} if this is a local-context merge,\n * otherwise false to indicate a full-context merge\n * @param mergeCache\n */\nfunction mergeSingletons(a, b, rootIsWildcard, mergeCache) {\n    if (mergeCache !== null) {\n        let previous = mergeCache.get(a, b);\n        if (previous !== null) {\n            return previous;\n        }\n        previous = mergeCache.get(b, a);\n        if (previous !== null) {\n            return previous;\n        }\n    }\n\n    const rootMerge = mergeRoot(a, b, rootIsWildcard);\n    if (rootMerge !== null) {\n        if (mergeCache !== null) {\n            mergeCache.set(a, b, rootMerge);\n        }\n        return rootMerge;\n    }\n    if (a.returnState === b.returnState) {\n        const parent = merge(a.parentCtx, b.parentCtx, rootIsWildcard, mergeCache);\n        // if parent is same as existing a or b parent or reduced to a parent,\n        // return it\n        if (parent === a.parentCtx) {\n            return a; // ax + bx = ax, if a=b\n        }\n        if (parent === b.parentCtx) {\n            return b; // ax + bx = bx, if a=b\n        }\n        // else: ax + ay = a'[x,y]\n        // merge parents x and y, giving array node with x,y then remainders\n        // of those graphs. dup a, a' points at merged array\n        // new joined parent so create new singleton pointing to it, a'\n        const spc = SingletonPredictionContext.create(parent, a.returnState);\n        if (mergeCache !== null) {\n            mergeCache.set(a, b, spc);\n        }\n        return spc;\n    } else { // a != b payloads differ\n        // see if we can collapse parents due to $+x parents if local ctx\n        let singleParent = null;\n        if (a === b || (a.parentCtx !== null && a.parentCtx === b.parentCtx)) { // ax +\n            // bx =\n            // [a,b]x\n            singleParent = a.parentCtx;\n        }\n        if (singleParent !== null) { // parents are same\n            // sort payloads and use same parent\n            const payloads = [ a.returnState, b.returnState ];\n            if (a.returnState > b.returnState) {\n                payloads[0] = b.returnState;\n                payloads[1] = a.returnState;\n            }\n            const parents = [ singleParent, singleParent ];\n            const apc = new ArrayPredictionContext(parents, payloads);\n            if (mergeCache !== null) {\n                mergeCache.set(a, b, apc);\n            }\n            return apc;\n        }\n        // parents differ and can't merge them. Just pack together\n        // into array; can't merge.\n        // ax + by = [ax,by]\n        const payloads = [ a.returnState, b.returnState ];\n        let parents = [ a.parentCtx, b.parentCtx ];\n        if (a.returnState > b.returnState) { // sort by payload\n            payloads[0] = b.returnState;\n            payloads[1] = a.returnState;\n            parents = [ b.parentCtx, a.parentCtx ];\n        }\n        const a_ = new ArrayPredictionContext(parents, payloads);\n        if (mergeCache !== null) {\n            mergeCache.set(a, b, a_);\n        }\n        return a_;\n    }\n}\n\n\n/**\n * Handle case where at least one of {@code a} or {@code b} is\n * {@link //EMPTY}. In the following diagrams, the symbol {@code $} is used\n * to represent {@link //EMPTY}.\n *\n * <h2>Local-Context Merges</h2>\n *\n * <p>These local-context merge operations are used when {@code rootIsWildcard}\n * is true.</p>\n *\n * <p>{@link //EMPTY} is superset of any graph; return {@link //EMPTY}.<br>\n * <embed src=\"images/LocalMerge_EmptyRoot.svg\" type=\"image/svg+xml\"/></p>\n *\n * <p>{@link //EMPTY} and anything is {@code //EMPTY}, so merged parent is\n * {@code //EMPTY}; return left graph.<br>\n * <embed src=\"images/LocalMerge_EmptyParent.svg\" type=\"image/svg+xml\"/></p>\n *\n * <p>Special case of last merge if local context.<br>\n * <embed src=\"images/LocalMerge_DiffRoots.svg\" type=\"image/svg+xml\"/></p>\n *\n * <h2>Full-Context Merges</h2>\n *\n * <p>These full-context merge operations are used when {@code rootIsWildcard}\n * is false.</p>\n *\n * <p><embed src=\"images/FullMerge_EmptyRoots.svg\" type=\"image/svg+xml\"/></p>\n *\n * <p>Must keep all contexts; {@link //EMPTY} in array is a special value (and\n * null parent).<br>\n * <embed src=\"images/FullMerge_EmptyRoot.svg\" type=\"image/svg+xml\"/></p>\n *\n * <p><embed src=\"images/FullMerge_SameRoot.svg\" type=\"image/svg+xml\"/></p>\n *\n * @param a the first {@link SingletonPredictionContext}\n * @param b the second {@link SingletonPredictionContext}\n * @param rootIsWildcard {@code true} if this is a local-context merge,\n * otherwise false to indicate a full-context merge\n */\nfunction mergeRoot(a, b, rootIsWildcard) {\n    if (rootIsWildcard) {\n        if (a === PredictionContext.EMPTY) {\n            return PredictionContext.EMPTY; // // + b =//\n        }\n        if (b === PredictionContext.EMPTY) {\n            return PredictionContext.EMPTY; // a +// =//\n        }\n    } else {\n        if (a === PredictionContext.EMPTY && b === PredictionContext.EMPTY) {\n            return PredictionContext.EMPTY; // $ + $ = $\n        } else if (a === PredictionContext.EMPTY) { // $ + x = [$,x]\n            const payloads = [ b.returnState,\n                PredictionContext.EMPTY_RETURN_STATE ];\n            const parents = [ b.parentCtx, null ];\n            return new ArrayPredictionContext(parents, payloads);\n        } else if (b === PredictionContext.EMPTY) { // x + $ = [$,x] ($ is always first if present)\n            const payloads = [ a.returnState, PredictionContext.EMPTY_RETURN_STATE ];\n            const parents = [ a.parentCtx, null ];\n            return new ArrayPredictionContext(parents, payloads);\n        }\n    }\n    return null;\n}\n\n\n// ter's recursive version of Sam's getAllNodes()\nexport function getAllContextNodes(context, nodes, visited) {\n    if (nodes === null) {\n        nodes = [];\n        return getAllContextNodes(context, nodes, visited);\n    } else if (visited === null) {\n        visited = new HashMap();\n        return getAllContextNodes(context, nodes, visited);\n    } else {\n        if (context === null || visited.containsKey(context)) {\n            return nodes;\n        }\n        visited.set(context, context);\n        nodes.push(context);\n        for (let i = 0; i < context.length; i++) {\n            getAllContextNodes(context.getParent(i), nodes, visited);\n        }\n        return nodes;\n    }\n}\n\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport HashCode from \"./HashCode.js\";\nimport equalArrays from \"../utils/equalArrays.js\";\n\nexport default class BitSet {\n\n    constructor() {\n        this.data = [];\n    }\n\n    add(value) {\n        this.data[value] = true;\n    }\n\n    or(set) {\n        Object.keys(set.data).map(alt => this.add(alt), this);\n    }\n\n    remove(value) {\n        delete this.data[value];\n    }\n\n    has(value) {\n        return this.data[value] === true;\n    }\n\n    values() {\n        return Object.keys(this.data);\n    }\n\n    minValue() {\n        return Math.min.apply(null, this.values());\n    }\n\n    hashCode() {\n        return HashCode.hashStuff(this.values());\n    }\n\n    equals(other) {\n        return other instanceof BitSet && equalArrays(this.data, other.data);\n    }\n\n    toString() {\n        return \"{\" + this.values().join(\", \") + \"}\";\n    }\n\n    get length(){\n        return this.values().length;\n    }\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nimport Token from '../Token.js';\nimport ATNConfig from './ATNConfig.js';\nimport IntervalSet from '../misc/IntervalSet.js';\nimport RuleStopState from '../state/RuleStopState.js';\nimport RuleTransition from '../transition/RuleTransition.js';\nimport NotSetTransition from '../transition/NotSetTransition.js';\nimport WildcardTransition from '../transition/WildcardTransition.js';\nimport AbstractPredicateTransition from './AbstractPredicateTransition.js';\nimport { predictionContextFromRuleContext } from '../context/PredictionContextUtils.js';\nimport PredictionContext from '../context/PredictionContext.js';\nimport SingletonPredictionContext from '../context/SingletonPredictionContext.js';\nimport BitSet from \"../misc/BitSet.js\";\nimport HashSet from \"../misc/HashSet.js\";\n\nexport default class LL1Analyzer {\n    constructor(atn) {\n        this.atn = atn;\n    }\n\n    /**\n     * Calculates the SLL(1) expected lookahead set for each outgoing transition\n     * of an {@link ATNState}. The returned array has one element for each\n     * outgoing transition in {@code s}. If the closure from transition\n     * <em>i</em> leads to a semantic predicate before matching a symbol, the\n     * element at index <em>i</em> of the result will be {@code null}.\n     *\n     * @param s the ATN state\n     * @return the expected symbols for each outgoing transition of {@code s}.\n     */\n    getDecisionLookahead(s) {\n        if (s === null) {\n            return null;\n        }\n        const count = s.transitions.length;\n        const look = [];\n        for(let alt=0; alt< count; alt++) {\n            look[alt] = new IntervalSet();\n            const lookBusy = new HashSet();\n            const seeThruPreds = false; // fail to get lookahead upon pred\n            this._LOOK(s.transition(alt).target, null, PredictionContext.EMPTY,\n                  look[alt], lookBusy, new BitSet(), seeThruPreds, false);\n            // Wipe out lookahead for this alternative if we found nothing\n            // or we had a predicate when we !seeThruPreds\n            if (look[alt].length===0 || look[alt].contains(LL1Analyzer.HIT_PRED)) {\n                look[alt] = null;\n            }\n        }\n        return look;\n    }\n\n    /**\n     * Compute set of tokens that can follow {@code s} in the ATN in the\n     * specified {@code ctx}.\n     *\n     * <p>If {@code ctx} is {@code null} and the end of the rule containing\n     * {@code s} is reached, {@link Token//EPSILON} is added to the result set.\n     * If {@code ctx} is not {@code null} and the end of the outermost rule is\n     * reached, {@link Token//EOF} is added to the result set.</p>\n     *\n     * @param s the ATN state\n     * @param stopState the ATN state to stop at. This can be a\n     * {@link BlockEndState} to detect epsilon paths through a closure.\n     * @param ctx the complete parser context, or {@code null} if the context\n     * should be ignored\n     *\n     * @return The set of tokens that can follow {@code s} in the ATN in the\n     * specified {@code ctx}.\n     */\n    LOOK(s, stopState, ctx) {\n        const r = new IntervalSet();\n        const seeThruPreds = true; // ignore preds; get all lookahead\n        ctx = ctx || null;\n        const lookContext = ctx!==null ? predictionContextFromRuleContext(s.atn, ctx) : null;\n        this._LOOK(s, stopState, lookContext, r, new HashSet(), new BitSet(), seeThruPreds, true);\n        return r;\n    }\n\n    /**\n     * Compute set of tokens that can follow {@code s} in the ATN in the\n     * specified {@code ctx}.\n     *\n     * <p>If {@code ctx} is {@code null} and {@code stopState} or the end of the\n     * rule containing {@code s} is reached, {@link Token//EPSILON} is added to\n     * the result set. If {@code ctx} is not {@code null} and {@code addEOF} is\n     * {@code true} and {@code stopState} or the end of the outermost rule is\n     * reached, {@link Token//EOF} is added to the result set.</p>\n     *\n     * @param s the ATN state.\n     * @param stopState the ATN state to stop at. This can be a\n     * {@link BlockEndState} to detect epsilon paths through a closure.\n     * @param ctx The outer context, or {@code null} if the outer context should\n     * not be used.\n     * @param look The result lookahead set.\n     * @param lookBusy A set used for preventing epsilon closures in the ATN\n     * from causing a stack overflow. Outside code should pass\n     * {@code new CustomizedSet<ATNConfig>} for this argument.\n     * @param calledRuleStack A set used for preventing left recursion in the\n     * ATN from causing a stack overflow. Outside code should pass\n     * {@code new BitSet()} for this argument.\n     * @param seeThruPreds {@code true} to true semantic predicates as\n     * implicitly {@code true} and \"see through them\", otherwise {@code false}\n     * to treat semantic predicates as opaque and add {@link //HIT_PRED} to the\n     * result if one is encountered.\n     * @param addEOF Add {@link Token//EOF} to the result if the end of the\n     * outermost context is reached. This parameter has no effect if {@code ctx}\n     * is {@code null}.\n     */\n    _LOOK(s, stopState , ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF) {\n        const c = new ATNConfig({state:s, alt:0, context: ctx}, null);\n        if (lookBusy.has(c)) {\n            return;\n        }\n        lookBusy.add(c);\n        if (s === stopState) {\n            if (ctx ===null) {\n                look.addOne(Token.EPSILON);\n                return;\n            } else if (ctx.isEmpty() && addEOF) {\n                look.addOne(Token.EOF);\n                return;\n            }\n        }\n        if (s instanceof RuleStopState ) {\n            if (ctx ===null) {\n                look.addOne(Token.EPSILON);\n                return;\n            } else if (ctx.isEmpty() && addEOF) {\n                look.addOne(Token.EOF);\n                return;\n            }\n            if (ctx !== PredictionContext.EMPTY) {\n                const removed = calledRuleStack.has(s.ruleIndex);\n                try {\n                    calledRuleStack.remove(s.ruleIndex);\n                    // run thru all possible stack tops in ctx\n                    for (let i = 0; i < ctx.length; i++) {\n                        const returnState = this.atn.states[ctx.getReturnState(i)];\n                        this._LOOK(returnState, stopState, ctx.getParent(i), look, lookBusy, calledRuleStack, seeThruPreds, addEOF);\n                    }\n                }finally {\n                    if (removed) {\n                        calledRuleStack.add(s.ruleIndex);\n                    }\n                }\n                return;\n            }\n        }\n        for(let j=0; j<s.transitions.length; j++) {\n            const t = s.transitions[j];\n            if (t.constructor === RuleTransition) {\n                if (calledRuleStack.has(t.target.ruleIndex)) {\n                    continue;\n                }\n                const newContext = SingletonPredictionContext.create(ctx, t.followState.stateNumber);\n                try {\n                    calledRuleStack.add(t.target.ruleIndex);\n                    this._LOOK(t.target, stopState, newContext, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);\n                } finally {\n                    calledRuleStack.remove(t.target.ruleIndex);\n                }\n            } else if (t instanceof AbstractPredicateTransition ) {\n                if (seeThruPreds) {\n                    this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);\n                } else {\n                    look.addOne(LL1Analyzer.HIT_PRED);\n                }\n            } else if( t.isEpsilon) {\n                this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);\n            } else if (t.constructor === WildcardTransition) {\n                look.addRange( Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType );\n            } else {\n                let set = t.label;\n                if (set !== null) {\n                    if (t instanceof NotSetTransition) {\n                        set = set.complement(Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType);\n                    }\n                    look.addSet(set);\n                }\n            }\n        }\n    }\n}\n\n/**\n * Special value added to the lookahead sets to indicate that we hit\n * a predicate during analysis if {@code seeThruPreds==false}.\n */\nLL1Analyzer.HIT_PRED = Token.INVALID_TYPE;\n", "/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nimport LL1Analyzer from './LL1Analyzer.js';\nimport IntervalSet from '../misc/IntervalSet.js';\nimport Token from '../Token.js';\n\nexport default class ATN {\n\n    constructor(grammarType , maxTokenType) {\n        /**\n         * Used for runtime deserialization of ATNs from strings\n         * The type of the ATN.\n        */\n        this.grammarType = grammarType;\n        // The maximum value for any symbol recognized by a transition in the ATN.\n        this.maxTokenType = maxTokenType;\n        this.states = [];\n        /**\n         * Each subrule/rule is a decision point and we must track them so we\n         * can go back later and build DFA predictors for them.  This includes\n         * all the rules, subrules, optional blocks, ()+, ()* etc...\n         */\n        this.decisionToState = [];\n        // Maps from rule index to starting state number.\n        this.ruleToStartState = [];\n        // Maps from rule index to stop state number.\n        this.ruleToStopState = null;\n        this.modeNameToStartState = {};\n        /**\n         * For lexer ATNs, this maps the rule index to the resulting token type.\n         * For parser ATNs, this maps the rule index to the generated bypass token\n         * type if the {@link ATNDeserializationOptions//isGenerateRuleBypassTransitions}\n         * deserialization option was specified; otherwise, this is {@code null}\n         */\n        this.ruleToTokenType = null;\n        /**\n         * For lexer ATNs, this is an array of {@link LexerAction} objects which may\n         * be referenced by action transitions in the ATN\n         */\n        this.lexerActions = null;\n        this.modeToStartState = [];\n    }\n\n    /**\n     * Compute the set of valid tokens that can occur starting in state {@code s}.\n     * If {@code ctx} is null, the set of tokens will not include what can follow\n     * the rule surrounding {@code s}. In other words, the set will be\n     * restricted to tokens reachable staying within {@code s}'s rule\n     */\n    nextTokensInContext(s, ctx) {\n        const anal = new LL1Analyzer(this);\n        return anal.LOOK(s, null, ctx);\n    }\n\n    /**\n     * Compute the set of valid tokens that can occur starting in {@code s} and\n     * staying in same rule. {@link Token//EPSILON} is in set if we reach end of\n     * rule\n     */\n    nextTokensNoContext(s) {\n        if (s.nextTokenWithinRule !== null ) {\n            return s.nextTokenWithinRule;\n        }\n        s.nextTokenWithinRule = this.nextTokensInContext(s, null);\n        s.nextTokenWithinRule.readOnly = true;\n        return s.nextTokenWithinRule;\n    }\n\n    nextTokens(s, ctx) {\n        if ( ctx===undefined ) {\n            return this.nextTokensNoContext(s);\n        } else {\n            return this.nextTokensInContext(s, ctx);\n        }\n    }\n\n    addState(state) {\n        if ( state !== null ) {\n            state.atn = this;\n            state.stateNumber = this.states.length;\n        }\n        this.states.push(state);\n    }\n\n    removeState(state) {\n        this.states[state.stateNumber] = null; // just free mem, don't shift states in list\n    }\n\n    defineDecisionState(s) {\n        this.decisionToState.push(s);\n        s.decision = this.decisionToState.length-1;\n        return s.decision;\n    }\n\n    getDecisionState(decision) {\n        if (this.decisionToState.length===0) {\n            return null;\n        } else {\n            return this.decisionToState[decision];\n        }\n    }\n\n    /**\n     * Computes the set of input symbols which could follow ATN state number\n     * {@code stateNumber} in the specified full {@code context}. This method\n     * considers the complete parser context, but does not evaluate semantic\n     * predicates (i.e. all predicates encountered during the calculation are\n     * assumed true). If a path in the ATN exists from the starting state to the\n     * {@link RuleStopState} of the outermost context without matching any\n     * symbols, {@link Token//EOF} is added to the returned set.\n     *\n     * <p>If {@code context} is {@code null}, it is treated as\n     * {@link ParserRuleContext//EMPTY}.</p>\n     *\n     * @param stateNumber the ATN state number\n     * @param ctx the full parse context\n     *\n     * @return {IntervalSet} The set of potentially valid input symbols which could follow the\n     * specified state in the specified context.\n     *\n     * @throws IllegalArgumentException if the ATN does not contain a state with\n     * number {@code stateNumber}\n     */\n    getExpectedTokens(stateNumber, ctx ) {\n        if ( stateNumber < 0 || stateNumber >= this.states.length ) {\n            throw(\"Invalid state number.\");\n        }\n        const s = this.states[stateNumber];\n        let following = this.nextTokens(s);\n        if (!following.contains(Token.EPSILON)) {\n            return following;\n        }\n        const expected = new IntervalSet();\n        expected.addSet(following);\n        expected.removeOne(Token.EPSILON);\n        while (ctx !== null && ctx.invokingState >= 0 && following.contains(Token.EPSILON)) {\n            const invokingState = this.states[ctx.invokingState];\n            const rt = invokingState.transitions[0];\n            following = this.nextTokens(rt.followState);\n            expected.addSet(following);\n            expected.removeOne(Token.EPSILON);\n            ctx = ctx.parentCtx;\n        }\n        if (following.contains(Token.EPSILON)) {\n            expected.addOne(Token.EOF);\n        }\n        return expected;\n    }\n}\n\nATN.INVALID_ALT_NUMBER = 0;\n\n", "/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n/**\n * Represents the type of recognizer an ATN applies to\n */\nexport default {\n    LEXER: 0,\n    PARSER: 1\n};\n\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport ATNState from \"./ATNState.js\";\n\nexport default class BasicState extends ATNState {\n    constructor() {\n        super();\n        this.stateType = ATNState.BASIC;\n    }\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport ATNState from \"./ATNState.js\";\n\nexport default class DecisionState extends ATNState {\n    constructor() {\n        super();\n        this.decision = -1;\n        this.nonGreedy = false;\n        return this;\n    }\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport DecisionState from \"./DecisionState.js\";\n\n/**\n *  The start of a regular {@code (...)} block\n */\nexport default class BlockStartState extends DecisionState {\n    constructor() {\n        super();\n        this.endState = null;\n        return this;\n    }\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport ATNState from \"./ATNState.js\";\n\n/**\n * Terminal node of a simple {@code (a|b|c)} block\n */\nexport default class BlockEndState extends ATNState {\n    constructor() {\n        super();\n        this.stateType = ATNState.BLOCK_END;\n        this.startState = null;\n        return this;\n    }\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport ATNState from \"./ATNState.js\";\n\n/**\n * Mark the end of a * or + loop\n */\nexport default class LoopEndState extends ATNState {\n    constructor() {\n        super();\n        this.stateType = ATNState.LOOP_END;\n        this.loopBackState = null;\n        return this;\n    }\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport ATNState from \"./ATNState.js\";\n\nexport default class RuleStartState extends ATNState {\n    constructor() {\n        super();\n        this.stateType = ATNState.RULE_START;\n        this.stopState = null;\n        this.isPrecedenceRule = false;\n        return this;\n    }\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport DecisionState from \"./DecisionState.js\";\nimport ATNState from \"./ATNState.js\";\n\n/**\n * The Tokens rule start state linking to each lexer rule start state\n */\nexport default class TokensStartState extends DecisionState {\n    constructor() {\n        super();\n        this.stateType = ATNState.TOKEN_START;\n        return this;\n    }\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport DecisionState from \"./DecisionState.js\";\nimport ATNState from \"./ATNState.js\";\n\n/**\n * Decision state for {@code A+} and {@code (A|B)+}.  It has two transitions:\n * one to the loop back to start of the block and one to exit.\n */\nexport default class PlusLoopbackState extends DecisionState {\n    constructor() {\n        super();\n        this.stateType = ATNState.PLUS_LOOP_BACK;\n        return this;\n    }\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport ATNState from \"./ATNState.js\";\n\nexport default class StarLoopbackState extends ATNState {\n    constructor() {\n        super();\n        this.stateType = ATNState.STAR_LOOP_BACK;\n        return this;\n    }\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport DecisionState from \"./DecisionState.js\";\nimport ATNState from \"./ATNState.js\";\n\nexport default class StarLoopEntryState extends DecisionState {\n    constructor() {\n        super();\n        this.stateType = ATNState.STAR_LOOP_ENTRY;\n        this.loopBackState = null;\n        // Indicates whether this state can benefit from a precedence DFA during SLL decision making.\n        this.isPrecedenceDecision = null;\n        return this;\n    }\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport BlockStartState from \"./BlockStartState.js\";\nimport ATNState from \"./ATNState.js\";\n\n/**\n * Start of {@code (A|B|...)+} loop. Technically a decision state, but\n * we don't use for code generation; somebody might need it, so I'm defining\n * it for completeness. In reality, the {@link PlusLoopbackState} node is the\n * real decision-making note for {@code A+}\n */\nexport default class PlusBlockStartState extends BlockStartState {\n    constructor() {\n        super();\n        this.stateType = ATNState.PLUS_BLOCK_START;\n        this.loopBackState = null;\n        return this;\n    }\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport BlockStartState from \"./BlockStartState.js\";\nimport ATNState from \"./ATNState.js\";\n\n/**\n * The block that begins a closure loop\n */\nexport default class StarBlockStartState extends BlockStartState {\n    constructor() {\n        super();\n        this.stateType = ATNState.STAR_BLOCK_START;\n        return this;\n    }\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport ATNState from \"./ATNState.js\";\nimport BlockStartState from \"./BlockStartState.js\";\n\nexport default class BasicBlockStartState extends BlockStartState {\n    constructor() {\n        super();\n        this.stateType = ATNState.BLOCK_START;\n        return this;\n    }\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport IntervalSet from \"../misc/IntervalSet.js\";\nimport Transition from \"./Transition.js\";\n\nexport default class AtomTransition extends Transition {\n    constructor(target, label) {\n        super(target);\n        // The token type or character value; or, signifies special label.\n        this.label_ = label;\n        this.label = this.makeLabel();\n        this.serializationType = Transition.ATOM;\n    }\n\n    makeLabel() {\n        const s = new IntervalSet();\n        s.addOne(this.label_);\n        return s;\n    }\n\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n        return this.label_ === symbol;\n    }\n\n    toString() {\n        return this.label_;\n    }\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport IntervalSet from \"../misc/IntervalSet.js\";\nimport Transition from \"./Transition.js\";\n\nexport default class RangeTransition extends Transition {\n    constructor(target, start, stop) {\n        super(target);\n        this.serializationType = Transition.RANGE;\n        this.start = start;\n        this.stop = stop;\n        this.label = this.makeLabel();\n    }\n\n    makeLabel() {\n        const s = new IntervalSet();\n        s.addRange(this.start, this.stop);\n        return s;\n    }\n\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n        return symbol >= this.start && symbol <= this.stop;\n    }\n\n    toString() {\n        return \"'\" + String.fromCharCode(this.start) + \"'..'\" + String.fromCharCode(this.stop) + \"'\";\n    }\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport Transition from \"./Transition.js\";\n\nexport default class ActionTransition extends Transition {\n    constructor(target, ruleIndex, actionIndex, isCtxDependent) {\n        super(target);\n        this.serializationType = Transition.ACTION;\n        this.ruleIndex = ruleIndex;\n        this.actionIndex = actionIndex===undefined ? -1 : actionIndex;\n        this.isCtxDependent = isCtxDependent===undefined ? false : isCtxDependent; // e.g., $i ref in pred\n        this.isEpsilon = true;\n    }\n\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n        return false;\n    }\n\n    toString() {\n        return \"action_\" + this.ruleIndex + \":\" + this.actionIndex;\n    }\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport Transition from \"./Transition.js\";\n\nexport default class EpsilonTransition extends Transition {\n    constructor(target, outermostPrecedenceReturn) {\n        super(target);\n        this.serializationType = Transition.EPSILON;\n        this.isEpsilon = true;\n        this.outermostPrecedenceReturn = outermostPrecedenceReturn;\n    }\n\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n        return false;\n    }\n\n    toString() {\n        return \"epsilon\";\n    }\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport SemanticContext from \"./SemanticContext.js\";\n\nexport default class Predicate extends SemanticContext {\n\n    constructor(ruleIndex, predIndex, isCtxDependent) {\n        super();\n        this.ruleIndex = ruleIndex === undefined ? -1 : ruleIndex;\n        this.predIndex = predIndex === undefined ? -1 : predIndex;\n        this.isCtxDependent = isCtxDependent === undefined ? false : isCtxDependent; // e.g., $i ref in pred\n    }\n\n    evaluate(parser, outerContext) {\n        const localctx = this.isCtxDependent ? outerContext : null;\n        return parser.sempred(localctx, this.ruleIndex, this.predIndex);\n    }\n\n    updateHashCode(hash) {\n        hash.update(this.ruleIndex, this.predIndex, this.isCtxDependent);\n    }\n\n    equals(other) {\n        if (this === other) {\n            return true;\n        } else if (!(other instanceof Predicate)) {\n            return false;\n        } else {\n            return this.ruleIndex === other.ruleIndex &&\n                this.predIndex === other.predIndex &&\n                this.isCtxDependent === other.isCtxDependent;\n        }\n    }\n\n    toString() {\n        return \"{\" + this.ruleIndex + \":\" + this.predIndex + \"}?\";\n    }\n}\n\n/**\n * The default {@link SemanticContext}, which is semantically equivalent to\n * a predicate of the form {@code {true}?}\n */\nSemanticContext.NONE = new Predicate();\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport Predicate from \"../atn/Predicate.js\";\nimport Transition from \"./Transition.js\";\nimport AbstractPredicateTransition from \"../atn/AbstractPredicateTransition.js\";\n\nexport default class PredicateTransition extends AbstractPredicateTransition {\n    constructor(target, ruleIndex, predIndex, isCtxDependent) {\n        super(target);\n        this.serializationType = Transition.PREDICATE;\n        this.ruleIndex = ruleIndex;\n        this.predIndex = predIndex;\n        this.isCtxDependent = isCtxDependent; // e.g., $i ref in pred\n        this.isEpsilon = true;\n    }\n\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n        return false;\n    }\n\n    getPredicate() {\n        return new Predicate(this.ruleIndex, this.predIndex, this.isCtxDependent);\n    }\n\n    toString() {\n        return \"pred_\" + this.ruleIndex + \":\" + this.predIndex;\n    }\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport SemanticContext from \"./SemanticContext.js\";\n\nexport default class PrecedencePredicate extends SemanticContext {\n\n    constructor(precedence) {\n        super();\n        this.precedence = precedence === undefined ? 0 : precedence;\n    }\n\n    evaluate(parser, outerContext) {\n        return parser.precpred(outerContext, this.precedence);\n    }\n\n    evalPrecedence(parser, outerContext) {\n        if (parser.precpred(outerContext, this.precedence)) {\n            return SemanticContext.NONE;\n        } else {\n            return null;\n        }\n    }\n\n    compareTo(other) {\n        return this.precedence - other.precedence;\n    }\n\n    updateHashCode(hash) {\n        hash.update(this.precedence);\n    }\n\n    equals(other) {\n        if (this === other) {\n            return true;\n        } else if (!(other instanceof PrecedencePredicate)) {\n            return false;\n        } else {\n            return this.precedence === other.precedence;\n        }\n    }\n\n    toString() {\n        return \"{\" + this.precedence + \">=prec}?\";\n    }\n\n}\n\n// HORRIBLE workaround circular import, avoiding dynamic import\nSemanticContext.PrecedencePredicate = PrecedencePredicate;\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport PrecedencePredicate from \"../atn/PrecedencePredicate.js\";\nimport Transition from \"./Transition.js\";\nimport AbstractPredicateTransition from \"../atn/AbstractPredicateTransition.js\";\n\nexport default class PrecedencePredicateTransition extends AbstractPredicateTransition {\n    constructor(target, precedence) {\n        super(target);\n        this.serializationType = Transition.PRECEDENCE;\n        this.precedence = precedence;\n        this.isEpsilon = true;\n    }\n\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n        return false;\n    }\n\n    getPredicate() {\n        return new PrecedencePredicate(this.precedence);\n    }\n\n    toString() {\n        return this.precedence + \" >= _p\";\n    }\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nexport default class ATNDeserializationOptions {\n\tconstructor(copyFrom) {\n\t\tif(copyFrom===undefined) {\n\t\t\tcopyFrom = null;\n\t\t}\n\t\tthis.readOnly = false;\n\t\tthis.verifyATN = copyFrom===null ? true : copyFrom.verifyATN;\n\t\tthis.generateRuleBypassTransitions = copyFrom===null ? false : copyFrom.generateRuleBypassTransitions;\n\t}\n}\n\nATNDeserializationOptions.defaultOptions = new ATNDeserializationOptions();\nATNDeserializationOptions.defaultOptions.readOnly = true;\n\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nexport default {\n    // The type of a {@link LexerChannelAction} action.\n    CHANNEL: 0,\n    // The type of a {@link LexerCustomAction} action\n    CUSTOM: 1,\n    // The type of a {@link LexerModeAction} action.\n    MODE: 2,\n    //The type of a {@link LexerMoreAction} action.\n    MORE: 3,\n    //The type of a {@link LexerPopModeAction} action.\n    POP_MODE: 4,\n    //The type of a {@link LexerPushModeAction} action.\n    PUSH_MODE: 5,\n    //The type of a {@link LexerSkipAction} action.\n    SKIP: 6,\n    //The type of a {@link LexerTypeAction} action.\n    TYPE: 7\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport HashCode from \"../misc/HashCode.js\";\n\n/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\nexport default class LexerAction {\n    constructor(action) {\n        this.actionType = action;\n        this.isPositionDependent = false;\n    }\n\n    hashCode() {\n        const hash = new HashCode();\n        this.updateHashCode(hash);\n        return hash.finish()\n    }\n\n    updateHashCode(hash) {\n        hash.update(this.actionType);\n    }\n\n    equals(other) {\n        return this === other;\n    }\n}\n\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport {default as LexerActionType } from \"../atn/LexerActionType.js\";\nimport LexerAction from \"./LexerAction.js\";\n\n/**\n * Implements the {@code skip} lexer action by calling {@link Lexer//skip}.\n *\n * <p>The {@code skip} command does not have any parameters, so this action is\n * implemented as a singleton instance exposed by {@link //INSTANCE}.</p>\n */\nexport default class LexerSkipAction extends LexerAction {\n    constructor() {\n        super(LexerActionType.SKIP);\n    }\n\n    execute(lexer) {\n        lexer.skip();\n    }\n\n    toString() {\n        return \"skip\";\n    }\n}\n\n// Provides a singleton instance of this parameterless lexer action.\nLexerSkipAction.INSTANCE = new LexerSkipAction();\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport {default as LexerActionType } from \"../atn/LexerActionType.js\";\nimport LexerAction from \"./LexerAction.js\";\n\n/**\n * Implements the {@code channel} lexer action by calling\n * {@link Lexer//setChannel} with the assigned channel.\n * Constructs a new {@code channel} action with the specified channel value.\n * @param channel The channel value to pass to {@link Lexer//setChannel}\n */\nexport default class LexerChannelAction extends LexerAction {\n    constructor(channel) {\n        super(LexerActionType.CHANNEL);\n        this.channel = channel;\n    }\n\n    /**\n     * <p>This action is implemented by calling {@link Lexer//setChannel} with the\n     * value provided by {@link //getChannel}.</p>\n     */\n    execute(lexer) {\n        lexer._channel = this.channel;\n    }\n\n    updateHashCode(hash) {\n        hash.update(this.actionType, this.channel);\n    }\n\n    equals(other) {\n        if (this === other) {\n            return true;\n        } else if (! (other instanceof LexerChannelAction)) {\n            return false;\n        } else {\n            return this.channel === other.channel;\n        }\n    }\n\n    toString() {\n        return \"channel(\" + this.channel + \")\";\n    }\n}\n\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport {default as LexerActionType } from \"../atn/LexerActionType.js\";\nimport LexerAction from \"./LexerAction.js\";\n\n/**\n * Executes a custom lexer action by calling {@link Recognizer//action} with the\n * rule and action indexes assigned to the custom action. The implementation of\n * a custom action is added to the generated code for the lexer in an override\n * of {@link Recognizer//action} when the grammar is compiled.\n *\n * <p>This class may represent embedded actions created with the <code>{...}</code>\n * syntax in ANTLR 4, as well as actions created for lexer commands where the\n * command argument could not be evaluated when the grammar was compiled.</p>\n */\nexport default class LexerCustomAction extends LexerAction {\n    /**\n     * Constructs a custom lexer action with the specified rule and action\n     * indexes.\n     *\n     * @param ruleIndex The rule index to use for calls to\n     * {@link Recognizer//action}.\n     * @param actionIndex The action index to use for calls to\n     * {@link Recognizer//action}.\n     */\n    constructor(ruleIndex, actionIndex) {\n        super(LexerActionType.CUSTOM);\n        this.ruleIndex = ruleIndex;\n        this.actionIndex = actionIndex;\n        this.isPositionDependent = true;\n    }\n\n    /**\n     * <p>Custom actions are implemented by calling {@link Lexer//action} with the\n     * appropriate rule and action indexes.</p>\n     */\n    execute(lexer) {\n        lexer.action(null, this.ruleIndex, this.actionIndex);\n    }\n\n    updateHashCode(hash) {\n        hash.update(this.actionType, this.ruleIndex, this.actionIndex);\n    }\n\n    equals(other) {\n        if (this === other) {\n            return true;\n        } else if (! (other instanceof LexerCustomAction)) {\n            return false;\n        } else {\n            return this.ruleIndex === other.ruleIndex && this.actionIndex === other.actionIndex;\n        }\n    }\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport {default as LexerActionType } from \"../atn/LexerActionType.js\";\nimport LexerAction from \"./LexerAction.js\";\n\n/**\n * Implements the {@code more} lexer action by calling {@link Lexer//more}.\n *\n * <p>The {@code more} command does not have any parameters, so this action is\n * implemented as a singleton instance exposed by {@link //INSTANCE}.</p>\n */\nexport default class LexerMoreAction extends LexerAction {\n    constructor() {\n        super(LexerActionType.MORE);\n    }\n\n    /**\n     * <p>This action is implemented by calling {@link Lexer//popMode}.</p>\n     */\n    execute(lexer) {\n        lexer.more();\n    }\n\n    toString() {\n        return \"more\";\n    }\n}\n\nLexerMoreAction.INSTANCE = new LexerMoreAction();\n\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport {default as LexerActionType } from \"../atn/LexerActionType.js\";\nimport LexerAction from \"./LexerAction.js\";\n\n/**\n * Implements the {@code type} lexer action by calling {@link Lexer//setType}\n * with the assigned type\n */\n\nexport default class LexerTypeAction extends LexerAction {\n    constructor(type) {\n        super(LexerActionType.TYPE);\n        this.type = type;\n    }\n\n    execute(lexer) {\n        lexer.type = this.type;\n    }\n\n    updateHashCode(hash) {\n        hash.update(this.actionType, this.type);\n    }\n\n    equals(other) {\n        if(this === other) {\n            return true;\n        } else if (! (other instanceof LexerTypeAction)) {\n            return false;\n        } else {\n            return this.type === other.type;\n        }\n    }\n\n    toString() {\n        return \"type(\" + this.type + \")\";\n    }\n}\n\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport {default as LexerActionType } from \"../atn/LexerActionType.js\";\nimport LexerAction from \"./LexerAction.js\";\n\n/**\n * Implements the {@code pushMode} lexer action by calling\n * {@link Lexer//pushMode} with the assigned mode\n */\nexport default class LexerPushModeAction extends LexerAction {\n    constructor(mode) {\n        super(LexerActionType.PUSH_MODE);\n        this.mode = mode;\n    }\n\n    /**\n     * <p>This action is implemented by calling {@link Lexer//pushMode} with the\n     * value provided by {@link //getMode}.</p>\n     */\n    execute(lexer) {\n        lexer.pushMode(this.mode);\n    }\n\n    updateHashCode(hash) {\n        hash.update(this.actionType, this.mode);\n    }\n\n    equals(other) {\n        if (this === other) {\n            return true;\n        } else if (! (other instanceof LexerPushModeAction)) {\n            return false;\n        } else {\n            return this.mode === other.mode;\n        }\n    }\n\n    toString() {\n        return \"pushMode(\" + this.mode + \")\";\n    }\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport {default as LexerActionType } from \"../atn/LexerActionType.js\";\nimport LexerAction from \"./LexerAction.js\";\n\n/**\n * Implements the {@code popMode} lexer action by calling {@link Lexer//popMode}.\n *\n * <p>The {@code popMode} command does not have any parameters, so this action is\n * implemented as a singleton instance exposed by {@link //INSTANCE}.</p>\n */\nexport default class LexerPopModeAction extends LexerAction {\n    constructor() {\n        super(LexerActionType.POP_MODE);\n    }\n\n    /**\n     * <p>This action is implemented by calling {@link Lexer//popMode}.</p>\n     */\n    execute(lexer) {\n        lexer.popMode();\n    }\n\n    toString() {\n        return \"popMode\";\n    }\n}\n\nLexerPopModeAction.INSTANCE = new LexerPopModeAction();\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport {default as LexerActionType } from \"../atn/LexerActionType.js\";\nimport LexerAction from \"./LexerAction.js\";\n\n/**\n * Implements the {@code mode} lexer action by calling {@link Lexer//mode} with\n * the assigned mode\n */\nexport default class LexerModeAction extends LexerAction {\n    constructor(mode) {\n        super(LexerActionType.MODE);\n        this.mode = mode;\n    }\n\n    /**\n     * <p>This action is implemented by calling {@link Lexer//mode} with the\n     * value provided by {@link //getMode}.</p>\n     */\n    execute(lexer) {\n        lexer.mode(this.mode);\n    }\n\n    updateHashCode(hash) {\n        hash.update(this.actionType, this.mode);\n    }\n\n    equals(other) {\n        if (this === other) {\n            return true;\n        } else if (! (other instanceof LexerModeAction)) {\n            return false;\n        } else {\n            return this.mode === other.mode;\n        }\n    }\n\n    toString() {\n        return \"mode(\" + this.mode + \")\";\n    }\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nimport Token from '../Token.js';\nimport ATN from './ATN.js';\nimport ATNType from './ATNType.js';\n\nimport ATNState from '../state/ATNState.js';\nimport BasicState from '../state/BasicState.js';\nimport DecisionState from '../state/DecisionState.js';\nimport BlockStartState from '../state/BlockStartState.js';\nimport BlockEndState from '../state/BlockEndState.js';\nimport LoopEndState from '../state/LoopEndState.js';\nimport RuleStartState from '../state/RuleStartState.js';\nimport RuleStopState from '../state/RuleStopState.js';\nimport TokensStartState from '../state/TokensStartState.js';\nimport PlusLoopbackState from '../state/PlusLoopbackState.js';\nimport StarLoopbackState from '../state/StarLoopbackState.js';\nimport StarLoopEntryState from '../state/StarLoopEntryState.js';\nimport PlusBlockStartState from '../state/PlusBlockStartState.js';\nimport StarBlockStartState from '../state/StarBlockStartState.js';\nimport BasicBlockStartState from '../state/BasicBlockStartState.js';\n\nimport Transition from '../transition/Transition.js';\nimport AtomTransition from '../transition/AtomTransition.js';\nimport SetTransition from '../transition/SetTransition.js';\nimport NotSetTransition from '../transition/NotSetTransition.js';\nimport RuleTransition from '../transition/RuleTransition.js';\nimport RangeTransition from '../transition/RangeTransition.js';\nimport ActionTransition from '../transition/ActionTransition.js';\nimport EpsilonTransition from '../transition/EpsilonTransition.js';\nimport WildcardTransition from '../transition/WildcardTransition.js';\nimport PredicateTransition from '../transition/PredicateTransition.js';\nimport PrecedencePredicateTransition from '../transition/PrecedencePredicateTransition.js';\n\n\nimport IntervalSet from '../misc/IntervalSet.js';\nimport ATNDeserializationOptions from './ATNDeserializationOptions.js';\n\nimport LexerActionType from './LexerActionType.js';\nimport LexerSkipAction from '../action/LexerSkipAction.js';\nimport LexerChannelAction from '../action/LexerChannelAction.js';\nimport LexerCustomAction from '../action/LexerCustomAction.js';\nimport LexerMoreAction from '../action/LexerMoreAction.js';\nimport LexerTypeAction from '../action/LexerTypeAction.js';\nimport LexerPushModeAction from '../action/LexerPushModeAction.js';\nimport LexerPopModeAction from '../action/LexerPopModeAction.js';\nimport LexerModeAction from '../action/LexerModeAction.js';\n\nconst SERIALIZED_VERSION = 4;\n\nfunction initArray( length, value) {\n\tconst tmp = [];\n\ttmp[length-1] = value;\n\treturn tmp.map(function(i) {return value;});\n}\n\nexport default class ATNDeserializer {\n    constructor(options) {\n\n        if ( options=== undefined || options === null ) {\n            options = ATNDeserializationOptions.defaultOptions;\n        }\n        this.deserializationOptions = options;\n        this.stateFactories = null;\n        this.actionFactories = null;\n    }\n\n    deserialize(data) {\n        const legacy = this.reset(data);\n        this.checkVersion(legacy);\n        if(legacy)\n            this.skipUUID();\n        const atn = this.readATN();\n        this.readStates(atn, legacy);\n        this.readRules(atn, legacy);\n        this.readModes(atn);\n        const sets = [];\n        this.readSets(atn, sets, this.readInt.bind(this));\n        if(legacy)\n            this.readSets(atn, sets, this.readInt32.bind(this));\n        this.readEdges(atn, sets);\n        this.readDecisions(atn);\n        this.readLexerActions(atn, legacy);\n        this.markPrecedenceDecisions(atn);\n        this.verifyATN(atn);\n        if (this.deserializationOptions.generateRuleBypassTransitions && atn.grammarType === ATNType.PARSER ) {\n            this.generateRuleBypassTransitions(atn);\n            // re-verify after modification\n            this.verifyATN(atn);\n        }\n        return atn;\n    }\n\n    reset(data) {\n        const version = data.charCodeAt ? data.charCodeAt(0) : data[0];\n        if(version === SERIALIZED_VERSION - 1) {\n            const adjust = function (c) {\n                const v = c.charCodeAt(0);\n                return v > 1 ? v - 2 : v + 65534;\n            };\n            const temp = data.split(\"\").map(adjust);\n            // don't adjust the first value since that's the version number\n            temp[0] = data.charCodeAt(0);\n            this.data = temp;\n            this.pos = 0;\n            return true;\n        } else {\n            this.data = data\n            this.pos = 0;\n            return false;\n        }\n    }\n\n    skipUUID() {\n        let count = 0;\n        while(count++ < 8)\n            this.readInt();\n    }\n\n    checkVersion(legacy) {\n        const version = this.readInt();\n        if ( !legacy && version !== SERIALIZED_VERSION ) {\n            throw (\"Could not deserialize ATN with version \" + version + \" (expected \" + SERIALIZED_VERSION + \").\");\n        }\n    }\n\n    readATN() {\n        const grammarType = this.readInt();\n        const maxTokenType = this.readInt();\n        return new ATN(grammarType, maxTokenType);\n    }\n\n    readStates(atn, legacy) {\n        let j, pair, stateNumber;\n        const  loopBackStateNumbers = [];\n        const  endStateNumbers = [];\n        const  nstates = this.readInt();\n        for(let i=0; i<nstates; i++) {\n            const  stype = this.readInt();\n            // ignore bad type of states\n            if (stype===ATNState.INVALID_TYPE) {\n                atn.addState(null);\n                continue;\n            }\n            let ruleIndex = this.readInt();\n            if (legacy && ruleIndex === 0xFFFF) {\n                ruleIndex = -1;\n            }\n            const  s = this.stateFactory(stype, ruleIndex);\n            if (stype === ATNState.LOOP_END) { // special case\n                const  loopBackStateNumber = this.readInt();\n                loopBackStateNumbers.push([s, loopBackStateNumber]);\n            } else if(s instanceof BlockStartState) {\n                const  endStateNumber = this.readInt();\n                endStateNumbers.push([s, endStateNumber]);\n            }\n            atn.addState(s);\n        }\n        // delay the assignment of loop back and end states until we know all the\n        // state instances have been initialized\n        for (j=0; j<loopBackStateNumbers.length; j++) {\n            pair = loopBackStateNumbers[j];\n            pair[0].loopBackState = atn.states[pair[1]];\n        }\n\n        for (j=0; j<endStateNumbers.length; j++) {\n            pair = endStateNumbers[j];\n            pair[0].endState = atn.states[pair[1]];\n        }\n\n        let numNonGreedyStates = this.readInt();\n        for (j=0; j<numNonGreedyStates; j++) {\n            stateNumber = this.readInt();\n            atn.states[stateNumber].nonGreedy = true;\n        }\n\n        let numPrecedenceStates = this.readInt();\n        for (j=0; j<numPrecedenceStates; j++) {\n            stateNumber = this.readInt();\n            atn.states[stateNumber].isPrecedenceRule = true;\n        }\n    }\n\n    readRules(atn, legacy) {\n        let i;\n        const nrules = this.readInt();\n        if (atn.grammarType === ATNType.LEXER ) {\n            atn.ruleToTokenType = initArray(nrules, 0);\n        }\n        atn.ruleToStartState = initArray(nrules, 0);\n        for (i=0; i<nrules; i++) {\n            const s = this.readInt();\n            atn.ruleToStartState[i] = atn.states[s];\n            if ( atn.grammarType === ATNType.LEXER ) {\n                let tokenType = this.readInt();\n                if (legacy && tokenType === 0xFFFF) {\n                    tokenType = Token.EOF;\n                }\n                atn.ruleToTokenType[i] = tokenType;\n            }\n        }\n        atn.ruleToStopState = initArray(nrules, 0);\n        for (i=0; i<atn.states.length; i++) {\n            const state = atn.states[i];\n            if (!(state instanceof RuleStopState)) {\n                continue;\n            }\n            atn.ruleToStopState[state.ruleIndex] = state;\n            atn.ruleToStartState[state.ruleIndex].stopState = state;\n        }\n    }\n\n    readModes(atn) {\n        const nmodes = this.readInt();\n        for (let i=0; i<nmodes; i++) {\n            let s = this.readInt();\n            atn.modeToStartState.push(atn.states[s]);\n        }\n    }\n\n    readSets(atn, sets, reader) {\n        const m = this.readInt();\n        for (let i=0; i<m; i++) {\n            const iset = new IntervalSet();\n            sets.push(iset);\n            const n = this.readInt();\n            const containsEof = this.readInt();\n            if (containsEof!==0) {\n                iset.addOne(-1);\n            }\n            for (let j=0; j<n; j++) {\n                const i1 = reader();\n                const i2 = reader();\n                iset.addRange(i1, i2);\n            }\n        }\n    }\n\n    readEdges(atn, sets) {\n        let i, j, state, trans, target;\n        const nedges = this.readInt();\n        for (i=0; i<nedges; i++) {\n            const src = this.readInt();\n            const trg = this.readInt();\n            const ttype = this.readInt();\n            const arg1 = this.readInt();\n            const arg2 = this.readInt();\n            const arg3 = this.readInt();\n            trans = this.edgeFactory(atn, ttype, src, trg, arg1, arg2, arg3, sets);\n            const srcState = atn.states[src];\n            srcState.addTransition(trans);\n        }\n        // edges for rule stop states can be derived, so they aren't serialized\n        for (i=0; i<atn.states.length; i++) {\n            state = atn.states[i];\n            for (j=0; j<state.transitions.length; j++) {\n                const t = state.transitions[j];\n                if (!(t instanceof RuleTransition)) {\n                    continue;\n                }\n                let outermostPrecedenceReturn = -1;\n                if (atn.ruleToStartState[t.target.ruleIndex].isPrecedenceRule) {\n                    if (t.precedence === 0) {\n                        outermostPrecedenceReturn = t.target.ruleIndex;\n                    }\n                }\n\n                trans = new EpsilonTransition(t.followState, outermostPrecedenceReturn);\n                atn.ruleToStopState[t.target.ruleIndex].addTransition(trans);\n            }\n        }\n\n        for (i=0; i<atn.states.length; i++) {\n            state = atn.states[i];\n            if (state instanceof BlockStartState) {\n                // we need to know the end state to set its start state\n                if (state.endState === null) {\n                    throw (\"IllegalState\");\n                }\n                // block end states can only be associated to a single block start\n                // state\n                if ( state.endState.startState !== null) {\n                    throw (\"IllegalState\");\n                }\n                state.endState.startState = state;\n            }\n            if (state instanceof PlusLoopbackState) {\n                for (j=0; j<state.transitions.length; j++) {\n                    target = state.transitions[j].target;\n                    if (target instanceof PlusBlockStartState) {\n                        target.loopBackState = state;\n                    }\n                }\n            } else if (state instanceof StarLoopbackState) {\n                for (j=0; j<state.transitions.length; j++) {\n                    target = state.transitions[j].target;\n                    if (target instanceof StarLoopEntryState) {\n                        target.loopBackState = state;\n                    }\n                }\n            }\n        }\n    }\n\n    readDecisions(atn) {\n        const ndecisions = this.readInt();\n        for (let i=0; i<ndecisions; i++) {\n            const s = this.readInt();\n            const decState = atn.states[s];\n            atn.decisionToState.push(decState);\n            decState.decision = i;\n        }\n    }\n\n    readLexerActions(atn, legacy) {\n        if (atn.grammarType === ATNType.LEXER) {\n            const count = this.readInt();\n            atn.lexerActions = initArray(count, null);\n            for (let i=0; i<count; i++) {\n                const actionType = this.readInt();\n                let data1 = this.readInt();\n                if (legacy && data1 === 0xFFFF) {\n                    data1 = -1;\n                }\n                let data2 = this.readInt();\n                if (legacy && data2 === 0xFFFF) {\n                    data2 = -1;\n                }\n                atn.lexerActions[i] = this.lexerActionFactory(actionType, data1, data2);\n            }\n        }\n    }\n\n    generateRuleBypassTransitions(atn) {\n        let i;\n        const count = atn.ruleToStartState.length;\n        for(i=0; i<count; i++) {\n            atn.ruleToTokenType[i] = atn.maxTokenType + i + 1;\n        }\n        for(i=0; i<count; i++) {\n            this.generateRuleBypassTransition(atn, i);\n        }\n    }\n\n    generateRuleBypassTransition(atn, idx) {\n        let i, state;\n        const bypassStart = new BasicBlockStartState();\n        bypassStart.ruleIndex = idx;\n        atn.addState(bypassStart);\n\n        const bypassStop = new BlockEndState();\n        bypassStop.ruleIndex = idx;\n        atn.addState(bypassStop);\n\n        bypassStart.endState = bypassStop;\n        atn.defineDecisionState(bypassStart);\n\n        bypassStop.startState = bypassStart;\n\n        let excludeTransition = null;\n        let endState = null;\n\n        if (atn.ruleToStartState[idx].isPrecedenceRule) {\n            // wrap from the beginning of the rule to the StarLoopEntryState\n            endState = null;\n            for(i=0; i<atn.states.length; i++) {\n                state = atn.states[i];\n                if (this.stateIsEndStateFor(state, idx)) {\n                    endState = state;\n                    excludeTransition = state.loopBackState.transitions[0];\n                    break;\n                }\n            }\n            if (excludeTransition === null) {\n                throw (\"Couldn't identify final state of the precedence rule prefix section.\");\n            }\n        } else {\n            endState = atn.ruleToStopState[idx];\n        }\n\n        // all non-excluded transitions that currently target end state need to\n        // target blockEnd instead\n        for(i=0; i<atn.states.length; i++) {\n            state = atn.states[i];\n            for(let j=0; j<state.transitions.length; j++) {\n                const transition = state.transitions[j];\n                if (transition === excludeTransition) {\n                    continue;\n                }\n                if (transition.target === endState) {\n                    transition.target = bypassStop;\n                }\n            }\n        }\n\n        // all transitions leaving the rule start state need to leave blockStart\n        // instead\n        const ruleToStartState = atn.ruleToStartState[idx];\n        const count = ruleToStartState.transitions.length;\n        while ( count > 0) {\n            bypassStart.addTransition(ruleToStartState.transitions[count-1]);\n            ruleToStartState.transitions = ruleToStartState.transitions.slice(-1);\n        }\n        // link the new states\n        atn.ruleToStartState[idx].addTransition(new EpsilonTransition(bypassStart));\n        bypassStop.addTransition(new EpsilonTransition(endState));\n\n        const matchState = new BasicState();\n        atn.addState(matchState);\n        matchState.addTransition(new AtomTransition(bypassStop, atn.ruleToTokenType[idx]));\n        bypassStart.addTransition(new EpsilonTransition(matchState));\n    }\n\n    stateIsEndStateFor(state, idx) {\n        if ( state.ruleIndex !== idx) {\n            return null;\n        }\n        if (!( state instanceof StarLoopEntryState)) {\n            return null;\n        }\n        const maybeLoopEndState = state.transitions[state.transitions.length - 1].target;\n        if (!( maybeLoopEndState instanceof LoopEndState)) {\n            return null;\n        }\n        if (maybeLoopEndState.epsilonOnlyTransitions &&\n            (maybeLoopEndState.transitions[0].target instanceof RuleStopState)) {\n            return state;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Analyze the {@link StarLoopEntryState} states in the specified ATN to set\n     * the {@link StarLoopEntryState//isPrecedenceDecision} field to the\n     * correct value.\n     * @param atn The ATN.\n     */\n    markPrecedenceDecisions(atn) {\n        for(let i=0; i<atn.states.length; i++) {\n            const state = atn.states[i];\n            if (!( state instanceof StarLoopEntryState)) {\n                continue;\n            }\n            // We analyze the ATN to determine if this ATN decision state is the\n            // decision for the closure block that determines whether a\n            // precedence rule should continue or complete.\n            if ( atn.ruleToStartState[state.ruleIndex].isPrecedenceRule) {\n                const maybeLoopEndState = state.transitions[state.transitions.length - 1].target;\n                if (maybeLoopEndState instanceof LoopEndState) {\n                    if ( maybeLoopEndState.epsilonOnlyTransitions &&\n                            (maybeLoopEndState.transitions[0].target instanceof RuleStopState)) {\n                        state.isPrecedenceDecision = true;\n                    }\n                }\n            }\n        }\n    }\n\n    verifyATN(atn) {\n        if (!this.deserializationOptions.verifyATN) {\n            return;\n        }\n        // verify assumptions\n        for(let i=0; i<atn.states.length; i++) {\n            const state = atn.states[i];\n            if (state === null) {\n                continue;\n            }\n            this.checkCondition(state.epsilonOnlyTransitions || state.transitions.length <= 1);\n            if (state instanceof PlusBlockStartState) {\n                this.checkCondition(state.loopBackState !== null);\n            } else  if (state instanceof StarLoopEntryState) {\n                this.checkCondition(state.loopBackState !== null);\n                this.checkCondition(state.transitions.length === 2);\n                if (state.transitions[0].target instanceof StarBlockStartState) {\n                    this.checkCondition(state.transitions[1].target instanceof LoopEndState);\n                    this.checkCondition(!state.nonGreedy);\n                } else if (state.transitions[0].target instanceof LoopEndState) {\n                    this.checkCondition(state.transitions[1].target instanceof StarBlockStartState);\n                    this.checkCondition(state.nonGreedy);\n                } else {\n                    throw(\"IllegalState\");\n                }\n            } else if (state instanceof StarLoopbackState) {\n                this.checkCondition(state.transitions.length === 1);\n                this.checkCondition(state.transitions[0].target instanceof StarLoopEntryState);\n            } else if (state instanceof LoopEndState) {\n                this.checkCondition(state.loopBackState !== null);\n            } else if (state instanceof RuleStartState) {\n                this.checkCondition(state.stopState !== null);\n            } else if (state instanceof BlockStartState) {\n                this.checkCondition(state.endState !== null);\n            } else if (state instanceof BlockEndState) {\n                this.checkCondition(state.startState !== null);\n            } else if (state instanceof DecisionState) {\n                this.checkCondition(state.transitions.length <= 1 || state.decision >= 0);\n            } else {\n                this.checkCondition(state.transitions.length <= 1 || (state instanceof RuleStopState));\n            }\n        }\n    }\n\n    checkCondition(condition, message) {\n        if (!condition) {\n            if (message === undefined || message===null) {\n                message = \"IllegalState\";\n            }\n            throw (message);\n        }\n    }\n\n    readInt() {\n        return this.data[this.pos++];\n    }\n\n    readInt32() {\n        const low = this.readInt();\n        const high = this.readInt();\n        return low | (high << 16);\n    }\n\n    edgeFactory(atn, type, src, trg, arg1, arg2, arg3, sets) {\n        const target = atn.states[trg];\n        switch(type) {\n        case Transition.EPSILON:\n            return new EpsilonTransition(target);\n        case Transition.RANGE:\n            return arg3 !== 0 ? new RangeTransition(target, Token.EOF, arg2) : new RangeTransition(target, arg1, arg2);\n        case Transition.RULE:\n            return new RuleTransition(atn.states[arg1], arg2, arg3, target);\n        case Transition.PREDICATE:\n            return new PredicateTransition(target, arg1, arg2, arg3 !== 0);\n        case Transition.PRECEDENCE:\n            return new PrecedencePredicateTransition(target, arg1);\n        case Transition.ATOM:\n            return arg3 !== 0 ? new AtomTransition(target, Token.EOF) : new AtomTransition(target, arg1);\n        case Transition.ACTION:\n            return new ActionTransition(target, arg1, arg2, arg3 !== 0);\n        case Transition.SET:\n            return new SetTransition(target, sets[arg1]);\n        case Transition.NOT_SET:\n            return new NotSetTransition(target, sets[arg1]);\n        case Transition.WILDCARD:\n            return new WildcardTransition(target);\n        default:\n            throw \"The specified transition type: \" + type + \" is not valid.\";\n        }\n    }\n\n    stateFactory(type, ruleIndex) {\n        if (this.stateFactories === null) {\n            const sf = [];\n            sf[ATNState.INVALID_TYPE] = null;\n            sf[ATNState.BASIC] = () => new BasicState();\n            sf[ATNState.RULE_START] = () => new RuleStartState();\n            sf[ATNState.BLOCK_START] = () => new BasicBlockStartState();\n            sf[ATNState.PLUS_BLOCK_START] = () => new PlusBlockStartState();\n            sf[ATNState.STAR_BLOCK_START] = () => new StarBlockStartState();\n            sf[ATNState.TOKEN_START] = () => new TokensStartState();\n            sf[ATNState.RULE_STOP] = () => new RuleStopState();\n            sf[ATNState.BLOCK_END] = () => new BlockEndState();\n            sf[ATNState.STAR_LOOP_BACK] = () => new StarLoopbackState();\n            sf[ATNState.STAR_LOOP_ENTRY] = () => new StarLoopEntryState();\n            sf[ATNState.PLUS_LOOP_BACK] = () => new PlusLoopbackState();\n            sf[ATNState.LOOP_END] = () => new LoopEndState();\n            this.stateFactories = sf;\n        }\n        if (type>this.stateFactories.length || this.stateFactories[type] === null) {\n            throw(\"The specified state type \" + type + \" is not valid.\");\n        } else {\n            const s = this.stateFactories[type]();\n            if (s!==null) {\n                s.ruleIndex = ruleIndex;\n                return s;\n            }\n        }\n    }\n\n    lexerActionFactory(type, data1, data2) {\n        if (this.actionFactories === null) {\n            const af = [];\n            af[LexerActionType.CHANNEL] = (data1, data2) => new LexerChannelAction(data1);\n            af[LexerActionType.CUSTOM] = (data1, data2) => new LexerCustomAction(data1, data2);\n            af[LexerActionType.MODE] = (data1, data2) => new LexerModeAction(data1);\n            af[LexerActionType.MORE] = (data1, data2) => LexerMoreAction.INSTANCE;\n            af[LexerActionType.POP_MODE] = (data1, data2) => LexerPopModeAction.INSTANCE;\n            af[LexerActionType.PUSH_MODE] = (data1, data2) => new LexerPushModeAction(data1);\n            af[LexerActionType.SKIP] = (data1, data2) => LexerSkipAction.INSTANCE;\n            af[LexerActionType.TYPE] = (data1, data2) => new LexerTypeAction(data1);\n            this.actionFactories = af;\n        }\n        if (type>this.actionFactories.length || this.actionFactories[type] === null) {\n            throw(\"The specified lexer action type \" + type + \" is not valid.\");\n        } else {\n            return this.actionFactories[type](data1, data2);\n        }\n    }\n}\n\n", "/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n/**\n * Provides an empty default implementation of {@link ANTLRErrorListener}. The\n * default implementation of each method does nothing, but can be overridden as\n * necessary.\n */\nexport default class ErrorListener {\n    syntaxError(recognizer, offendingSymbol, line, column, msg, e) {\n    }\n\n    reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {\n    }\n\n    reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {\n    }\n\n    reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs) {\n    }\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport ErrorListener from \"./ErrorListener.js\";\n\n/**\n * {@inheritDoc}\n *\n * <p>\n * This implementation prints messages to {@link System//err} containing the\n * values of {@code line}, {@code charPositionInLine}, and {@code msg} using\n * the following format.</p>\n *\n * <pre>\n * line <em>line</em>:<em>charPositionInLine</em> <em>msg</em>\n * </pre>\n *\n */\nexport default class ConsoleErrorListener extends ErrorListener {\n    constructor() {\n        super();\n    }\n\n    syntaxError(recognizer, offendingSymbol, line, column, msg, e) {\n        console.error(\"line \" + line + \":\" + column + \" \" + msg);\n    }\n}\n\n\n/**\n * Provides a default instance of {@link ConsoleErrorListener}.\n */\nConsoleErrorListener.INSTANCE = new ConsoleErrorListener();\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport ErrorListener from \"./ErrorListener.js\";\n\nexport default class ProxyErrorListener extends ErrorListener {\n    constructor(delegates) {\n        super();\n        if (delegates===null) {\n            throw \"delegates\";\n        }\n        this.delegates = delegates;\n        return this;\n    }\n\n    syntaxError(recognizer, offendingSymbol, line, column, msg, e) {\n        this.delegates.map(d => d.syntaxError(recognizer, offendingSymbol, line, column, msg, e));\n    }\n\n    reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {\n        this.delegates.map(d => d.reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs));\n    }\n\n    reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {\n        this.delegates.map(d => d.reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs));\n    }\n\n    reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs) {\n        this.delegates.map(d => d.reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs));\n    }\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nimport Token from './Token.js';\nimport ConsoleErrorListener from './error/ConsoleErrorListener.js';\nimport ProxyErrorListener from './error/ProxyErrorListener.js';\n\nexport default class Recognizer {\n    constructor() {\n        this._listeners = [ ConsoleErrorListener.INSTANCE ];\n        this._interp = null;\n        this._stateNumber = -1;\n    }\n\n    checkVersion(toolVersion) {\n        const runtimeVersion = \"4.11.0\";\n        if (runtimeVersion!==toolVersion) {\n            console.log(\"ANTLR runtime and generated code versions disagree: \"+runtimeVersion+\"!=\"+toolVersion);\n        }\n    }\n\n    addErrorListener(listener) {\n        this._listeners.push(listener);\n    }\n\n    removeErrorListeners() {\n        this._listeners = [];\n    }\n\n    getLiteralNames() {\n        return Object.getPrototypeOf(this).constructor.literalNames || [];\n    }\n\n    getSymbolicNames() {\n        return Object.getPrototypeOf(this).constructor.symbolicNames || [];\n    }\n\n    getTokenNames() {\n        if(!this.tokenNames) {\n            const literalNames = this.getLiteralNames();\n            const symbolicNames = this.getSymbolicNames();\n            const length = literalNames.length > symbolicNames.length ? literalNames.length : symbolicNames.length;\n            this.tokenNames = [];\n            for(let i=0; i<length; i++) {\n                this.tokenNames[i] = literalNames[i] || symbolicNames[i] || \"<INVALID\";\n            }\n        }\n        return this.tokenNames;\n    }\n\n    getTokenTypeMap() {\n        const tokenNames = this.getTokenNames();\n        if (tokenNames===null) {\n            throw(\"The current recognizer does not provide a list of token names.\");\n        }\n        let result = this.tokenTypeMapCache[tokenNames];\n        if(result===undefined) {\n            result = tokenNames.reduce(function(o, k, i) { o[k] = i; });\n            result.EOF = Token.EOF;\n            this.tokenTypeMapCache[tokenNames] = result;\n        }\n        return result;\n    }\n\n    /**\n     * Get a map from rule names to rule indexes.\n     * <p>Used for XPath and tree pattern compilation.</p>\n     */\n    getRuleIndexMap() {\n        const ruleNames = this.ruleNames;\n        if (ruleNames===null) {\n            throw(\"The current recognizer does not provide a list of rule names.\");\n        }\n        let result = this.ruleIndexMapCache[ruleNames]; // todo: should it be Recognizer.ruleIndexMapCache ?\n        if(result===undefined) {\n            result = ruleNames.reduce(function(o, k, i) { o[k] = i; });\n            this.ruleIndexMapCache[ruleNames] = result;\n        }\n        return result;\n    }\n\n    getTokenType(tokenName) {\n        const ttype = this.getTokenTypeMap()[tokenName];\n        if (ttype !==undefined) {\n            return ttype;\n        } else {\n            return Token.INVALID_TYPE;\n        }\n    }\n\n    // What is the error header, normally line/character position information?\n    getErrorHeader(e) {\n        const line = e.getOffendingToken().line;\n        const column = e.getOffendingToken().column;\n        return \"line \" + line + \":\" + column;\n    }\n\n    /**\n     * How should a token be displayed in an error message? The default\n     * is to display just the text, but during development you might\n     * want to have a lot of information spit out.  Override in that case\n     * to use t.toString() (which, for CommonToken, dumps everything about\n     * the token). This is better than forcing you to override a method in\n     * your token objects because you don't have to go modify your lexer\n     * so that it creates a new Java type.\n     *\n     * @deprecated This method is not called by the ANTLR 4 Runtime. Specific\n     * implementations of {@link ANTLRErrorStrategy} may provide a similar\n     * feature when necessary. For example, see\n     * {@link DefaultErrorStrategy//getTokenErrorDisplay}.*/\n    getTokenErrorDisplay(t) {\n        if (t===null) {\n            return \"<no token>\";\n        }\n        let s = t.text;\n        if (s===null) {\n            if (t.type===Token.EOF) {\n                s = \"<EOF>\";\n            } else {\n                s = \"<\" + t.type + \">\";\n            }\n        }\n        s = s.replace(\"\\n\",\"\\\\n\").replace(\"\\r\",\"\\\\r\").replace(\"\\t\",\"\\\\t\");\n        return \"'\" + s + \"'\";\n    }\n\n    getErrorListenerDispatch() {\n        return new ProxyErrorListener(this._listeners);\n    }\n\n    /**\n     * subclass needs to override these if there are sempreds or actions\n     * that the ATN interp needs to execute\n     */\n    sempred(localctx, ruleIndex, actionIndex) {\n        return true;\n    }\n\n    precpred(localctx , precedence) {\n        return true;\n    }\n\n    get state(){\n        return this._stateNumber;\n    }\n\n    set state(state) {\n        this._stateNumber = state;\n    }\n}\n\nRecognizer.tokenTypeMapCache = {};\nRecognizer.ruleIndexMapCache = {};\n", "import Token from \"./Token.js\";\n\nexport default class CommonToken extends Token {\n    constructor(source, type, channel, start, stop) {\n        super();\n        this.source = source !== undefined ? source : CommonToken.EMPTY_SOURCE;\n        this.type = type !== undefined ? type : null;\n        this.channel = channel !== undefined ? channel : Token.DEFAULT_CHANNEL;\n        this.start = start !== undefined ? start : -1;\n        this.stop = stop !== undefined ? stop : -1;\n        this.tokenIndex = -1;\n        if (this.source[0] !== null) {\n            this.line = source[0].line;\n            this.column = source[0].column;\n        } else {\n            this.column = -1;\n        }\n    }\n\n    /**\n     * Constructs a new {@link CommonToken} as a copy of another {@link Token}.\n     *\n     * <p>\n     * If {@code oldToken} is also a {@link CommonToken} instance, the newly\n     * constructed token will share a reference to the {@link //text} field and\n     * the {@link Pair} stored in {@link //source}. Otherwise, {@link //text} will\n     * be assigned the result of calling {@link //getText}, and {@link //source}\n     * will be constructed from the result of {@link Token//getTokenSource} and\n     * {@link Token//getInputStream}.</p>\n     *\n     * @param oldToken The token to copy.\n     */\n    clone() {\n        const t = new CommonToken(this.source, this.type, this.channel, this.start, this.stop);\n        t.tokenIndex = this.tokenIndex;\n        t.line = this.line;\n        t.column = this.column;\n        t.text = this.text;\n        return t;\n    }\n\n    toString() {\n        let txt = this.text;\n        if (txt !== null) {\n            txt = txt.replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/\\t/g, \"\\\\t\");\n        } else {\n            txt = \"<no text>\";\n        }\n        return \"[@\" + this.tokenIndex + \",\" + this.start + \":\" + this.stop + \"='\" +\n            txt + \"',<\" + this.type + \">\" +\n            (this.channel > 0 ? \",channel=\" + this.channel : \"\") + \",\" +\n            this.line + \":\" + this.column + \"]\";\n    }\n\n    get text(){\n        if (this._text !== null) {\n            return this._text;\n        }\n        const input = this.getInputStream();\n        if (input === null) {\n            return null;\n        }\n        const n = input.size;\n        if (this.start < n && this.stop < n) {\n            return input.getText(this.start, this.stop);\n        } else {\n            return \"<EOF>\";\n        }\n    }\n\n    set text(text) {\n        this._text = text;\n    }\n}\n\n/**\n * An empty {@link Pair} which is used as the default value of\n * {@link //source} for tokens that do not have a source.\n */\nCommonToken.EMPTY_SOURCE = [ null, null ];\n", "/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nimport CommonToken from './CommonToken.js';\n\nclass TokenFactory {}\n\n/**\n * This default implementation of {@link TokenFactory} creates\n * {@link CommonToken} objects.\n */\nexport default class CommonTokenFactory extends TokenFactory {\n    constructor(copyText) {\n        super();\n        /**\n         * Indicates whether {@link CommonToken//setText} should be called after\n         * constructing tokens to explicitly set the text. This is useful for cases\n         * where the input stream might not be able to provide arbitrary substrings\n         * of text from the input after the lexer creates a token (e.g. the\n         * implementation of {@link CharStream//getText} in\n         * {@link UnbufferedCharStream} throws an\n         * {@link UnsupportedOperationException}). Explicitly setting the token text\n         * allows {@link Token//getText} to be called at any time regardless of the\n         * input stream implementation.\n         *\n         * <p>\n         * The default value is {@code false} to avoid the performance and memory\n         * overhead of copying text for every token unless explicitly requested.</p>\n         */\n        this.copyText = copyText===undefined ? false : copyText;\n    }\n\n    create(source, type, text, channel, start, stop, line, column) {\n        const t = new CommonToken(source, type, channel, start, stop);\n        t.line = line;\n        t.column = column;\n        if (text !==null) {\n            t.text = text;\n        } else if (this.copyText && source[1] !==null) {\n            t.text = source[1].getText(start,stop);\n        }\n        return t;\n    }\n\n    createThin(type, text) {\n        const t = new CommonToken(null, type);\n        t.text = text;\n        return t;\n    }\n}\n\n/**\n * The default {@link CommonTokenFactory} instance.\n *\n * <p>\n * This token factory does not explicitly copy token text when constructing\n * tokens.</p>\n */\nCommonTokenFactory.DEFAULT = new CommonTokenFactory();\n", "/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n/**\n * The root of the ANTLR exception hierarchy. In general, ANTLR tracks just\n *  3 kinds of errors: prediction errors, failed predicate errors, and\n *  mismatched input errors. In each case, the parser knows where it is\n *  in the input, where it is in the ATN, the rule invocation stack,\n *  and what kind of problem occurred.\n */\n\nexport default class RecognitionException extends Error {\n    constructor(params) {\n        super(params.message);\n        if (Error.captureStackTrace)\n            Error.captureStackTrace(this, RecognitionException);\n        this.message = params.message;\n        this.recognizer = params.recognizer;\n        this.input = params.input;\n        this.ctx = params.ctx;\n        /**\n         * The current {@link Token} when an error occurred. Since not all streams\n         * support accessing symbols by index, we have to track the {@link Token}\n         * instance itself\n        */\n        this.offendingToken = null;\n        /**\n         * Get the ATN state number the parser was in at the time the error\n         * occurred. For {@link NoViableAltException} and\n         * {@link LexerNoViableAltException} exceptions, this is the\n         * {@link DecisionState} number. For others, it is the state whose outgoing\n         * edge we couldn't match.\n         */\n        this.offendingState = -1;\n        if (this.recognizer!==null) {\n            this.offendingState = this.recognizer.state;\n        }\n    }\n\n    /**\n     * Gets the set of input symbols which could potentially follow the\n     * previously matched symbol at the time this exception was thrown.\n     *\n     * <p>If the set of expected tokens is not known and could not be computed,\n     * this method returns {@code null}.</p>\n     *\n     * @return The set of token types that could potentially follow the current\n     * state in the ATN, or {@code null} if the information is not available.\n     */\n    getExpectedTokens() {\n        if (this.recognizer!==null) {\n            return this.recognizer.atn.getExpectedTokens(this.offendingState, this.ctx);\n        } else {\n            return null;\n        }\n    }\n\n    // <p>If the state number is not known, this method returns -1.</p>\n    toString() {\n        return this.message;\n    }\n}\n\n\n\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport Interval from \"../misc/Interval.js\";\nimport RecognitionException from \"./RecognitionException.js\";\n\nexport default class LexerNoViableAltException extends RecognitionException {\n    constructor(lexer, input, startIndex, deadEndConfigs) {\n        super({message: \"\", recognizer: lexer, input: input, ctx: null});\n        this.startIndex = startIndex;\n        this.deadEndConfigs = deadEndConfigs;\n    }\n\n    toString() {\n        let symbol = \"\";\n        if (this.startIndex >= 0 && this.startIndex < this.input.size) {\n            symbol = this.input.getText(new Interval(this.startIndex,this.startIndex));\n        }\n        return \"LexerNoViableAltException\" + symbol;\n    }\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nimport Token from './Token.js';\nimport Recognizer from './Recognizer.js';\nimport CommonTokenFactory from './CommonTokenFactory.js';\nimport RecognitionException from './error/RecognitionException.js';\nimport LexerNoViableAltException from './error/LexerNoViableAltException.js';\n\n/**\n * A lexer is recognizer that draws input symbols from a character stream.\n * lexer grammars result in a subclass of this object. A Lexer object\n * uses simplified match() and error recovery mechanisms in the interest of speed.\n */\nexport default class Lexer extends Recognizer {\n\tconstructor(input) {\n\t\tsuper();\n\t\tthis._input = input;\n\t\tthis._factory = CommonTokenFactory.DEFAULT;\n\t\tthis._tokenFactorySourcePair = [ this, input ];\n\n\t\tthis._interp = null; // child classes must populate this\n\n\t\t/**\n\t\t * The goal of all lexer rules/methods is to create a token object.\n\t\t * this is an instance variable as multiple rules may collaborate to\n\t\t * create a single token. nextToken will return this object after\n\t\t * matching lexer rule(s). If you subclass to allow multiple token\n\t\t * emissions, then set this to the last token to be matched or\n\t\t * something nonnull so that the auto token emit mechanism will not\n\t\t * emit another token.\n\t\t */\n\t\tthis._token = null;\n\n\t\t/**\n\t\t * What character index in the stream did the current token start at?\n\t\t * Needed, for example, to get the text for current token. Set at\n\t\t * the start of nextToken.\n\t\t */\n\t\tthis._tokenStartCharIndex = -1;\n\n\t\t// The line on which the first character of the token resides///\n\t\tthis._tokenStartLine = -1;\n\n\t\t// The character position of first character within the line///\n\t\tthis._tokenStartColumn = -1;\n\n\t\t// Once we see EOF on char stream, next token will be EOF.\n\t\t// If you have DONE : EOF ; then you see DONE EOF.\n\t\tthis._hitEOF = false;\n\n\t\t// The channel number for the current token///\n\t\tthis._channel = Token.DEFAULT_CHANNEL;\n\n\t\t// The token type for the current token///\n\t\tthis._type = Token.INVALID_TYPE;\n\n\t\tthis._modeStack = [];\n\t\tthis._mode = Lexer.DEFAULT_MODE;\n\n\t\t/**\n\t\t * You can set the text for the current token to override what is in\n\t\t * the input char buffer. Use setText() or can set this instance var.\n\t\t */\n\t\tthis._text = null;\n\t}\n\n\treset() {\n\t\t// wack Lexer state variables\n\t\tif (this._input !== null) {\n\t\t\tthis._input.seek(0); // rewind the input\n\t\t}\n\t\tthis._token = null;\n\t\tthis._type = Token.INVALID_TYPE;\n\t\tthis._channel = Token.DEFAULT_CHANNEL;\n\t\tthis._tokenStartCharIndex = -1;\n\t\tthis._tokenStartColumn = -1;\n\t\tthis._tokenStartLine = -1;\n\t\tthis._text = null;\n\n\t\tthis._hitEOF = false;\n\t\tthis._mode = Lexer.DEFAULT_MODE;\n\t\tthis._modeStack = [];\n\n\t\tthis._interp.reset();\n\t}\n\n// Return a token from this source; i.e., match a token on the char stream.\n\tnextToken() {\n\t\tif (this._input === null) {\n\t\t\tthrow \"nextToken requires a non-null input stream.\";\n\t\t}\n\n\t\t/**\n\t\t * Mark start location in char stream so unbuffered streams are\n\t\t * guaranteed at least have text of current token\n\t\t */\n\t\tconst tokenStartMarker = this._input.mark();\n\t\ttry {\n\t\t\tfor (;;) {\n\t\t\t\tif (this._hitEOF) {\n\t\t\t\t\tthis.emitEOF();\n\t\t\t\t\treturn this._token;\n\t\t\t\t}\n\t\t\t\tthis._token = null;\n\t\t\t\tthis._channel = Token.DEFAULT_CHANNEL;\n\t\t\t\tthis._tokenStartCharIndex = this._input.index;\n\t\t\t\tthis._tokenStartColumn = this._interp.column;\n\t\t\t\tthis._tokenStartLine = this._interp.line;\n\t\t\t\tthis._text = null;\n\t\t\t\tlet continueOuter = false;\n\t\t\t\tfor (;;) {\n\t\t\t\t\tthis._type = Token.INVALID_TYPE;\n\t\t\t\t\tlet ttype = Lexer.SKIP;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tttype = this._interp.match(this._input, this._mode);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tif(e instanceof RecognitionException) {\n\t\t\t\t\t\t\tthis.notifyListeners(e); // report error\n\t\t\t\t\t\t\tthis.recover(e);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.log(e.stack);\n\t\t\t\t\t\t\tthrow e;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (this._input.LA(1) === Token.EOF) {\n\t\t\t\t\t\tthis._hitEOF = true;\n\t\t\t\t\t}\n\t\t\t\t\tif (this._type === Token.INVALID_TYPE) {\n\t\t\t\t\t\tthis._type = ttype;\n\t\t\t\t\t}\n\t\t\t\t\tif (this._type === Lexer.SKIP) {\n\t\t\t\t\t\tcontinueOuter = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif (this._type !== Lexer.MORE) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (continueOuter) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (this._token === null) {\n\t\t\t\t\tthis.emit();\n\t\t\t\t}\n\t\t\t\treturn this._token;\n\t\t\t}\n\t\t} finally {\n\t\t\t// make sure we release marker after match or\n\t\t\t// unbuffered char stream will keep buffering\n\t\t\tthis._input.release(tokenStartMarker);\n\t\t}\n\t}\n\n\t/**\n\t * Instruct the lexer to skip creating a token for current lexer rule\n\t * and look for another token. nextToken() knows to keep looking when\n\t * a lexer rule finishes with token set to SKIP_TOKEN. Recall that\n\t * if token==null at end of any token rule, it creates one for you\n\t * and emits it.\n\t */\n\tskip() {\n\t\tthis._type = Lexer.SKIP;\n\t}\n\n\tmore() {\n\t\tthis._type = Lexer.MORE;\n\t}\n\n\tmode(m) {\n\t\tthis._mode = m;\n\t}\n\n\tpushMode(m) {\n\t\tif (this._interp.debug) {\n\t\t\tconsole.log(\"pushMode \" + m);\n\t\t}\n\t\tthis._modeStack.push(this._mode);\n\t\tthis.mode(m);\n\t}\n\n\tpopMode() {\n\t\tif (this._modeStack.length === 0) {\n\t\t\tthrow \"Empty Stack\";\n\t\t}\n\t\tif (this._interp.debug) {\n\t\t\tconsole.log(\"popMode back to \" + this._modeStack.slice(0, -1));\n\t\t}\n\t\tthis.mode(this._modeStack.pop());\n\t\treturn this._mode;\n\t}\n\n\t/**\n\t * By default does not support multiple emits per nextToken invocation\n\t * for efficiency reasons. Subclass and override this method, nextToken,\n\t * and getToken (to push tokens into a list and pull from that list\n\t * rather than a single variable as this implementation does).\n\t */\n\temitToken(token) {\n\t\tthis._token = token;\n\t}\n\n\t/**\n\t * The standard method called to automatically emit a token at the\n\t * outermost lexical rule. The token object should point into the\n\t * char buffer start..stop. If there is a text override in 'text',\n\t * use that to set the token's text. Override this method to emit\n\t * custom Token objects or provide a new factory.\n\t */\n\temit() {\n\t\tconst t = this._factory.create(this._tokenFactorySourcePair, this._type,\n\t\t\t\tthis._text, this._channel, this._tokenStartCharIndex, this\n\t\t\t\t\t\t.getCharIndex() - 1, this._tokenStartLine,\n\t\t\t\tthis._tokenStartColumn);\n\t\tthis.emitToken(t);\n\t\treturn t;\n\t}\n\n\temitEOF() {\n\t\tconst cpos = this.column;\n\t\tconst lpos = this.line;\n\t\tconst eof = this._factory.create(this._tokenFactorySourcePair, Token.EOF,\n\t\t\t\tnull, Token.DEFAULT_CHANNEL, this._input.index,\n\t\t\t\tthis._input.index - 1, lpos, cpos);\n\t\tthis.emitToken(eof);\n\t\treturn eof;\n\t}\n\n// What is the index of the current character of lookahead?///\n\tgetCharIndex() {\n\t\treturn this._input.index;\n\t}\n\n\t/**\n\t * Return a list of all Token objects in input char stream.\n\t * Forces load of all tokens. Does not include EOF token.\n\t */\n\tgetAllTokens() {\n\t\tconst tokens = [];\n\t\tlet t = this.nextToken();\n\t\twhile (t.type !== Token.EOF) {\n\t\t\ttokens.push(t);\n\t\t\tt = this.nextToken();\n\t\t}\n\t\treturn tokens;\n\t}\n\n\tnotifyListeners(e) {\n\t\tconst start = this._tokenStartCharIndex;\n\t\tconst stop = this._input.index;\n\t\tconst text = this._input.getText(start, stop);\n\t\tconst msg = \"token recognition error at: '\" + this.getErrorDisplay(text) + \"'\";\n\t\tconst listener = this.getErrorListenerDispatch();\n\t\tlistener.syntaxError(this, null, this._tokenStartLine,\n\t\t\t\tthis._tokenStartColumn, msg, e);\n\t}\n\n\tgetErrorDisplay(s) {\n\t\tconst d = [];\n\t\tfor (let i = 0; i < s.length; i++) {\n\t\t\td.push(s[i]);\n\t\t}\n\t\treturn d.join('');\n\t}\n\n\tgetErrorDisplayForChar(c) {\n\t\tif (c.charCodeAt(0) === Token.EOF) {\n\t\t\treturn \"<EOF>\";\n\t\t} else if (c === '\\n') {\n\t\t\treturn \"\\\\n\";\n\t\t} else if (c === '\\t') {\n\t\t\treturn \"\\\\t\";\n\t\t} else if (c === '\\r') {\n\t\t\treturn \"\\\\r\";\n\t\t} else {\n\t\t\treturn c;\n\t\t}\n\t}\n\n\tgetCharErrorDisplay(c) {\n\t\treturn \"'\" + this.getErrorDisplayForChar(c) + \"'\";\n\t}\n\n\t/**\n\t * Lexers can normally match any char in it's vocabulary after matching\n\t * a token, so do the easy thing and just kill a character and hope\n\t * it all works out. You can instead use the rule invocation stack\n\t * to do sophisticated error recovery if you are in a fragment rule.\n\t */\n\trecover(re) {\n\t\tif (this._input.LA(1) !== Token.EOF) {\n\t\t\tif (re instanceof LexerNoViableAltException) {\n\t\t\t\t// skip a char and try again\n\t\t\t\tthis._interp.consume(this._input);\n\t\t\t} else {\n\t\t\t\t// TODO: Do we lose character or line position information?\n\t\t\t\tthis._input.consume();\n\t\t\t}\n\t\t}\n\t}\n\n\tget inputStream(){\n\t\treturn this._input;\n\t}\n\n\tset inputStream(input) {\n\t\tthis._input = null;\n\t\tthis._tokenFactorySourcePair = [ this, this._input ];\n\t\tthis.reset();\n\t\tthis._input = input;\n\t\tthis._tokenFactorySourcePair = [ this, this._input ];\n\t}\n\n\tget sourceName(){\n\t\treturn this._input.sourceName;\n\t}\n\n\tget type(){\n\t\treturn this._type;\n\t}\n\n\tset type(type) {\n\t\tthis._type = type;\n\t}\n\n\tget line(){\n\t\treturn this._interp.line;\n\t}\n\n\tset line(line) {\n\t\tthis._interp.line = line;\n\t}\n\n\tget column(){\n\t\treturn this._interp.column;\n\t}\n\n\tset column(column) {\n\t\tthis._interp.column = column;\n\t}\n\n\tget text(){\n\t\tif (this._text !== null) {\n\t\t\treturn this._text;\n\t\t} else {\n\t\t\treturn this._interp.getText(this._input);\n\t\t}\n\t}\n\n\tset text(text) {\n\t\tthis._text = text;\n\t}\n}\n\n\n\n\nLexer.DEFAULT_MODE = 0;\nLexer.MORE = -2;\nLexer.SKIP = -3;\n\nLexer.DEFAULT_TOKEN_CHANNEL = Token.DEFAULT_CHANNEL;\nLexer.HIDDEN = Token.HIDDEN_CHANNEL;\nLexer.MIN_CHAR_VALUE = 0x0000;\nLexer.MAX_CHAR_VALUE = 0x10FFFF;\n\n", "/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nimport ATN from './ATN.js';\nimport SemanticContext from './SemanticContext.js';\nimport { merge } from '../context/PredictionContextUtils.js';\nimport arrayToString from \"../utils/arrayToString.js\";\nimport HashSet from \"../misc/HashSet.js\";\nimport equalArrays from \"../utils/equalArrays.js\";\nimport HashCode from \"../misc/HashCode.js\";\n\nfunction hashATNConfig(c) {\n\treturn c.hashCodeForConfigSet();\n}\n\nfunction equalATNConfigs(a, b) {\n\tif ( a===b ) {\n\t\treturn true;\n\t} else if ( a===null || b===null ) {\n\t\treturn false;\n\t} else\n       return a.equalsForConfigSet(b);\n }\n\n/**\n * Specialized {@link Set}{@code <}{@link ATNConfig}{@code >} that can track\n * info about the set, with support for combining similar configurations using a\n * graph-structured stack\n */\nexport default class ATNConfigSet {\n\tconstructor(fullCtx) {\n\t\t/**\n\t\t * The reason that we need this is because we don't want the hash map to use\n\t\t * the standard hash code and equals. We need all configurations with the\n\t\t * same\n\t\t * {@code (s,i,_,semctx)} to be equal. Unfortunately, this key effectively\n\t\t * doubles\n\t\t * the number of objects associated with ATNConfigs. The other solution is\n\t\t * to\n\t\t * use a hash table that lets us specify the equals/hashcode operation.\n\t\t * All configs but hashed by (s, i, _, pi) not including context. Wiped out\n\t\t * when we go readonly as this set becomes a DFA state\n\t\t */\n\t\tthis.configLookup = new HashSet(hashATNConfig, equalATNConfigs);\n\t\t/**\n\t\t * Indicates that this configuration set is part of a full context\n\t\t * LL prediction. It will be used to determine how to merge $. With SLL\n\t\t * it's a wildcard whereas it is not for LL context merge\n\t\t */\n\t\tthis.fullCtx = fullCtx === undefined ? true : fullCtx;\n\t\t/**\n\t\t * Indicates that the set of configurations is read-only. Do not\n\t\t * allow any code to manipulate the set; DFA states will point at\n\t\t * the sets and they must not change. This does not protect the other\n\t\t * fields; in particular, conflictingAlts is set after\n\t\t * we've made this readonly\n\t\t */\n\t\tthis.readOnly = false;\n\t\t// Track the elements as they are added to the set; supports get(i)///\n\t\tthis.configs = [];\n\n\t\t// TODO: these fields make me pretty uncomfortable but nice to pack up info\n\t\t// together, saves recomputation\n\t\t// TODO: can we track conflicts as they are added to save scanning configs\n\t\t// later?\n\t\tthis.uniqueAlt = 0;\n\t\tthis.conflictingAlts = null;\n\n\t\t/**\n\t\t * Used in parser and lexer. In lexer, it indicates we hit a pred\n\t\t * while computing a closure operation. Don't make a DFA state from this\n\t\t */\n\t\tthis.hasSemanticContext = false;\n\t\tthis.dipsIntoOuterContext = false;\n\n\t\tthis.cachedHashCode = -1;\n\t}\n\n\t/**\n\t * Adding a new config means merging contexts with existing configs for\n\t * {@code (s, i, pi, _)}, where {@code s} is the\n\t * {@link ATNConfig//state}, {@code i} is the {@link ATNConfig//alt}, and\n\t * {@code pi} is the {@link ATNConfig//semanticContext}. We use\n\t * {@code (s,i,pi)} as key.\n\t *\n\t * <p>This method updates {@link //dipsIntoOuterContext} and\n\t * {@link //hasSemanticContext} when necessary.</p>\n\t */\n\tadd(config, mergeCache) {\n\t\tif (mergeCache === undefined) {\n\t\t\tmergeCache = null;\n\t\t}\n\t\tif (this.readOnly) {\n\t\t\tthrow \"This set is readonly\";\n\t\t}\n\t\tif (config.semanticContext !== SemanticContext.NONE) {\n\t\t\tthis.hasSemanticContext = true;\n\t\t}\n\t\tif (config.reachesIntoOuterContext > 0) {\n\t\t\tthis.dipsIntoOuterContext = true;\n\t\t}\n\t\tconst existing = this.configLookup.add(config);\n\t\tif (existing === config) {\n\t\t\tthis.cachedHashCode = -1;\n\t\t\tthis.configs.push(config); // track order here\n\t\t\treturn true;\n\t\t}\n\t\t// a previous (s,i,pi,_), merge with it and save result\n\t\tconst rootIsWildcard = !this.fullCtx;\n\t\tconst merged = merge(existing.context, config.context, rootIsWildcard, mergeCache);\n\t\t/**\n\t\t * no need to check for existing.context, config.context in cache\n\t\t * since only way to create new graphs is \"call rule\" and here. We\n\t\t * cache at both places\n\t\t */\n\t\texisting.reachesIntoOuterContext = Math.max( existing.reachesIntoOuterContext, config.reachesIntoOuterContext);\n\t\t// make sure to preserve the precedence filter suppression during the merge\n\t\tif (config.precedenceFilterSuppressed) {\n\t\t\texisting.precedenceFilterSuppressed = true;\n\t\t}\n\t\texisting.context = merged; // replace context; no need to alt mapping\n\t\treturn true;\n\t}\n\n\tgetStates() {\n\t\tconst states = new HashSet();\n\t\tfor (let i = 0; i < this.configs.length; i++) {\n\t\t\tstates.add(this.configs[i].state);\n\t\t}\n\t\treturn states;\n\t}\n\n\tgetPredicates() {\n\t\tconst preds = [];\n\t\tfor (let i = 0; i < this.configs.length; i++) {\n\t\t\tconst c = this.configs[i].semanticContext;\n\t\t\tif (c !== SemanticContext.NONE) {\n\t\t\t\tpreds.push(c.semanticContext);\n\t\t\t}\n\t\t}\n\t\treturn preds;\n\t}\n\n\toptimizeConfigs(interpreter) {\n\t\tif (this.readOnly) {\n\t\t\tthrow \"This set is readonly\";\n\t\t}\n\t\tif (this.configLookup.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tfor (let i = 0; i < this.configs.length; i++) {\n\t\t\tconst config = this.configs[i];\n\t\t\tconfig.context = interpreter.getCachedContext(config.context);\n\t\t}\n\t}\n\n\taddAll(coll) {\n\t\tfor (let i = 0; i < coll.length; i++) {\n\t\t\tthis.add(coll[i]);\n\t\t}\n\t\treturn false;\n\t}\n\n\tequals(other) {\n\t\treturn this === other ||\n\t\t\t(other instanceof ATNConfigSet &&\n\t\t\tequalArrays(this.configs, other.configs) &&\n\t\t\tthis.fullCtx === other.fullCtx &&\n\t\t\tthis.uniqueAlt === other.uniqueAlt &&\n\t\t\tthis.conflictingAlts === other.conflictingAlts &&\n\t\t\tthis.hasSemanticContext === other.hasSemanticContext &&\n\t\t\tthis.dipsIntoOuterContext === other.dipsIntoOuterContext);\n\t}\n\n\thashCode() {\n\t\tconst hash = new HashCode();\n\t\thash.update(this.configs);\n\t\treturn hash.finish();\n\t}\n\n\tupdateHashCode(hash) {\n\t\tif (this.readOnly) {\n\t\t\tif (this.cachedHashCode === -1) {\n\t\t\t\tthis.cachedHashCode = this.hashCode();\n\t\t\t}\n\t\t\thash.update(this.cachedHashCode);\n\t\t} else {\n\t\t\thash.update(this.hashCode());\n\t\t}\n\t}\n\n\tisEmpty() {\n\t\treturn this.configs.length === 0;\n\t}\n\n\tcontains(item) {\n\t\tif (this.configLookup === null) {\n\t\t\tthrow \"This method is not implemented for readonly sets.\";\n\t\t}\n\t\treturn this.configLookup.contains(item);\n\t}\n\n\tcontainsFast(item) {\n\t\tif (this.configLookup === null) {\n\t\t\tthrow \"This method is not implemented for readonly sets.\";\n\t\t}\n\t\treturn this.configLookup.containsFast(item);\n\t}\n\n\tclear() {\n\t\tif (this.readOnly) {\n\t\t\tthrow \"This set is readonly\";\n\t\t}\n\t\tthis.configs = [];\n\t\tthis.cachedHashCode = -1;\n\t\tthis.configLookup = new HashSet();\n\t}\n\n\tsetReadonly(readOnly) {\n\t\tthis.readOnly = readOnly;\n\t\tif (readOnly) {\n\t\t\tthis.configLookup = null; // can't mod, no need for lookup cache\n\t\t}\n\t}\n\n\ttoString() {\n\t\treturn arrayToString(this.configs) +\n\t\t\t(this.hasSemanticContext ? \",hasSemanticContext=\" + this.hasSemanticContext : \"\") +\n\t\t\t(this.uniqueAlt !== ATN.INVALID_ALT_NUMBER ? \",uniqueAlt=\" + this.uniqueAlt : \"\") +\n\t\t\t(this.conflictingAlts !== null ? \",conflictingAlts=\" + this.conflictingAlts : \"\") +\n\t\t\t(this.dipsIntoOuterContext ? \",dipsIntoOuterContext\" : \"\");\n\t}\n\n\tget items(){\n\t\treturn this.configs;\n\t}\n\n\tget length(){\n\t\treturn this.configs.length;\n\t}\n}\n\n", "/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nimport ATNConfigSet from '../atn/ATNConfigSet.js';\nimport HashCode from \"../misc/HashCode.js\";\nimport HashSet from \"../misc/HashSet.js\";\n\n\n/**\n * A DFA state represents a set of possible ATN configurations.\n * As Aho, Sethi, Ullman p. 117 says \"The DFA uses its state\n * to keep track of all possible states the ATN can be in after\n * reading each input symbol. That is to say, after reading\n * input a1a2..an, the DFA is in a state that represents the\n * subset T of the states of the ATN that are reachable from the\n * ATN's start state along some path labeled a1a2..an.\"\n * In conventional NFA&rarr;DFA conversion, therefore, the subset T\n * would be a bitset representing the set of states the\n * ATN could be in. We need to track the alt predicted by each\n * state as well, however. More importantly, we need to maintain\n * a stack of states, tracking the closure operations as they\n * jump from rule to rule, emulating rule invocations (method calls).\n * I have to add a stack to simulate the proper lookahead sequences for\n * the underlying LL grammar from which the ATN was derived.\n *\n * <p>I use a set of ATNConfig objects not simple states. An ATNConfig\n * is both a state (ala normal conversion) and a RuleContext describing\n * the chain of rules (if any) followed to arrive at that state.</p>\n *\n * <p>A DFA state may have multiple references to a particular state,\n * but with different ATN contexts (with same or different alts)\n * meaning that state was reached via a different set of rule invocations.</p>\n */\nexport default class DFAState {\n\tconstructor(stateNumber, configs) {\n\t\tif (stateNumber === null) {\n\t\t\tstateNumber = -1;\n\t\t}\n\t\tif (configs === null) {\n\t\t\tconfigs = new ATNConfigSet();\n\t\t}\n\t\tthis.stateNumber = stateNumber;\n\t\tthis.configs = configs;\n\t\t/**\n\t\t * {@code edges[symbol]} points to target of symbol. Shift up by 1 so (-1)\n\t\t * {@link Token//EOF} maps to {@code edges[0]}.\n\t\t */\n\t\tthis.edges = null;\n\t\tthis.isAcceptState = false;\n\t\t/**\n\t\t * if accept state, what ttype do we match or alt do we predict?\n\t\t * This is set to {@link ATN//INVALID_ALT_NUMBER} when {@link//predicates}\n\t\t * {@code !=null} or {@link //requiresFullContext}.\n\t\t */\n\t\tthis.prediction = 0;\n\t\tthis.lexerActionExecutor = null;\n\t\t/**\n\t\t * Indicates that this state was created during SLL prediction that\n\t\t * discovered a conflict between the configurations in the state. Future\n\t\t * {@link ParserATNSimulator//execATN} invocations immediately jumped doing\n\t\t * full context prediction if this field is true.\n\t\t */\n\t\tthis.requiresFullContext = false;\n\t\t/**\n\t\t * During SLL parsing, this is a list of predicates associated with the\n\t\t * ATN configurations of the DFA state. When we have predicates,\n\t\t * {@link //requiresFullContext} is {@code false} since full context\n\t\t * prediction evaluates predicates\n\t\t * on-the-fly. If this is not null, then {@link //prediction} is\n\t\t * {@link ATN//INVALID_ALT_NUMBER}.\n\t\t *\n\t\t * <p>We only use these for non-{@link //requiresFullContext} but\n\t\t * conflicting states. That\n\t\t * means we know from the context (it's $ or we don't dip into outer\n\t\t * context) that it's an ambiguity not a conflict.</p>\n\t\t *\n\t\t * <p>This list is computed by {@link\n\t\t * ParserATNSimulator//predicateDFAState}.</p>\n\t\t */\n\t\tthis.predicates = null;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the set of all alts mentioned by all ATN configurations in this\n\t * DFA state.\n\t */\n\tgetAltSet() {\n\t\tconst alts = new HashSet();\n\t\tif (this.configs !== null) {\n\t\t\tfor (let i = 0; i < this.configs.length; i++) {\n\t\t\t\tconst c = this.configs[i];\n\t\t\t\talts.add(c.alt);\n\t\t\t}\n\t\t}\n\t\tif (alts.length === 0) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\treturn alts;\n\t\t}\n\t}\n\n\t/**\n\t * Two {@link DFAState} instances are equal if their ATN configuration sets\n\t * are the same. This method is used to see if a state already exists.\n\t *\n\t * <p>Because the number of alternatives and number of ATN configurations are\n\t * finite, there is a finite number of DFA states that can be processed.\n\t * This is necessary to show that the algorithm terminates.</p>\n\t *\n\t * <p>Cannot test the DFA state numbers here because in\n\t * {@link ParserATNSimulator//addDFAState} we need to know if any other state\n\t * exists that has this exact set of ATN configurations. The\n\t * {@link //stateNumber} is irrelevant.</p>\n\t */\n\tequals(other) {\n\t\t// compare set of ATN configurations in this set with other\n\t\treturn this === other ||\n\t\t\t\t(other instanceof DFAState &&\n\t\t\t\t\tthis.configs.equals(other.configs));\n\t}\n\n\ttoString() {\n\t\tlet s = \"\" + this.stateNumber + \":\" + this.configs;\n\t\tif(this.isAcceptState) {\n\t\t\ts = s + \"=>\";\n\t\t\tif (this.predicates !== null)\n\t\t\t\ts = s + this.predicates;\n\t\t\telse\n\t\t\t\ts = s + this.prediction;\n\t\t}\n\t\treturn s;\n\t}\n\n\thashCode() {\n\t\tconst hash = new HashCode();\n\t\thash.update(this.configs);\n\t\treturn hash.finish();\n\t}\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nimport DFAState from '../dfa/DFAState.js';\nimport ATNConfigSet from './ATNConfigSet.js';\nimport { getCachedPredictionContext } from '../context/PredictionContextUtils.js';\nimport HashMap from \"../misc/HashMap.js\";\n\nexport default class ATNSimulator {\n    constructor(atn, sharedContextCache) {\n        /**\n         * The context cache maps all PredictionContext objects that are ==\n         * to a single cached copy. This cache is shared across all contexts\n         * in all ATNConfigs in all DFA states.  We rebuild each ATNConfigSet\n         * to use only cached nodes/graphs in addDFAState(). We don't want to\n         * fill this during closure() since there are lots of contexts that\n         * pop up but are not used ever again. It also greatly slows down closure().\n         *\n         * <p>This cache makes a huge difference in memory and a little bit in speed.\n         * For the Java grammar on java.*, it dropped the memory requirements\n         * at the end from 25M to 16M. We don't store any of the full context\n         * graphs in the DFA because they are limited to local context only,\n         * but apparently there's a lot of repetition there as well. We optimize\n         * the config contexts before storing the config set in the DFA states\n         * by literally rebuilding them with cached subgraphs only.</p>\n         *\n         * <p>I tried a cache for use during closure operations, that was\n         * whacked after each adaptivePredict(). It cost a little bit\n         * more time I think and doesn't save on the overall footprint\n         * so it's not worth the complexity.</p>\n         */\n        this.atn = atn;\n        this.sharedContextCache = sharedContextCache;\n        return this;\n    }\n\n    getCachedContext(context) {\n        if (this.sharedContextCache ===null) {\n            return context;\n        }\n        const visited = new HashMap();\n        return getCachedPredictionContext(context, this.sharedContextCache, visited);\n    }\n}\n\n// Must distinguish between missing edge and edge we know leads nowhere///\nATNSimulator.ERROR = new DFAState(0x7FFFFFFF, new ATNConfigSet());\n\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport ATNConfigSet from \"./ATNConfigSet.js\";\nimport HashSet from \"../misc/HashSet.js\";\n\nexport default class OrderedATNConfigSet extends ATNConfigSet {\n    constructor() {\n        super();\n        this.configLookup = new HashSet();\n    }\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport DecisionState from \"../state/DecisionState.js\";\nimport ATNConfig from \"./ATNConfig.js\";\n\nexport default class LexerATNConfig extends ATNConfig {\n    constructor(params, config) {\n        super(params, config);\n\n        // This is the backing field for {@link //getLexerActionExecutor}.\n        const lexerActionExecutor = params.lexerActionExecutor || null;\n        this.lexerActionExecutor = lexerActionExecutor || (config!==null ? config.lexerActionExecutor : null);\n        this.passedThroughNonGreedyDecision = config!==null ? this.checkNonGreedyDecision(config, this.state) : false;\n        this.hashCodeForConfigSet = LexerATNConfig.prototype.hashCode;\n        this.equalsForConfigSet = LexerATNConfig.prototype.equals;\n        return this;\n    }\n\n    updateHashCode(hash) {\n        hash.update(this.state.stateNumber, this.alt, this.context, this.semanticContext, this.passedThroughNonGreedyDecision, this.lexerActionExecutor);\n    }\n\n    equals(other) {\n        return this === other ||\n            (other instanceof LexerATNConfig &&\n                this.passedThroughNonGreedyDecision === other.passedThroughNonGreedyDecision &&\n                (this.lexerActionExecutor ? this.lexerActionExecutor.equals(other.lexerActionExecutor) : !other.lexerActionExecutor) &&\n                super.equals(other));\n    }\n\n    checkNonGreedyDecision(source, target) {\n        return source.passedThroughNonGreedyDecision ||\n            (target instanceof DecisionState) && target.nonGreedy;\n    }\n}\n\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n/**\n * This implementation of {@link LexerAction} is used for tracking input offsets\n * for position-dependent actions within a {@link LexerActionExecutor}.\n *\n * <p>This action is not serialized as part of the ATN, and is only required for\n * position-dependent lexer actions which appear at a location other than the\n * end of a rule. For more information about DFA optimizations employed for\n * lexer actions, see {@link LexerActionExecutor//append} and\n * {@link LexerActionExecutor//fixOffsetBeforeMatch}.</p>\n *\n * Constructs a new indexed custom action by associating a character offset\n * with a {@link LexerAction}.\n *\n * <p>Note: This class is only required for lexer actions for which\n * {@link LexerAction//isPositionDependent} returns {@code true}.</p>\n *\n * @param offset The offset into the input {@link CharStream}, relative to\n * the token start index, at which the specified lexer action should be\n * executed.\n * @param action The lexer action to execute at a particular offset in the\n * input {@link CharStream}.\n */\nimport LexerAction from \"./LexerAction.js\";\n\n\nexport default class LexerIndexedCustomAction extends LexerAction {\n    constructor(offset, action) {\n        super(action.actionType);\n        this.offset = offset;\n        this.action = action;\n        this.isPositionDependent = true;\n    }\n\n    /**\n     * <p>This method calls {@link //execute} on the result of {@link //getAction}\n     * using the provided {@code lexer}.</p>\n     */\n    execute(lexer) {\n        // assume the input stream position was properly set by the calling code\n        this.action.execute(lexer);\n    }\n\n    updateHashCode(hash) {\n        hash.update(this.actionType, this.offset, this.action);\n    }\n\n    equals(other) {\n        if (this === other) {\n            return true;\n        } else if (! (other instanceof LexerIndexedCustomAction)) {\n            return false;\n        } else {\n            return this.offset === other.offset && this.action === other.action;\n        }\n    }\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nimport LexerIndexedCustomAction from '../action/LexerIndexedCustomAction.js';\nimport HashCode from \"../misc/HashCode.js\";\n\nexport default class LexerActionExecutor {\n\t/**\n\t * Represents an executor for a sequence of lexer actions which traversed during\n\t * the matching operation of a lexer rule (token).\n\t *\n\t * <p>The executor tracks position information for position-dependent lexer actions\n\t * efficiently, ensuring that actions appearing only at the end of the rule do\n\t * not cause bloating of the {@link DFA} created for the lexer.</p>\n\t */\n\tconstructor(lexerActions) {\n\t\tthis.lexerActions = lexerActions === null ? [] : lexerActions;\n\t\t/**\n\t\t * Caches the result of {@link //hashCode} since the hash code is an element\n\t\t * of the performance-critical {@link LexerATNConfig//hashCode} operation\n\t\t */\n\t\tthis.cachedHashCode = HashCode.hashStuff(lexerActions); // \"\".join([str(la) for la in\n\t\t// lexerActions]))\n\t\treturn this;\n\t}\n\n\t/**\n\t * Creates a {@link LexerActionExecutor} which encodes the current offset\n\t * for position-dependent lexer actions.\n\t *\n\t * <p>Normally, when the executor encounters lexer actions where\n\t * {@link LexerAction//isPositionDependent} returns {@code true}, it calls\n\t * {@link IntStream//seek} on the input {@link CharStream} to set the input\n\t * position to the <em>end</em> of the current token. This behavior provides\n\t * for efficient DFA representation of lexer actions which appear at the end\n\t * of a lexer rule, even when the lexer rule matches a variable number of\n\t * characters.</p>\n\t *\n\t * <p>Prior to traversing a match transition in the ATN, the current offset\n\t * from the token start index is assigned to all position-dependent lexer\n\t * actions which have not already been assigned a fixed offset. By storing\n\t * the offsets relative to the token start index, the DFA representation of\n\t * lexer actions which appear in the middle of tokens remains efficient due\n\t * to sharing among tokens of the same length, regardless of their absolute\n\t * position in the input stream.</p>\n\t *\n\t * <p>If the current executor already has offsets assigned to all\n\t * position-dependent lexer actions, the method returns {@code this}.</p>\n\t *\n\t * @param offset The current offset to assign to all position-dependent\n\t * lexer actions which do not already have offsets assigned.\n\t *\n\t * @return {LexerActionExecutor} A {@link LexerActionExecutor} which stores input stream offsets\n\t * for all position-dependent lexer actions.\n\t */\n\tfixOffsetBeforeMatch(offset) {\n\t\tlet updatedLexerActions = null;\n\t\tfor (let i = 0; i < this.lexerActions.length; i++) {\n\t\t\tif (this.lexerActions[i].isPositionDependent &&\n\t\t\t\t\t!(this.lexerActions[i] instanceof LexerIndexedCustomAction)) {\n\t\t\t\tif (updatedLexerActions === null) {\n\t\t\t\t\tupdatedLexerActions = this.lexerActions.concat([]);\n\t\t\t\t}\n\t\t\t\tupdatedLexerActions[i] = new LexerIndexedCustomAction(offset,\n\t\t\t\t\t\tthis.lexerActions[i]);\n\t\t\t}\n\t\t}\n\t\tif (updatedLexerActions === null) {\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn new LexerActionExecutor(updatedLexerActions);\n\t\t}\n\t}\n\n\t/**\n\t * Execute the actions encapsulated by this executor within the context of a\n\t * particular {@link Lexer}.\n\t *\n\t * <p>This method calls {@link IntStream//seek} to set the position of the\n\t * {@code input} {@link CharStream} prior to calling\n\t * {@link LexerAction//execute} on a position-dependent action. Before the\n\t * method returns, the input position will be restored to the same position\n\t * it was in when the method was invoked.</p>\n\t *\n\t * @param lexer The lexer instance.\n\t * @param input The input stream which is the source for the current token.\n\t * When this method is called, the current {@link IntStream//index} for\n\t * {@code input} should be the start of the following token, i.e. 1\n\t * character past the end of the current token.\n\t * @param startIndex The token start index. This value may be passed to\n\t * {@link IntStream//seek} to set the {@code input} position to the beginning\n\t * of the token.\n\t */\n\texecute(lexer, input, startIndex) {\n\t\tlet requiresSeek = false;\n\t\tconst stopIndex = input.index;\n\t\ttry {\n\t\t\tfor (let i = 0; i < this.lexerActions.length; i++) {\n\t\t\t\tlet lexerAction = this.lexerActions[i];\n\t\t\t\tif (lexerAction instanceof LexerIndexedCustomAction) {\n\t\t\t\t\tconst offset = lexerAction.offset;\n\t\t\t\t\tinput.seek(startIndex + offset);\n\t\t\t\t\tlexerAction = lexerAction.action;\n\t\t\t\t\trequiresSeek = (startIndex + offset) !== stopIndex;\n\t\t\t\t} else if (lexerAction.isPositionDependent) {\n\t\t\t\t\tinput.seek(stopIndex);\n\t\t\t\t\trequiresSeek = false;\n\t\t\t\t}\n\t\t\t\tlexerAction.execute(lexer);\n\t\t\t}\n\t\t} finally {\n\t\t\tif (requiresSeek) {\n\t\t\t\tinput.seek(stopIndex);\n\t\t\t}\n\t\t}\n\t}\n\n\thashCode() {\n\t\treturn this.cachedHashCode;\n\t}\n\n\tupdateHashCode(hash) {\n\t\thash.update(this.cachedHashCode);\n\t}\n\n\tequals(other) {\n\t\tif (this === other) {\n\t\t\treturn true;\n\t\t} else if (!(other instanceof LexerActionExecutor)) {\n\t\t\treturn false;\n\t\t} else if (this.cachedHashCode != other.cachedHashCode) {\n\t\t\treturn false;\n\t\t} else if (this.lexerActions.length != other.lexerActions.length) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\tconst numActions = this.lexerActions.length\n\t\t\tfor (let idx = 0; idx < numActions; ++idx) {\n\t\t\t\tif (!this.lexerActions[idx].equals(other.lexerActions[idx])) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * Creates a {@link LexerActionExecutor} which executes the actions for\n\t * the input {@code lexerActionExecutor} followed by a specified\n\t * {@code lexerAction}.\n\t *\n\t * @param lexerActionExecutor The executor for actions already traversed by\n\t * the lexer while matching a token within a particular\n\t * {@link LexerATNConfig}. If this is {@code null}, the method behaves as\n\t * though it were an empty executor.\n\t * @param lexerAction The lexer action to execute after the actions\n\t * specified in {@code lexerActionExecutor}.\n\t *\n\t * @return {LexerActionExecutor} A {@link LexerActionExecutor} for executing the combine actions\n\t * of {@code lexerActionExecutor} and {@code lexerAction}.\n\t */\n\tstatic append(lexerActionExecutor, lexerAction) {\n\t\tif (lexerActionExecutor === null) {\n\t\t\treturn new LexerActionExecutor([ lexerAction ]);\n\t\t}\n\t\tconst lexerActions = lexerActionExecutor.lexerActions.concat([ lexerAction ]);\n\t\treturn new LexerActionExecutor(lexerActions);\n\t}\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nimport Token from '../Token.js';\nimport Lexer from './../Lexer.js';\nimport ATN from './ATN.js';\nimport ATNSimulator from './ATNSimulator.js';\nimport DFAState from '../dfa/DFAState.js';\nimport OrderedATNConfigSet from './OrderedATNConfigSet.js';\nimport PredictionContext from '../context/PredictionContext.js';\nimport SingletonPredictionContext from '../context/SingletonPredictionContext.js';\nimport RuleStopState from '../state/RuleStopState.js';\nimport LexerATNConfig from './LexerATNConfig.js';\nimport Transition from '../transition/Transition.js';\nimport LexerActionExecutor from './LexerActionExecutor.js';\nimport LexerNoViableAltException from '../error/LexerNoViableAltException.js';\n\nfunction resetSimState(sim) {\n    sim.index = -1;\n    sim.line = 0;\n    sim.column = -1;\n    sim.dfaState = null;\n}\n\nclass SimState {\n    constructor() {\n        resetSimState(this);\n    }\n\n    reset() {\n        resetSimState(this);\n    }\n}\n\nexport default class LexerATNSimulator extends ATNSimulator {\n    /**\n     * When we hit an accept state in either the DFA or the ATN, we\n     * have to notify the character stream to start buffering characters\n     * via {@link IntStream//mark} and record the current state. The current sim state\n     * includes the current index into the input, the current line,\n     * and current character position in that line. Note that the Lexer is\n     * tracking the starting line and characterization of the token. These\n     * variables track the \"state\" of the simulator when it hits an accept state.\n     *\n     * <p>We track these variables separately for the DFA and ATN simulation\n     * because the DFA simulation often has to fail over to the ATN\n     * simulation. If the ATN simulation fails, we need the DFA to fall\n     * back to its previously accepted state, if any. If the ATN succeeds,\n     * then the ATN does the accept and the DFA simulator that invoked it\n     * can simply return the predicted token type.</p>\n     */\n    constructor(recog, atn, decisionToDFA, sharedContextCache) {\n        super(atn, sharedContextCache);\n        this.decisionToDFA = decisionToDFA;\n        this.recog = recog;\n        /**\n         * The current token's starting index into the character stream.\n         * Shared across DFA to ATN simulation in case the ATN fails and the\n         * DFA did not have a previous accept state. In this case, we use the\n         * ATN-generated exception object\n         */\n        this.startIndex = -1;\n        // line number 1..n within the input///\n        this.line = 1;\n        /**\n         * The index of the character relative to the beginning of the line\n         * 0..n-1\n         */\n        this.column = 0;\n        this.mode = Lexer.DEFAULT_MODE;\n        /**\n         * Used during DFA/ATN exec to record the most recent accept configuration\n         * info\n         */\n        this.prevAccept = new SimState();\n    }\n\n    copyState(simulator) {\n        this.column = simulator.column;\n        this.line = simulator.line;\n        this.mode = simulator.mode;\n        this.startIndex = simulator.startIndex;\n    }\n\n    match(input, mode) {\n        this.mode = mode;\n        const mark = input.mark();\n        try {\n            this.startIndex = input.index;\n            this.prevAccept.reset();\n            const dfa = this.decisionToDFA[mode];\n            if (dfa.s0 === null) {\n                return this.matchATN(input);\n            } else {\n                return this.execATN(input, dfa.s0);\n            }\n        } finally {\n            input.release(mark);\n        }\n    }\n\n    reset() {\n        this.prevAccept.reset();\n        this.startIndex = -1;\n        this.line = 1;\n        this.column = 0;\n        this.mode = Lexer.DEFAULT_MODE;\n    }\n\n    matchATN(input) {\n        const startState = this.atn.modeToStartState[this.mode];\n\n        if (LexerATNSimulator.debug) {\n            console.log(\"matchATN mode \" + this.mode + \" start: \" + startState);\n        }\n        const old_mode = this.mode;\n        const s0_closure = this.computeStartState(input, startState);\n        const suppressEdge = s0_closure.hasSemanticContext;\n        s0_closure.hasSemanticContext = false;\n\n        const next = this.addDFAState(s0_closure);\n        if (!suppressEdge) {\n            this.decisionToDFA[this.mode].s0 = next;\n        }\n\n        const predict = this.execATN(input, next);\n\n        if (LexerATNSimulator.debug) {\n            console.log(\"DFA after matchATN: \" + this.decisionToDFA[old_mode].toLexerString());\n        }\n        return predict;\n    }\n\n    execATN(input, ds0) {\n        if (LexerATNSimulator.debug) {\n            console.log(\"start state closure=\" + ds0.configs);\n        }\n        if (ds0.isAcceptState) {\n            // allow zero-length tokens\n            this.captureSimState(this.prevAccept, input, ds0);\n        }\n        let t = input.LA(1);\n        let s = ds0; // s is current/from DFA state\n\n        for (; ;) { // while more work\n            if (LexerATNSimulator.debug) {\n                console.log(\"execATN loop starting closure: \" + s.configs);\n            }\n\n            /**\n             * As we move src->trg, src->trg, we keep track of the previous trg to\n             * avoid looking up the DFA state again, which is expensive.\n             * If the previous target was already part of the DFA, we might\n             * be able to avoid doing a reach operation upon t. If s!=null,\n             * it means that semantic predicates didn't prevent us from\n             * creating a DFA state. Once we know s!=null, we check to see if\n             * the DFA state has an edge already for t. If so, we can just reuse\n             * it's configuration set; there's no point in re-computing it.\n             * This is kind of like doing DFA simulation within the ATN\n             * simulation because DFA simulation is really just a way to avoid\n             * computing reach/closure sets. Technically, once we know that\n             * we have a previously added DFA state, we could jump over to\n             * the DFA simulator. But, that would mean popping back and forth\n             * a lot and making things more complicated algorithmically.\n             * This optimization makes a lot of sense for loops within DFA.\n             * A character will take us back to an existing DFA state\n             * that already has lots of edges out of it. e.g., .* in comments.\n             * print(\"Target for:\" + str(s) + \" and:\" + str(t))\n             */\n            let target = this.getExistingTargetState(s, t);\n            // print(\"Existing:\" + str(target))\n            if (target === null) {\n                target = this.computeTargetState(input, s, t);\n                // print(\"Computed:\" + str(target))\n            }\n            if (target === ATNSimulator.ERROR) {\n                break;\n            }\n            // If this is a consumable input element, make sure to consume before\n            // capturing the accept state so the input index, line, and char\n            // position accurately reflect the state of the interpreter at the\n            // end of the token.\n            if (t !== Token.EOF) {\n                this.consume(input);\n            }\n            if (target.isAcceptState) {\n                this.captureSimState(this.prevAccept, input, target);\n                if (t === Token.EOF) {\n                    break;\n                }\n            }\n            t = input.LA(1);\n            s = target; // flip; current DFA target becomes new src/from state\n        }\n        return this.failOrAccept(this.prevAccept, input, s.configs, t);\n    }\n\n    /**\n     * Get an existing target state for an edge in the DFA. If the target state\n     * for the edge has not yet been computed or is otherwise not available,\n     * this method returns {@code null}.\n     *\n     * @param s The current DFA state\n     * @param t The next input symbol\n     * @return The existing target DFA state for the given input symbol\n     * {@code t}, or {@code null} if the target state for this edge is not\n     * already cached\n     */\n    getExistingTargetState(s, t) {\n        if (s.edges === null || t < LexerATNSimulator.MIN_DFA_EDGE || t > LexerATNSimulator.MAX_DFA_EDGE) {\n            return null;\n        }\n\n        let target = s.edges[t - LexerATNSimulator.MIN_DFA_EDGE];\n        if (target === undefined) {\n            target = null;\n        }\n        if (LexerATNSimulator.debug && target !== null) {\n            console.log(\"reuse state \" + s.stateNumber + \" edge to \" + target.stateNumber);\n        }\n        return target;\n    }\n\n    /**\n     * Compute a target state for an edge in the DFA, and attempt to add the\n     * computed state and corresponding edge to the DFA.\n     *\n     * @param input The input stream\n     * @param s The current DFA state\n     * @param t The next input symbol\n     *\n     * @return The computed target DFA state for the given input symbol\n     * {@code t}. If {@code t} does not lead to a valid DFA state, this method\n     * returns {@link //ERROR}.\n     */\n    computeTargetState(input, s, t) {\n        const reach = new OrderedATNConfigSet();\n        // if we don't find an existing DFA state\n        // Fill reach starting from closure, following t transitions\n        this.getReachableConfigSet(input, s.configs, reach, t);\n\n        if (reach.items.length === 0) { // we got nowhere on t from s\n            if (!reach.hasSemanticContext) {\n                // we got nowhere on t, don't throw out this knowledge; it'd\n                // cause a failover from DFA later.\n                this.addDFAEdge(s, t, ATNSimulator.ERROR);\n            }\n            // stop when we can't match any more char\n            return ATNSimulator.ERROR;\n        }\n        // Add an edge from s to target DFA found/created for reach\n        return this.addDFAEdge(s, t, null, reach);\n    }\n\n    failOrAccept(prevAccept, input, reach, t) {\n        if (this.prevAccept.dfaState !== null) {\n            const lexerActionExecutor = prevAccept.dfaState.lexerActionExecutor;\n            this.accept(input, lexerActionExecutor, this.startIndex,\n                prevAccept.index, prevAccept.line, prevAccept.column);\n            return prevAccept.dfaState.prediction;\n        } else {\n            // if no accept and EOF is first char, return EOF\n            if (t === Token.EOF && input.index === this.startIndex) {\n                return Token.EOF;\n            }\n            throw new LexerNoViableAltException(this.recog, input, this.startIndex, reach);\n        }\n    }\n\n    /**\n     * Given a starting configuration set, figure out all ATN configurations\n     * we can reach upon input {@code t}. Parameter {@code reach} is a return\n     * parameter.\n     */\n    getReachableConfigSet(input, closure, reach, t) {\n        // this is used to skip processing for configs which have a lower priority\n        // than a config that already reached an accept state for the same rule\n        let skipAlt = ATN.INVALID_ALT_NUMBER;\n        for (let i = 0; i < closure.items.length; i++) {\n            const cfg = closure.items[i];\n            const currentAltReachedAcceptState = (cfg.alt === skipAlt);\n            if (currentAltReachedAcceptState && cfg.passedThroughNonGreedyDecision) {\n                continue;\n            }\n            if (LexerATNSimulator.debug) {\n                console.log(\"testing %s at %s\\n\", this.getTokenName(t), cfg\n                    .toString(this.recog, true));\n            }\n            for (let j = 0; j < cfg.state.transitions.length; j++) {\n                const trans = cfg.state.transitions[j]; // for each transition\n                const target = this.getReachableTarget(trans, t);\n                if (target !== null) {\n                    let lexerActionExecutor = cfg.lexerActionExecutor;\n                    if (lexerActionExecutor !== null) {\n                        lexerActionExecutor = lexerActionExecutor.fixOffsetBeforeMatch(input.index - this.startIndex);\n                    }\n                    const treatEofAsEpsilon = (t === Token.EOF);\n                    const config = new LexerATNConfig({state: target, lexerActionExecutor: lexerActionExecutor}, cfg);\n                    if (this.closure(input, config, reach,\n                        currentAltReachedAcceptState, true, treatEofAsEpsilon)) {\n                        // any remaining configs for this alt have a lower priority\n                        // than the one that just reached an accept state.\n                        skipAlt = cfg.alt;\n                    }\n                }\n            }\n        }\n    }\n\n    accept(input, lexerActionExecutor, startIndex, index, line, charPos) {\n        if (LexerATNSimulator.debug) {\n            console.log(\"ACTION %s\\n\", lexerActionExecutor);\n        }\n        // seek to after last char in token\n        input.seek(index);\n        this.line = line;\n        this.column = charPos;\n        if (lexerActionExecutor !== null && this.recog !== null) {\n            lexerActionExecutor.execute(this.recog, input, startIndex);\n        }\n    }\n\n    getReachableTarget(trans, t) {\n        if (trans.matches(t, 0, Lexer.MAX_CHAR_VALUE)) {\n            return trans.target;\n        } else {\n            return null;\n        }\n    }\n\n    computeStartState(input, p) {\n        const initialContext = PredictionContext.EMPTY;\n        const configs = new OrderedATNConfigSet();\n        for (let i = 0; i < p.transitions.length; i++) {\n            const target = p.transitions[i].target;\n            const cfg = new LexerATNConfig({state: target, alt: i + 1, context: initialContext}, null);\n            this.closure(input, cfg, configs, false, false, false);\n        }\n        return configs;\n    }\n\n    /**\n     * Since the alternatives within any lexer decision are ordered by\n     * preference, this method stops pursuing the closure as soon as an accept\n     * state is reached. After the first accept state is reached by depth-first\n     * search from {@code config}, all other (potentially reachable) states for\n     * this rule would have a lower priority.\n     *\n     * @return {Boolean} {@code true} if an accept state is reached, otherwise\n     * {@code false}.\n     */\n    closure(input, config, configs,\n            currentAltReachedAcceptState, speculative, treatEofAsEpsilon) {\n        let cfg = null;\n        if (LexerATNSimulator.debug) {\n            console.log(\"closure(\" + config.toString(this.recog, true) + \")\");\n        }\n        if (config.state instanceof RuleStopState) {\n            if (LexerATNSimulator.debug) {\n                if (this.recog !== null) {\n                    console.log(\"closure at %s rule stop %s\\n\", this.recog.ruleNames[config.state.ruleIndex], config);\n                } else {\n                    console.log(\"closure at rule stop %s\\n\", config);\n                }\n            }\n            if (config.context === null || config.context.hasEmptyPath()) {\n                if (config.context === null || config.context.isEmpty()) {\n                    configs.add(config);\n                    return true;\n                } else {\n                    configs.add(new LexerATNConfig({state: config.state, context: PredictionContext.EMPTY}, config));\n                    currentAltReachedAcceptState = true;\n                }\n            }\n            if (config.context !== null && !config.context.isEmpty()) {\n                for (let i = 0; i < config.context.length; i++) {\n                    if (config.context.getReturnState(i) !== PredictionContext.EMPTY_RETURN_STATE) {\n                        const newContext = config.context.getParent(i); // \"pop\" return state\n                        const returnState = this.atn.states[config.context.getReturnState(i)];\n                        cfg = new LexerATNConfig({state: returnState, context: newContext}, config);\n                        currentAltReachedAcceptState = this.closure(input, cfg,\n                            configs, currentAltReachedAcceptState, speculative,\n                            treatEofAsEpsilon);\n                    }\n                }\n            }\n            return currentAltReachedAcceptState;\n        }\n        // optimization\n        if (!config.state.epsilonOnlyTransitions) {\n            if (!currentAltReachedAcceptState || !config.passedThroughNonGreedyDecision) {\n                configs.add(config);\n            }\n        }\n        for (let j = 0; j < config.state.transitions.length; j++) {\n            const trans = config.state.transitions[j];\n            cfg = this.getEpsilonTarget(input, config, trans, configs, speculative, treatEofAsEpsilon);\n            if (cfg !== null) {\n                currentAltReachedAcceptState = this.closure(input, cfg, configs,\n                    currentAltReachedAcceptState, speculative, treatEofAsEpsilon);\n            }\n        }\n        return currentAltReachedAcceptState;\n    }\n\n    // side-effect: can alter configs.hasSemanticContext\n    getEpsilonTarget(input, config, trans,\n                     configs, speculative, treatEofAsEpsilon) {\n        let cfg = null;\n        if (trans.serializationType === Transition.RULE) {\n            const newContext = SingletonPredictionContext.create(config.context, trans.followState.stateNumber);\n            cfg = new LexerATNConfig({state: trans.target, context: newContext}, config);\n        } else if (trans.serializationType === Transition.PRECEDENCE) {\n            throw \"Precedence predicates are not supported in lexers.\";\n        } else if (trans.serializationType === Transition.PREDICATE) {\n            // Track traversing semantic predicates. If we traverse,\n            // we cannot add a DFA state for this \"reach\" computation\n            // because the DFA would not test the predicate again in the\n            // future. Rather than creating collections of semantic predicates\n            // like v3 and testing them on prediction, v4 will test them on the\n            // fly all the time using the ATN not the DFA. This is slower but\n            // semantically it's not used that often. One of the key elements to\n            // this predicate mechanism is not adding DFA states that see\n            // predicates immediately afterwards in the ATN. For example,\n\n            // a : ID {p1}? | ID {p2}? ;\n\n            // should create the start state for rule 'a' (to save start state\n            // competition), but should not create target of ID state. The\n            // collection of ATN states the following ID references includes\n            // states reached by traversing predicates. Since this is when we\n            // test them, we cannot cash the DFA state target of ID.\n\n            if (LexerATNSimulator.debug) {\n                console.log(\"EVAL rule \" + trans.ruleIndex + \":\" + trans.predIndex);\n            }\n            configs.hasSemanticContext = true;\n            if (this.evaluatePredicate(input, trans.ruleIndex, trans.predIndex, speculative)) {\n                cfg = new LexerATNConfig({state: trans.target}, config);\n            }\n        } else if (trans.serializationType === Transition.ACTION) {\n            if (config.context === null || config.context.hasEmptyPath()) {\n                // execute actions anywhere in the start rule for a token.\n                //\n                // TODO: if the entry rule is invoked recursively, some\n                // actions may be executed during the recursive call. The\n                // problem can appear when hasEmptyPath() is true but\n                // isEmpty() is false. In this case, the config needs to be\n                // split into two contexts - one with just the empty path\n                // and another with everything but the empty path.\n                // Unfortunately, the current algorithm does not allow\n                // getEpsilonTarget to return two configurations, so\n                // additional modifications are needed before we can support\n                // the split operation.\n                const lexerActionExecutor = LexerActionExecutor.append(config.lexerActionExecutor,\n                    this.atn.lexerActions[trans.actionIndex]);\n                cfg = new LexerATNConfig({state: trans.target, lexerActionExecutor: lexerActionExecutor}, config);\n            } else {\n                // ignore actions in referenced rules\n                cfg = new LexerATNConfig({state: trans.target}, config);\n            }\n        } else if (trans.serializationType === Transition.EPSILON) {\n            cfg = new LexerATNConfig({state: trans.target}, config);\n        } else if (trans.serializationType === Transition.ATOM ||\n            trans.serializationType === Transition.RANGE ||\n            trans.serializationType === Transition.SET) {\n            if (treatEofAsEpsilon) {\n                if (trans.matches(Token.EOF, 0, Lexer.MAX_CHAR_VALUE)) {\n                    cfg = new LexerATNConfig({state: trans.target}, config);\n                }\n            }\n        }\n        return cfg;\n    }\n\n    /**\n     * Evaluate a predicate specified in the lexer.\n     *\n     * <p>If {@code speculative} is {@code true}, this method was called before\n     * {@link //consume} for the matched character. This method should call\n     * {@link //consume} before evaluating the predicate to ensure position\n     * sensitive values, including {@link Lexer//getText}, {@link Lexer//getLine},\n     * and {@link Lexer//getcolumn}, properly reflect the current\n     * lexer state. This method should restore {@code input} and the simulator\n     * to the original state before returning (i.e. undo the actions made by the\n     * call to {@link //consume}.</p>\n     *\n     * @param input The input stream.\n     * @param ruleIndex The rule containing the predicate.\n     * @param predIndex The index of the predicate within the rule.\n     * @param speculative {@code true} if the current index in {@code input} is\n     * one character before the predicate's location.\n     *\n     * @return {@code true} if the specified predicate evaluates to\n     * {@code true}.\n     */\n    evaluatePredicate(input, ruleIndex,\n                      predIndex, speculative) {\n        // assume true if no recognizer was provided\n        if (this.recog === null) {\n            return true;\n        }\n        if (!speculative) {\n            return this.recog.sempred(null, ruleIndex, predIndex);\n        }\n        const savedcolumn = this.column;\n        const savedLine = this.line;\n        const index = input.index;\n        const marker = input.mark();\n        try {\n            this.consume(input);\n            return this.recog.sempred(null, ruleIndex, predIndex);\n        } finally {\n            this.column = savedcolumn;\n            this.line = savedLine;\n            input.seek(index);\n            input.release(marker);\n        }\n    }\n\n    captureSimState(settings, input, dfaState) {\n        settings.index = input.index;\n        settings.line = this.line;\n        settings.column = this.column;\n        settings.dfaState = dfaState;\n    }\n\n    addDFAEdge(from_, tk, to, cfgs) {\n        if (to === undefined) {\n            to = null;\n        }\n        if (cfgs === undefined) {\n            cfgs = null;\n        }\n        if (to === null && cfgs !== null) {\n            // leading to this call, ATNConfigSet.hasSemanticContext is used as a\n            // marker indicating dynamic predicate evaluation makes this edge\n            // dependent on the specific input sequence, so the static edge in the\n            // DFA should be omitted. The target DFAState is still created since\n            // execATN has the ability to resynchronize with the DFA state cache\n            // following the predicate evaluation step.\n            //\n            // TJP notes: next time through the DFA, we see a pred again and eval.\n            // If that gets us to a previously created (but dangling) DFA\n            // state, we can continue in pure DFA mode from there.\n            // /\n            const suppressEdge = cfgs.hasSemanticContext;\n            cfgs.hasSemanticContext = false;\n\n            to = this.addDFAState(cfgs);\n\n            if (suppressEdge) {\n                return to;\n            }\n        }\n        // add the edge\n        if (tk < LexerATNSimulator.MIN_DFA_EDGE || tk > LexerATNSimulator.MAX_DFA_EDGE) {\n            // Only track edges within the DFA bounds\n            return to;\n        }\n        if (LexerATNSimulator.debug) {\n            console.log(\"EDGE \" + from_ + \" -> \" + to + \" upon \" + tk);\n        }\n        if (from_.edges === null) {\n            // make room for tokens 1..n and -1 masquerading as index 0\n            from_.edges = [];\n        }\n        from_.edges[tk - LexerATNSimulator.MIN_DFA_EDGE] = to; // connect\n\n        return to;\n    }\n\n    /**\n     * Add a new DFA state if there isn't one with this set of\n     * configurations already. This method also detects the first\n     * configuration containing an ATN rule stop state. Later, when\n     * traversing the DFA, we will know which rule to accept.\n     */\n    addDFAState(configs) {\n        const proposed = new DFAState(null, configs);\n        let firstConfigWithRuleStopState = null;\n        for (let i = 0; i < configs.items.length; i++) {\n            const cfg = configs.items[i];\n            if (cfg.state instanceof RuleStopState) {\n                firstConfigWithRuleStopState = cfg;\n                break;\n            }\n        }\n        if (firstConfigWithRuleStopState !== null) {\n            proposed.isAcceptState = true;\n            proposed.lexerActionExecutor = firstConfigWithRuleStopState.lexerActionExecutor;\n            proposed.prediction = this.atn.ruleToTokenType[firstConfigWithRuleStopState.state.ruleIndex];\n        }\n        const dfa = this.decisionToDFA[this.mode];\n        const existing = dfa.states.get(proposed);\n        if (existing !== null) {\n            return existing;\n        }\n        const newState = proposed;\n        newState.stateNumber = dfa.states.length;\n        configs.setReadonly(true);\n        newState.configs = configs;\n        dfa.states.add(newState);\n        return newState;\n    }\n\n    getDFA(mode) {\n        return this.decisionToDFA[mode];\n    }\n\n// Get the text matched so far for the current token.\n    getText(input) {\n        // index is first lookahead char, don't include.\n        return input.getText(this.startIndex, input.index - 1);\n    }\n\n    consume(input) {\n        const curChar = input.LA(1);\n        if (curChar === \"\\n\".charCodeAt(0)) {\n            this.line += 1;\n            this.column = 0;\n        } else {\n            this.column += 1;\n        }\n        input.consume();\n    }\n\n    getTokenName(tt) {\n        if (tt === -1) {\n            return \"EOF\";\n        } else {\n            return \"'\" + String.fromCharCode(tt) + \"'\";\n        }\n    }\n}\n\nLexerATNSimulator.debug = false;\nLexerATNSimulator.dfa_debug = false;\n\nLexerATNSimulator.MIN_DFA_EDGE = 0;\nLexerATNSimulator.MAX_DFA_EDGE = 127; // forces unicode to stay in ATN\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n/**\n * Map a predicate to a predicted alternative.\n */\nexport default class PredPrediction {\n    constructor(pred, alt) {\n        this.alt = alt;\n        this.pred = pred;\n    }\n\n    toString() {\n        return \"(\" + this.pred + \", \" + this.alt + \")\";\n    }\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nexport default class AltDict {\n\n    constructor() {\n        this.data = {};\n    }\n\n    get(key) {\n        return this.data[\"k-\" + key] || null;\n    }\n\n    set(key, value) {\n        this.data[\"k-\" + key] = value;\n    }\n\n    values() {\n        return Object.keys(this.data).filter(key => key.startsWith(\"k-\")).map(key => this.data[key], this);\n    }\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nimport ATN from './ATN.js';\nimport RuleStopState from '../state/RuleStopState.js';\nimport ATNConfigSet from './ATNConfigSet.js';\nimport ATNConfig from './ATNConfig.js';\nimport SemanticContext from './SemanticContext.js';\nimport BitSet from \"../misc/BitSet.js\";\nimport AltDict from \"../misc/AltDict.js\";\nimport HashCode from \"../misc/HashCode.js\";\nimport HashMap from \"../misc/HashMap.js\";\n\n/**\n * This enumeration defines the prediction modes available in ANTLR 4 along with\n * utility methods for analyzing configuration sets for conflicts and/or\n * ambiguities.\n */\nconst PredictionMode = {\n    /**\n     * The SLL(*) prediction mode. This prediction mode ignores the current\n     * parser context when making predictions. This is the fastest prediction\n     * mode, and provides correct results for many grammars. This prediction\n     * mode is more powerful than the prediction mode provided by ANTLR 3, but\n     * may result in syntax errors for grammar and input combinations which are\n     * not SLL.\n     *\n     * <p>\n     * When using this prediction mode, the parser will either return a correct\n     * parse tree (i.e. the same parse tree that would be returned with the\n     * {@link //LL} prediction mode), or it will report a syntax error. If a\n     * syntax error is encountered when using the {@link //SLL} prediction mode,\n     * it may be due to either an actual syntax error in the input or indicate\n     * that the particular combination of grammar and input requires the more\n     * powerful {@link //LL} prediction abilities to complete successfully.</p>\n     *\n     * <p>\n     * This prediction mode does not provide any guarantees for prediction\n     * behavior for syntactically-incorrect inputs.</p>\n     */\n    SLL: 0,\n\n    /**\n     * The LL(*) prediction mode. This prediction mode allows the current parser\n     * context to be used for resolving SLL conflicts that occur during\n     * prediction. This is the fastest prediction mode that guarantees correct\n     * parse results for all combinations of grammars with syntactically correct\n     * inputs.\n     *\n     * <p>\n     * When using this prediction mode, the parser will make correct decisions\n     * for all syntactically-correct grammar and input combinations. However, in\n     * cases where the grammar is truly ambiguous this prediction mode might not\n     * report a precise answer for <em>exactly which</em> alternatives are\n     * ambiguous.</p>\n     *\n     * <p>\n     * This prediction mode does not provide any guarantees for prediction\n     * behavior for syntactically-incorrect inputs.</p>\n     */\n    LL: 1,\n\n    /**\n     *\n     * The LL(*) prediction mode with exact ambiguity detection. In addition to\n     * the correctness guarantees provided by the {@link //LL} prediction mode,\n     * this prediction mode instructs the prediction algorithm to determine the\n     * complete and exact set of ambiguous alternatives for every ambiguous\n     * decision encountered while parsing.\n     *\n     * <p>\n     * This prediction mode may be used for diagnosing ambiguities during\n     * grammar development. Due to the performance overhead of calculating sets\n     * of ambiguous alternatives, this prediction mode should be avoided when\n     * the exact results are not necessary.</p>\n     *\n     * <p>\n     * This prediction mode does not provide any guarantees for prediction\n     * behavior for syntactically-incorrect inputs.</p>\n     */\n    LL_EXACT_AMBIG_DETECTION: 2,\n\n    /**\n     *\n     * Computes the SLL prediction termination condition.\n     *\n     * <p>\n     * This method computes the SLL prediction termination condition for both of\n     * the following cases.</p>\n     *\n     * <ul>\n     * <li>The usual SLL+LL fallback upon SLL conflict</li>\n     * <li>Pure SLL without LL fallback</li>\n     * </ul>\n     *\n     * <p><strong>COMBINED SLL+LL PARSING</strong></p>\n     *\n     * <p>When LL-fallback is enabled upon SLL conflict, correct predictions are\n     * ensured regardless of how the termination condition is computed by this\n     * method. Due to the substantially higher cost of LL prediction, the\n     * prediction should only fall back to LL when the additional lookahead\n     * cannot lead to a unique SLL prediction.</p>\n     *\n     * <p>Assuming combined SLL+LL parsing, an SLL configuration set with only\n     * conflicting subsets should fall back to full LL, even if the\n     * configuration sets don't resolve to the same alternative (e.g.\n     * {@code {1,2}} and {@code {3,4}}. If there is at least one non-conflicting\n     * configuration, SLL could continue with the hopes that more lookahead will\n     * resolve via one of those non-conflicting configurations.</p>\n     *\n     * <p>Here's the prediction termination rule them: SLL (for SLL+LL parsing)\n     * stops when it sees only conflicting configuration subsets. In contrast,\n     * full LL keeps going when there is uncertainty.</p>\n     *\n     * <p><strong>HEURISTIC</strong></p>\n     *\n     * <p>As a heuristic, we stop prediction when we see any conflicting subset\n     * unless we see a state that only has one alternative associated with it.\n     * The single-alt-state thing lets prediction continue upon rules like\n     * (otherwise, it would admit defeat too soon):</p>\n     *\n     * <p>{@code [12|1|[], 6|2|[], 12|2|[]]. s : (ID | ID ID?) ';' ;}</p>\n     *\n     * <p>When the ATN simulation reaches the state before {@code ';'}, it has a\n     * DFA state that looks like: {@code [12|1|[], 6|2|[], 12|2|[]]}. Naturally\n     * {@code 12|1|[]} and {@code 12|2|[]} conflict, but we cannot stop\n     * processing this node because alternative to has another way to continue,\n     * via {@code [6|2|[]]}.</p>\n     *\n     * <p>It also let's us continue for this rule:</p>\n     *\n     * <p>{@code [1|1|[], 1|2|[], 8|3|[]] a : A | A | A B ;}</p>\n     *\n     * <p>After matching input A, we reach the stop state for rule A, state 1.\n     * State 8 is the state right before B. Clearly alternatives 1 and 2\n     * conflict and no amount of further lookahead will separate the two.\n     * However, alternative 3 will be able to continue and so we do not stop\n     * working on this state. In the previous example, we're concerned with\n     * states associated with the conflicting alternatives. Here alt 3 is not\n     * associated with the conflicting configs, but since we can continue\n     * looking for input reasonably, don't declare the state done.</p>\n     *\n     * <p><strong>PURE SLL PARSING</strong></p>\n     *\n     * <p>To handle pure SLL parsing, all we have to do is make sure that we\n     * combine stack contexts for configurations that differ only by semantic\n     * predicate. From there, we can do the usual SLL termination heuristic.</p>\n     *\n     * <p><strong>PREDICATES IN SLL+LL PARSING</strong></p>\n     *\n     * <p>SLL decisions don't evaluate predicates until after they reach DFA stop\n     * states because they need to create the DFA cache that works in all\n     * semantic situations. In contrast, full LL evaluates predicates collected\n     * during start state computation so it can ignore predicates thereafter.\n     * This means that SLL termination detection can totally ignore semantic\n     * predicates.</p>\n     *\n     * <p>Implementation-wise, {@link ATNConfigSet} combines stack contexts but not\n     * semantic predicate contexts so we might see two configurations like the\n     * following.</p>\n     *\n     * <p>{@code (s, 1, x, {}), (s, 1, x', {p})}</p>\n     *\n     * <p>Before testing these configurations against others, we have to merge\n     * {@code x} and {@code x'} (without modifying the existing configurations).\n     * For example, we test {@code (x+x')==x''} when looking for conflicts in\n     * the following configurations.</p>\n     *\n     * <p>{@code (s, 1, x, {}), (s, 1, x', {p}), (s, 2, x'', {})}</p>\n     *\n     * <p>If the configuration set has predicates (as indicated by\n     * {@link ATNConfigSet//hasSemanticContext}), this algorithm makes a copy of\n     * the configurations to strip out all of the predicates so that a standard\n     * {@link ATNConfigSet} will merge everything ignoring predicates.</p>\n     */\n    hasSLLConflictTerminatingPrediction: function( mode, configs) {\n        // Configs in rule stop states indicate reaching the end of the decision\n        // rule (local context) or end of start rule (full context). If all\n        // configs meet this condition, then none of the configurations is able\n        // to match additional input so we terminate prediction.\n        //\n        if (PredictionMode.allConfigsInRuleStopStates(configs)) {\n            return true;\n        }\n        // pure SLL mode parsing\n        if (mode === PredictionMode.SLL) {\n            // Don't bother with combining configs from different semantic\n            // contexts if we can fail over to full LL; costs more time\n            // since we'll often fail over anyway.\n            if (configs.hasSemanticContext) {\n                // dup configs, tossing out semantic predicates\n                const dup = new ATNConfigSet();\n                for(let i=0;i<configs.items.length;i++) {\n                    let c = configs.items[i];\n                    c = new ATNConfig({semanticContext:SemanticContext.NONE}, c);\n                    dup.add(c);\n                }\n                configs = dup;\n            }\n            // now we have combined contexts for configs with dissimilar preds\n        }\n        // pure SLL or combined SLL+LL mode parsing\n        const altsets = PredictionMode.getConflictingAltSubsets(configs);\n        return PredictionMode.hasConflictingAltSet(altsets) && !PredictionMode.hasStateAssociatedWithOneAlt(configs);\n    },\n\n    /**\n     * Checks if any configuration in {@code configs} is in a\n     * {@link RuleStopState}. Configurations meeting this condition have reached\n     * the end of the decision rule (local context) or end of start rule (full\n     * context).\n     *\n     * @param configs the configuration set to test\n     * @return {@code true} if any configuration in {@code configs} is in a\n     * {@link RuleStopState}, otherwise {@code false}\n     */\n    hasConfigInRuleStopState: function(configs) {\n        for(let i=0;i<configs.items.length;i++) {\n            const c = configs.items[i];\n            if (c.state instanceof RuleStopState) {\n                return true;\n            }\n        }\n        return false;\n    },\n\n    /**\n     * Checks if all configurations in {@code configs} are in a\n     * {@link RuleStopState}. Configurations meeting this condition have reached\n     * the end of the decision rule (local context) or end of start rule (full\n     * context).\n     *\n     * @param configs the configuration set to test\n     * @return {@code true} if all configurations in {@code configs} are in a\n     * {@link RuleStopState}, otherwise {@code false}\n     */\n    allConfigsInRuleStopStates: function(configs) {\n        for(let i=0;i<configs.items.length;i++) {\n            const c = configs.items[i];\n            if (!(c.state instanceof RuleStopState)) {\n                return false;\n            }\n        }\n        return true;\n    },\n\n    /**\n     *\n     * Full LL prediction termination.\n     *\n     * <p>Can we stop looking ahead during ATN simulation or is there some\n     * uncertainty as to which alternative we will ultimately pick, after\n     * consuming more input? Even if there are partial conflicts, we might know\n     * that everything is going to resolve to the same minimum alternative. That\n     * means we can stop since no more lookahead will change that fact. On the\n     * other hand, there might be multiple conflicts that resolve to different\n     * minimums. That means we need more look ahead to decide which of those\n     * alternatives we should predict.</p>\n     *\n     * <p>The basic idea is to split the set of configurations {@code C}, into\n     * conflicting subsets {@code (s, _, ctx, _)} and singleton subsets with\n     * non-conflicting configurations. Two configurations conflict if they have\n     * identical {@link ATNConfig//state} and {@link ATNConfig//context} values\n     * but different {@link ATNConfig//alt} value, e.g. {@code (s, i, ctx, _)}\n     * and {@code (s, j, ctx, _)} for {@code i!=j}.</p>\n     *\n     * <p>Reduce these configuration subsets to the set of possible alternatives.\n     * You can compute the alternative subsets in one pass as follows:</p>\n     *\n     * <p>{@code A_s,ctx = {i | (s, i, ctx, _)}} for each configuration in\n     * {@code C} holding {@code s} and {@code ctx} fixed.</p>\n     *\n     * <p>Or in pseudo-code, for each configuration {@code c} in {@code C}:</p>\n     *\n     * <pre>\n     * map[c] U= c.{@link ATNConfig//alt alt} // map hash/equals uses s and x, not\n     * alt and not pred\n     * </pre>\n     *\n     * <p>The values in {@code map} are the set of {@code A_s,ctx} sets.</p>\n     *\n     * <p>If {@code |A_s,ctx|=1} then there is no conflict associated with\n     * {@code s} and {@code ctx}.</p>\n     *\n     * <p>Reduce the subsets to singletons by choosing a minimum of each subset. If\n     * the union of these alternative subsets is a singleton, then no amount of\n     * more lookahead will help us. We will always pick that alternative. If,\n     * however, there is more than one alternative, then we are uncertain which\n     * alternative to predict and must continue looking for resolution. We may\n     * or may not discover an ambiguity in the future, even if there are no\n     * conflicting subsets this round.</p>\n     *\n     * <p>The biggest sin is to terminate early because it means we've made a\n     * decision but were uncertain as to the eventual outcome. We haven't used\n     * enough lookahead. On the other hand, announcing a conflict too late is no\n     * big deal; you will still have the conflict. It's just inefficient. It\n     * might even look until the end of file.</p>\n     *\n     * <p>No special consideration for semantic predicates is required because\n     * predicates are evaluated on-the-fly for full LL prediction, ensuring that\n     * no configuration contains a semantic context during the termination\n     * check.</p>\n     *\n     * <p><strong>CONFLICTING CONFIGS</strong></p>\n     *\n     * <p>Two configurations {@code (s, i, x)} and {@code (s, j, x')}, conflict\n     * when {@code i!=j} but {@code x=x'}. Because we merge all\n     * {@code (s, i, _)} configurations together, that means that there are at\n     * most {@code n} configurations associated with state {@code s} for\n     * {@code n} possible alternatives in the decision. The merged stacks\n     * complicate the comparison of configuration contexts {@code x} and\n     * {@code x'}. Sam checks to see if one is a subset of the other by calling\n     * merge and checking to see if the merged result is either {@code x} or\n     * {@code x'}. If the {@code x} associated with lowest alternative {@code i}\n     * is the superset, then {@code i} is the only possible prediction since the\n     * others resolve to {@code min(i)} as well. However, if {@code x} is\n     * associated with {@code j>i} then at least one stack configuration for\n     * {@code j} is not in conflict with alternative {@code i}. The algorithm\n     * should keep going, looking for more lookahead due to the uncertainty.</p>\n     *\n     * <p>For simplicity, I'm doing a equality check between {@code x} and\n     * {@code x'} that lets the algorithm continue to consume lookahead longer\n     * than necessary. The reason I like the equality is of course the\n     * simplicity but also because that is the test you need to detect the\n     * alternatives that are actually in conflict.</p>\n     *\n     * <p><strong>CONTINUE/STOP RULE</strong></p>\n     *\n     * <p>Continue if union of resolved alternative sets from non-conflicting and\n     * conflicting alternative subsets has more than one alternative. We are\n     * uncertain about which alternative to predict.</p>\n     *\n     * <p>The complete set of alternatives, {@code [i for (_,i,_)]}, tells us which\n     * alternatives are still in the running for the amount of input we've\n     * consumed at this point. The conflicting sets let us to strip away\n     * configurations that won't lead to more states because we resolve\n     * conflicts to the configuration with a minimum alternate for the\n     * conflicting set.</p>\n     *\n     * <p><strong>CASES</strong></p>\n     *\n     * <ul>\n     *\n     * <li>no conflicts and more than 1 alternative in set =&gt; continue</li>\n     *\n     * <li> {@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s, 3, z)},\n     * {@code (s', 1, y)}, {@code (s', 2, y)} yields non-conflicting set\n     * {@code {3}} U conflicting sets {@code min({1,2})} U {@code min({1,2})} =\n     * {@code {1,3}} =&gt; continue\n     * </li>\n     *\n     * <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 1, y)},\n     * {@code (s', 2, y)}, {@code (s'', 1, z)} yields non-conflicting set\n     * {@code {1}} U conflicting sets {@code min({1,2})} U {@code min({1,2})} =\n     * {@code {1}} =&gt; stop and predict 1</li>\n     *\n     * <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 1, y)},\n     * {@code (s', 2, y)} yields conflicting, reduced sets {@code {1}} U\n     * {@code {1}} = {@code {1}} =&gt; stop and predict 1, can announce\n     * ambiguity {@code {1,2}}</li>\n     *\n     * <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 2, y)},\n     * {@code (s', 3, y)} yields conflicting, reduced sets {@code {1}} U\n     * {@code {2}} = {@code {1,2}} =&gt; continue</li>\n     *\n     * <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 3, y)},\n     * {@code (s', 4, y)} yields conflicting, reduced sets {@code {1}} U\n     * {@code {3}} = {@code {1,3}} =&gt; continue</li>\n     *\n     * </ul>\n     *\n     * <p><strong>EXACT AMBIGUITY DETECTION</strong></p>\n     *\n     * <p>If all states report the same conflicting set of alternatives, then we\n     * know we have the exact ambiguity set.</p>\n     *\n     * <p><code>|A_<em>i</em>|&gt;1</code> and\n     * <code>A_<em>i</em> = A_<em>j</em></code> for all <em>i</em>, <em>j</em>.</p>\n     *\n     * <p>In other words, we continue examining lookahead until all {@code A_i}\n     * have more than one alternative and all {@code A_i} are the same. If\n     * {@code A={{1,2}, {1,3}}}, then regular LL prediction would terminate\n     * because the resolved set is {@code {1}}. To determine what the real\n     * ambiguity is, we have to know whether the ambiguity is between one and\n     * two or one and three so we keep going. We can only stop prediction when\n     * we need exact ambiguity detection when the sets look like\n     * {@code A={{1,2}}} or {@code {{1,2},{1,2}}}, etc...</p>\n     */\n    resolvesToJustOneViableAlt: function(altsets) {\n        return PredictionMode.getSingleViableAlt(altsets);\n    },\n\n    /**\n     * Determines if every alternative subset in {@code altsets} contains more\n     * than one alternative.\n     *\n     * @param altsets a collection of alternative subsets\n     * @return {@code true} if every {@link BitSet} in {@code altsets} has\n     * {@link BitSet//cardinality cardinality} &gt; 1, otherwise {@code false}\n     */\n    allSubsetsConflict: function(altsets) {\n        return ! PredictionMode.hasNonConflictingAltSet(altsets);\n    },\n    /**\n     * Determines if any single alternative subset in {@code altsets} contains\n     * exactly one alternative.\n     *\n     * @param altsets a collection of alternative subsets\n     * @return {@code true} if {@code altsets} contains a {@link BitSet} with\n     * {@link BitSet//cardinality cardinality} 1, otherwise {@code false}\n     */\n    hasNonConflictingAltSet: function(altsets) {\n        for(let i=0;i<altsets.length;i++) {\n            const alts = altsets[i];\n            if (alts.length===1) {\n                return true;\n            }\n        }\n        return false;\n    },\n\n\n    /**\n     * Determines if any single alternative subset in {@code altsets} contains\n     * more than one alternative.\n     *\n     * @param altsets a collection of alternative subsets\n     * @return {@code true} if {@code altsets} contains a {@link BitSet} with\n     * {@link BitSet//cardinality cardinality} &gt; 1, otherwise {@code false}\n     */\n    hasConflictingAltSet: function(altsets) {\n        for(let i=0;i<altsets.length;i++) {\n            const alts = altsets[i];\n            if (alts.length>1) {\n                return true;\n            }\n        }\n        return false;\n    },\n\n\n    /**\n     * Determines if every alternative subset in {@code altsets} is equivalent.\n     *\n     * @param altsets a collection of alternative subsets\n     * @return {@code true} if every member of {@code altsets} is equal to the\n     * others, otherwise {@code false}\n     */\n    allSubsetsEqual: function(altsets) {\n        let first = null;\n        for(let i=0;i<altsets.length;i++) {\n            const alts = altsets[i];\n            if (first === null) {\n                first = alts;\n            } else if (alts!==first) {\n                return false;\n            }\n        }\n        return true;\n    },\n\n\n    /**\n     * Returns the unique alternative predicted by all alternative subsets in\n     * {@code altsets}. If no such alternative exists, this method returns\n     * {@link ATN//INVALID_ALT_NUMBER}.\n     *\n     * @param altsets a collection of alternative subsets\n     */\n    getUniqueAlt: function(altsets) {\n        const all = PredictionMode.getAlts(altsets);\n        if (all.length===1) {\n            return all.minValue();\n        } else {\n            return ATN.INVALID_ALT_NUMBER;\n        }\n    },\n\n    /**\n     * Gets the complete set of represented alternatives for a collection of\n     * alternative subsets. This method returns the union of each {@link BitSet}\n     * in {@code altsets}.\n     *\n     * @param altsets a collection of alternative subsets\n     * @return the set of represented alternatives in {@code altsets}\n     */\n    getAlts: function(altsets) {\n        const all = new BitSet();\n        altsets.map( function(alts) { all.or(alts); });\n        return all;\n    },\n\n    /**\n     * This function gets the conflicting alt subsets from a configuration set.\n     * For each configuration {@code c} in {@code configs}:\n     *\n     * <pre>\n     * map[c] U= c.{@link ATNConfig//alt alt} // map hash/equals uses s and x, not\n     * alt and not pred\n     * </pre>\n     */\n    getConflictingAltSubsets: function(configs) {\n        const configToAlts = new HashMap();\n        configToAlts.hashFunction = function(cfg) { HashCode.hashStuff(cfg.state.stateNumber, cfg.context); };\n        configToAlts.equalsFunction = function(c1, c2) { return c1.state.stateNumber === c2.state.stateNumber && c1.context.equals(c2.context);};\n        configs.items.map(function(cfg) {\n            let alts = configToAlts.get(cfg);\n            if (alts === null) {\n                alts = new BitSet();\n                configToAlts.set(cfg, alts);\n            }\n            alts.add(cfg.alt);\n        });\n        return configToAlts.getValues();\n    },\n\n    /**\n     * Get a map from state to alt subset from a configuration set. For each\n     * configuration {@code c} in {@code configs}:\n     *\n     * <pre>\n     * map[c.{@link ATNConfig//state state}] U= c.{@link ATNConfig//alt alt}\n     * </pre>\n     */\n    getStateToAltMap: function(configs) {\n        const m = new AltDict();\n        configs.items.map(function(c) {\n            let alts = m.get(c.state);\n            if (alts === null) {\n                alts = new BitSet();\n                m.set(c.state, alts);\n            }\n            alts.add(c.alt);\n        });\n        return m;\n    },\n\n    hasStateAssociatedWithOneAlt: function(configs) {\n        const values = PredictionMode.getStateToAltMap(configs).values();\n        for(let i=0;i<values.length;i++) {\n            if (values[i].length===1) {\n                return true;\n            }\n        }\n        return false;\n    },\n\n    getSingleViableAlt: function(altsets) {\n        let result = null;\n        for(let i=0;i<altsets.length;i++) {\n            const alts = altsets[i];\n            const minAlt = alts.minValue();\n            if(result===null) {\n                result = minAlt;\n            } else if(result!==minAlt) { // more than 1 viable alt\n                return ATN.INVALID_ALT_NUMBER;\n            }\n        }\n        return result;\n    }\n};\n\nexport default PredictionMode;\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport RecognitionException from \"./RecognitionException.js\";\n\n/**\n * Indicates that the parser could not decide which of two or more paths\n * to take based upon the remaining input. It tracks the starting token\n * of the offending input and also knows where the parser was\n * in the various paths when the error. Reported by reportNoViableAlternative()\n */\n\nexport default class NoViableAltException extends RecognitionException {\n    constructor(recognizer, input, startToken, offendingToken, deadEndConfigs, ctx) {\n        ctx = ctx || recognizer._ctx;\n        offendingToken = offendingToken || recognizer.getCurrentToken();\n        startToken = startToken || recognizer.getCurrentToken();\n        input = input || recognizer.getInputStream();\n        super({message: \"\", recognizer: recognizer, input: input, ctx: ctx});\n        // Which configurations did we try at input.index() that couldn't match\n        // input.LT(1)?//\n        this.deadEndConfigs = deadEndConfigs;\n        // The token object at the start index; the input stream might\n        // not be buffering tokens so get a reference to it. (At the\n        // time the error occurred, of course the stream needs to keep a\n        // buffer all of the tokens but later we might not have access to those.)\n        this.startToken = startToken;\n        this.offendingToken = offendingToken;\n    }\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport HashMap from \"../misc/HashMap.js\";\n\nexport default class DoubleDict {\n\n    constructor(defaultMapCtor) {\n        this.defaultMapCtor = defaultMapCtor || HashMap;\n        this.cacheMap = new this.defaultMapCtor();\n    }\n\n    get(a, b) {\n        const d = this.cacheMap.get(a) || null;\n        return d === null ? null : (d.get(b) || null);\n    }\n\n    set(a, b, o) {\n        let d = this.cacheMap.get(a) || null;\n        if (d === null) {\n            d = new this.defaultMapCtor();\n            this.cacheMap.set(a, d);\n        }\n        d.set(b, o);\n    }\n\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nimport ATN from './ATN.js';\nimport ATNState from '../state/ATNState.js';\nimport RuleStopState from '../state/RuleStopState.js';\nimport ATNConfig from './ATNConfig.js';\nimport ATNConfigSet from './ATNConfigSet.js';\nimport Token from '../Token.js';\nimport DFAState from '../dfa/DFAState.js';\nimport PredPrediction from '../dfa/PredPrediction.js';\nimport ATNSimulator from './ATNSimulator.js';\nimport PredictionMode from './PredictionMode.js';\nimport RuleContext from '../context/RuleContext.js';\nimport SemanticContext from './SemanticContext.js';\nimport PredictionContext from '../context/PredictionContext.js';\nimport Interval from '../misc/Interval.js';\nimport Transition from '../transition/Transition.js';\nimport SetTransition from '../transition/SetTransition.js';\nimport NotSetTransition from '../transition/NotSetTransition.js';\nimport RuleTransition from '../transition/RuleTransition.js';\nimport ActionTransition from '../transition/ActionTransition.js';\nimport NoViableAltException from '../error/NoViableAltException.js';\nimport SingletonPredictionContext from '../context/SingletonPredictionContext.js';\nimport { predictionContextFromRuleContext } from '../context/PredictionContextUtils.js';\nimport AtomTransition from \"../transition/AtomTransition.js\";\nimport arrayToString from \"../utils/arrayToString.js\";\nimport BitSet from \"../misc/BitSet.js\";\nimport DoubleDict from \"../utils/DoubleDict.js\";\nimport HashSet from \"../misc/HashSet.js\";\n\n/**\n * The embodiment of the adaptive LL(*), ALL(*), parsing strategy.\n *\n * <p>\n * The basic complexity of the adaptive strategy makes it harder to understand.\n * We begin with ATN simulation to build paths in a DFA. Subsequent prediction\n * requests go through the DFA first. If they reach a state without an edge for\n * the current symbol, the algorithm fails over to the ATN simulation to\n * complete the DFA path for the current input (until it finds a conflict state\n * or uniquely predicting state).</p>\n *\n * <p>\n * All of that is done without using the outer context because we want to create\n * a DFA that is not dependent upon the rule invocation stack when we do a\n * prediction. One DFA works in all contexts. We avoid using context not\n * necessarily because it's slower, although it can be, but because of the DFA\n * caching problem. The closure routine only considers the rule invocation stack\n * created during prediction beginning in the decision rule. For example, if\n * prediction occurs without invoking another rule's ATN, there are no context\n * stacks in the configurations. When lack of context leads to a conflict, we\n * don't know if it's an ambiguity or a weakness in the strong LL(*) parsing\n * strategy (versus full LL(*)).</p>\n *\n * <p>\n * When SLL yields a configuration set with conflict, we rewind the input and\n * retry the ATN simulation, this time using full outer context without adding\n * to the DFA. Configuration context stacks will be the full invocation stacks\n * from the start rule. If we get a conflict using full context, then we can\n * definitively say we have a true ambiguity for that input sequence. If we\n * don't get a conflict, it implies that the decision is sensitive to the outer\n * context. (It is not context-sensitive in the sense of context-sensitive\n * grammars.)</p>\n *\n * <p>\n * The next time we reach this DFA state with an SLL conflict, through DFA\n * simulation, we will again retry the ATN simulation using full context mode.\n * This is slow because we can't save the results and have to \"interpret\" the\n * ATN each time we get that input.</p>\n *\n * <p>\n * <strong>CACHING FULL CONTEXT PREDICTIONS</strong></p>\n *\n * <p>\n * We could cache results from full context to predicted alternative easily and\n * that saves a lot of time but doesn't work in presence of predicates. The set\n * of visible predicates from the ATN start state changes depending on the\n * context, because closure can fall off the end of a rule. I tried to cache\n * tuples (stack context, semantic context, predicted alt) but it was slower\n * than interpreting and much more complicated. Also required a huge amount of\n * memory. The goal is not to create the world's fastest parser anyway. I'd like\n * to keep this algorithm simple. By launching multiple threads, we can improve\n * the speed of parsing across a large number of files.</p>\n *\n * <p>\n * There is no strict ordering between the amount of input used by SLL vs LL,\n * which makes it really hard to build a cache for full context. Let's say that\n * we have input A B C that leads to an SLL conflict with full context X. That\n * implies that using X we might only use A B but we could also use A B C D to\n * resolve conflict. Input A B C D could predict alternative 1 in one position\n * in the input and A B C E could predict alternative 2 in another position in\n * input. The conflicting SLL configurations could still be non-unique in the\n * full context prediction, which would lead us to requiring more input than the\n * original A B C.\tTo make a\tprediction cache work, we have to track\tthe exact\n * input\tused during the previous prediction. That amounts to a cache that maps\n * X to a specific DFA for that context.</p>\n *\n * <p>\n * Something should be done for left-recursive expression predictions. They are\n * likely LL(1) + pred eval. Easier to do the whole SLL unless error and retry\n * with full LL thing Sam does.</p>\n *\n * <p>\n * <strong>AVOIDING FULL CONTEXT PREDICTION</strong></p>\n *\n * <p>\n * We avoid doing full context retry when the outer context is empty, we did not\n * dip into the outer context by falling off the end of the decision state rule,\n * or when we force SLL mode.</p>\n *\n * <p>\n * As an example of the not dip into outer context case, consider as super\n * constructor calls versus function calls. One grammar might look like\n * this:</p>\n *\n * <pre>\n * ctorBody\n *   : '{' superCall? stat* '}'\n *   ;\n * </pre>\n *\n * <p>\n * Or, you might see something like</p>\n *\n * <pre>\n * stat\n *   : superCall ';'\n *   | expression ';'\n *   | ...\n *   ;\n * </pre>\n *\n * <p>\n * In both cases I believe that no closure operations will dip into the outer\n * context. In the first case ctorBody in the worst case will stop at the '}'.\n * In the 2nd case it should stop at the ';'. Both cases should stay within the\n * entry rule and not dip into the outer context.</p>\n *\n * <p>\n * <strong>PREDICATES</strong></p>\n *\n * <p>\n * Predicates are always evaluated if present in either SLL or LL both. SLL and\n * LL simulation deals with predicates differently. SLL collects predicates as\n * it performs closure operations like ANTLR v3 did. It delays predicate\n * evaluation until it reaches and accept state. This allows us to cache the SLL\n * ATN simulation whereas, if we had evaluated predicates on-the-fly during\n * closure, the DFA state configuration sets would be different and we couldn't\n * build up a suitable DFA.</p>\n *\n * <p>\n * When building a DFA accept state during ATN simulation, we evaluate any\n * predicates and return the sole semantically valid alternative. If there is\n * more than 1 alternative, we report an ambiguity. If there are 0 alternatives,\n * we throw an exception. Alternatives without predicates act like they have\n * true predicates. The simple way to think about it is to strip away all\n * alternatives with false predicates and choose the minimum alternative that\n * remains.</p>\n *\n * <p>\n * When we start in the DFA and reach an accept state that's predicated, we test\n * those and return the minimum semantically viable alternative. If no\n * alternatives are viable, we throw an exception.</p>\n *\n * <p>\n * During full LL ATN simulation, closure always evaluates predicates and\n * on-the-fly. This is crucial to reducing the configuration set size during\n * closure. It hits a landmine when parsing with the Java grammar, for example,\n * without this on-the-fly evaluation.</p>\n *\n * <p>\n * <strong>SHARING DFA</strong></p>\n *\n * <p>\n * All instances of the same parser share the same decision DFAs through a\n * static field. Each instance gets its own ATN simulator but they share the\n * same {@link //decisionToDFA} field. They also share a\n * {@link PredictionContextCache} object that makes sure that all\n * {@link PredictionContext} objects are shared among the DFA states. This makes\n * a big size difference.</p>\n *\n * <p>\n * <strong>THREAD SAFETY</strong></p>\n *\n * <p>\n * The {@link ParserATNSimulator} locks on the {@link //decisionToDFA} field when\n * it adds a new DFA object to that array. {@link //addDFAEdge}\n * locks on the DFA for the current decision when setting the\n * {@link DFAState//edges} field. {@link //addDFAState} locks on\n * the DFA for the current decision when looking up a DFA state to see if it\n * already exists. We must make sure that all requests to add DFA states that\n * are equivalent result in the same shared DFA object. This is because lots of\n * threads will be trying to update the DFA at once. The\n * {@link //addDFAState} method also locks inside the DFA lock\n * but this time on the shared context cache when it rebuilds the\n * configurations' {@link PredictionContext} objects using cached\n * subgraphs/nodes. No other locking occurs, even during DFA simulation. This is\n * safe as long as we can guarantee that all threads referencing\n * {@code s.edge[t]} get the same physical target {@link DFAState}, or\n * {@code null}. Once into the DFA, the DFA simulation does not reference the\n * {@link DFA//states} map. It follows the {@link DFAState//edges} field to new\n * targets. The DFA simulator will either find {@link DFAState//edges} to be\n * {@code null}, to be non-{@code null} and {@code dfa.edges[t]} null, or\n * {@code dfa.edges[t]} to be non-null. The\n * {@link //addDFAEdge} method could be racing to set the field\n * but in either case the DFA simulator works; if {@code null}, and requests ATN\n * simulation. It could also race trying to get {@code dfa.edges[t]}, but either\n * way it will work because it's not doing a test and set operation.</p>\n *\n * <p>\n * <strong>Starting with SLL then failing to combined SLL/LL (Two-Stage\n * Parsing)</strong></p>\n *\n * <p>\n * Sam pointed out that if SLL does not give a syntax error, then there is no\n * point in doing full LL, which is slower. We only have to try LL if we get a\n * syntax error. For maximum speed, Sam starts the parser set to pure SLL\n * mode with the {@link BailErrorStrategy}:</p>\n *\n * <pre>\n * parser.{@link Parser//getInterpreter() getInterpreter()}.{@link //setPredictionMode setPredictionMode}{@code (}{@link PredictionMode//SLL}{@code )};\n * parser.{@link Parser//setErrorHandler setErrorHandler}(new {@link BailErrorStrategy}());\n * </pre>\n *\n * <p>\n * If it does not get a syntax error, then we're done. If it does get a syntax\n * error, we need to retry with the combined SLL/LL strategy.</p>\n *\n * <p>\n * The reason this works is as follows. If there are no SLL conflicts, then the\n * grammar is SLL (at least for that input set). If there is an SLL conflict,\n * the full LL analysis must yield a set of viable alternatives which is a\n * subset of the alternatives reported by SLL. If the LL set is a singleton,\n * then the grammar is LL but not SLL. If the LL set is the same size as the SLL\n * set, the decision is SLL. If the LL set has size &gt; 1, then that decision\n * is truly ambiguous on the current input. If the LL set is smaller, then the\n * SLL conflict resolution might choose an alternative that the full LL would\n * rule out as a possibility based upon better context information. If that's\n * the case, then the SLL parse will definitely get an error because the full LL\n * analysis says it's not viable. If SLL conflict resolution chooses an\n * alternative within the LL set, them both SLL and LL would choose the same\n * alternative because they both choose the minimum of multiple conflicting\n * alternatives.</p>\n *\n * <p>\n * Let's say we have a set of SLL conflicting alternatives {@code {1, 2, 3}} and\n * a smaller LL set called <em>s</em>. If <em>s</em> is {@code {2, 3}}, then SLL\n * parsing will get an error because SLL will pursue alternative 1. If\n * <em>s</em> is {@code {1, 2}} or {@code {1, 3}} then both SLL and LL will\n * choose the same alternative because alternative one is the minimum of either\n * set. If <em>s</em> is {@code {2}} or {@code {3}} then SLL will get a syntax\n * error. If <em>s</em> is {@code {1}} then SLL will succeed.</p>\n *\n * <p>\n * Of course, if the input is invalid, then we will get an error for sure in\n * both SLL and LL parsing. Erroneous input will therefore require 2 passes over\n * the input.</p>\n */\nexport default class ParserATNSimulator extends ATNSimulator {\n    constructor(parser, atn, decisionToDFA, sharedContextCache) {\n        super(atn, sharedContextCache);\n        this.parser = parser;\n        this.decisionToDFA = decisionToDFA;\n        // SLL, LL, or LL + exact ambig detection?//\n        this.predictionMode = PredictionMode.LL;\n        // LAME globals to avoid parameters!!!!! I need these down deep in predTransition\n        this._input = null;\n        this._startIndex = 0;\n        this._outerContext = null;\n        this._dfa = null;\n        /**\n         * Each prediction operation uses a cache for merge of prediction contexts.\n         *  Don't keep around as it wastes huge amounts of memory. DoubleKeyMap\n         *  isn't synchronized but we're ok since two threads shouldn't reuse same\n         *  parser/atnsim object because it can only handle one input at a time.\n         *  This maps graphs a and b to merged result c. (a,b)&rarr;c. We can avoid\n         *  the merge if we ever see a and b again.  Note that (b,a)&rarr;c should\n         *  also be examined during cache lookup.\n         */\n        this.mergeCache = null;\n        this.debug = false;\n        this.debug_closure = false;\n        this.debug_add = false;\n        this.debug_list_atn_decisions = false;\n        this.dfa_debug = false;\n        this.retry_debug = false;\n    }\n\n    reset() {}\n\n    adaptivePredict(input, decision, outerContext) {\n        if (this.debug || this.debug_list_atn_decisions) {\n            console.log(\"adaptivePredict decision \" + decision +\n                                   \" exec LA(1)==\" + this.getLookaheadName(input) +\n                                   \" line \" + input.LT(1).line + \":\" +\n                                   input.LT(1).column);\n        }\n        this._input = input;\n        this._startIndex = input.index;\n        this._outerContext = outerContext;\n\n        const dfa = this.decisionToDFA[decision];\n        this._dfa = dfa;\n        const m = input.mark();\n        const index = input.index;\n\n        // Now we are certain to have a specific decision's DFA\n        // But, do we still need an initial state?\n        try {\n            let s0;\n            if (dfa.precedenceDfa) {\n                // the start state for a precedence DFA depends on the current\n                // parser precedence, and is provided by a DFA method.\n                s0 = dfa.getPrecedenceStartState(this.parser.getPrecedence());\n            } else {\n                // the start state for a \"regular\" DFA is just s0\n                s0 = dfa.s0;\n            }\n            if (s0===null) {\n                if (outerContext===null) {\n                    outerContext = RuleContext.EMPTY;\n                }\n                if (this.debug || this.debug_list_atn_decisions) {\n                    console.log(\"predictATN decision \" + dfa.decision +\n                                       \" exec LA(1)==\" + this.getLookaheadName(input) +\n                                       \", outerContext=\" + outerContext.toString(this.parser.ruleNames));\n                }\n\n                const fullCtx = false;\n                let s0_closure = this.computeStartState(dfa.atnStartState, RuleContext.EMPTY, fullCtx);\n\n                if( dfa.precedenceDfa) {\n                    // If this is a precedence DFA, we use applyPrecedenceFilter\n                    // to convert the computed start state to a precedence start\n                    // state. We then use DFA.setPrecedenceStartState to set the\n                    // appropriate start state for the precedence level rather\n                    // than simply setting DFA.s0.\n                    //\n                    dfa.s0.configs = s0_closure; // not used for prediction but useful to know start configs anyway\n                    s0_closure = this.applyPrecedenceFilter(s0_closure);\n                    s0 = this.addDFAState(dfa, new DFAState(null, s0_closure));\n                    dfa.setPrecedenceStartState(this.parser.getPrecedence(), s0);\n                } else {\n                    s0 = this.addDFAState(dfa, new DFAState(null, s0_closure));\n                    dfa.s0 = s0;\n                }\n            }\n            const alt = this.execATN(dfa, s0, input, index, outerContext);\n            if (this.debug) {\n                console.log(\"DFA after predictATN: \" + dfa.toString(this.parser.literalNames, this.parser.symbolicNames));\n            }\n            return alt;\n        } finally {\n            this._dfa = null;\n            this.mergeCache = null; // wack cache after each prediction\n            input.seek(index);\n            input.release(m);\n        }\n    }\n\n    /**\n     * Performs ATN simulation to compute a predicted alternative based\n     *  upon the remaining input, but also updates the DFA cache to avoid\n     *  having to traverse the ATN again for the same input sequence.\n     *\n     * There are some key conditions we're looking for after computing a new\n     * set of ATN configs (proposed DFA state):\n     *       if the set is empty, there is no viable alternative for current symbol\n     *       does the state uniquely predict an alternative?\n     *       does the state have a conflict that would prevent us from\n     *         putting it on the work list?\n     *\n     * We also have some key operations to do:\n     *       add an edge from previous DFA state to potentially new DFA state, D,\n     *         upon current symbol but only if adding to work list, which means in all\n     *         cases except no viable alternative (and possibly non-greedy decisions?)\n     *       collecting predicates and adding semantic context to DFA accept states\n     *       adding rule context to context-sensitive DFA accept states\n     *       consuming an input symbol\n     *       reporting a conflict\n     *       reporting an ambiguity\n     *       reporting a context sensitivity\n     *       reporting insufficient predicates\n     *\n     * cover these cases:\n     *    dead end\n     *    single alt\n     *    single alt + preds\n     *    conflict\n     *    conflict + preds\n     *\n     */\n    execATN(dfa, s0, input, startIndex, outerContext ) {\n        if (this.debug || this.debug_list_atn_decisions) {\n            console.log(\"execATN decision \" + dfa.decision +\n                    \" exec LA(1)==\" + this.getLookaheadName(input) +\n                    \" line \" + input.LT(1).line + \":\" + input.LT(1).column);\n        }\n        let alt;\n        let previousD = s0;\n\n        if (this.debug) {\n            console.log(\"s0 = \" + s0);\n        }\n        let t = input.LA(1);\n        for(;;) { // while more work\n            let D = this.getExistingTargetState(previousD, t);\n            if(D===null) {\n                D = this.computeTargetState(dfa, previousD, t);\n            }\n            if(D===ATNSimulator.ERROR) {\n                // if any configs in previous dipped into outer context, that\n                // means that input up to t actually finished entry rule\n                // at least for SLL decision. Full LL doesn't dip into outer\n                // so don't need special case.\n                // We will get an error no matter what so delay until after\n                // decision; better error message. Also, no reachable target\n                // ATN states in SLL implies LL will also get nowhere.\n                // If conflict in states that dip out, choose min since we\n                // will get error no matter what.\n                const e = this.noViableAlt(input, outerContext, previousD.configs, startIndex);\n                input.seek(startIndex);\n                alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previousD.configs, outerContext);\n                if(alt!==ATN.INVALID_ALT_NUMBER) {\n                    return alt;\n                } else {\n                    throw e;\n                }\n            }\n            if(D.requiresFullContext && this.predictionMode !== PredictionMode.SLL) {\n                // IF PREDS, MIGHT RESOLVE TO SINGLE ALT => SLL (or syntax error)\n                let conflictingAlts = null;\n                if (D.predicates!==null) {\n                    if (this.debug) {\n                        console.log(\"DFA state has preds in DFA sim LL failover\");\n                    }\n                    const conflictIndex = input.index;\n                    if(conflictIndex !== startIndex) {\n                        input.seek(startIndex);\n                    }\n                    conflictingAlts = this.evalSemanticContext(D.predicates, outerContext, true);\n                    if (conflictingAlts.length===1) {\n                        if(this.debug) {\n                            console.log(\"Full LL avoided\");\n                        }\n                        return conflictingAlts.minValue();\n                    }\n                    if (conflictIndex !== startIndex) {\n                        // restore the index so reporting the fallback to full\n                        // context occurs with the index at the correct spot\n                        input.seek(conflictIndex);\n                    }\n                }\n                if (this.dfa_debug) {\n                    console.log(\"ctx sensitive state \" + outerContext +\" in \" + D);\n                }\n                const fullCtx = true;\n                const s0_closure = this.computeStartState(dfa.atnStartState, outerContext, fullCtx);\n                this.reportAttemptingFullContext(dfa, conflictingAlts, D.configs, startIndex, input.index);\n                alt = this.execATNWithFullContext(dfa, D, s0_closure, input, startIndex, outerContext);\n                return alt;\n            }\n            if (D.isAcceptState) {\n                if (D.predicates===null) {\n                    return D.prediction;\n                }\n                const stopIndex = input.index;\n                input.seek(startIndex);\n                const alts = this.evalSemanticContext(D.predicates, outerContext, true);\n                if (alts.length===0) {\n                    throw this.noViableAlt(input, outerContext, D.configs, startIndex);\n                } else if (alts.length===1) {\n                    return alts.minValue();\n                } else {\n                    // report ambiguity after predicate evaluation to make sure the correct set of ambig alts is reported.\n                    this.reportAmbiguity(dfa, D, startIndex, stopIndex, false, alts, D.configs);\n                    return alts.minValue();\n                }\n            }\n            previousD = D;\n\n            if (t !== Token.EOF) {\n                input.consume();\n                t = input.LA(1);\n            }\n        }\n    }\n\n    /**\n     * Get an existing target state for an edge in the DFA. If the target state\n     * for the edge has not yet been computed or is otherwise not available,\n     * this method returns {@code null}.\n     *\n     * @param previousD The current DFA state\n     * @param t The next input symbol\n     * @return The existing target DFA state for the given input symbol\n     * {@code t}, or {@code null} if the target state for this edge is not\n     * already cached\n     */\n    getExistingTargetState(previousD, t) {\n        const edges = previousD.edges;\n        if (edges===null) {\n            return null;\n        } else {\n            return edges[t + 1] || null;\n        }\n    }\n\n    /**\n     * Compute a target state for an edge in the DFA, and attempt to add the\n     * computed state and corresponding edge to the DFA.\n     *\n     * @param dfa The DFA\n     * @param previousD The current DFA state\n     * @param t The next input symbol\n     *\n     * @return The computed target DFA state for the given input symbol\n     * {@code t}. If {@code t} does not lead to a valid DFA state, this method\n     * returns {@link //ERROR\n     */\n    computeTargetState(dfa, previousD, t) {\n       const reach = this.computeReachSet(previousD.configs, t, false);\n        if(reach===null) {\n            this.addDFAEdge(dfa, previousD, t, ATNSimulator.ERROR);\n            return ATNSimulator.ERROR;\n        }\n        // create new target state; we'll add to DFA after it's complete\n        let D = new DFAState(null, reach);\n\n        const predictedAlt = this.getUniqueAlt(reach);\n\n        if (this.debug) {\n            const altSubSets = PredictionMode.getConflictingAltSubsets(reach);\n            console.log(\"SLL altSubSets=\" + arrayToString(altSubSets) +\n                        /*\", previous=\" + previousD.configs + */\n                        \", configs=\" + reach +\n                        \", predict=\" + predictedAlt +\n                        \", allSubsetsConflict=\" +\n                        PredictionMode.allSubsetsConflict(altSubSets) + \", conflictingAlts=\" +\n                        this.getConflictingAlts(reach));\n        }\n        if (predictedAlt!==ATN.INVALID_ALT_NUMBER) {\n            // NO CONFLICT, UNIQUELY PREDICTED ALT\n            D.isAcceptState = true;\n            D.configs.uniqueAlt = predictedAlt;\n            D.prediction = predictedAlt;\n        } else if (PredictionMode.hasSLLConflictTerminatingPrediction(this.predictionMode, reach)) {\n            // MORE THAN ONE VIABLE ALTERNATIVE\n            D.configs.conflictingAlts = this.getConflictingAlts(reach);\n            D.requiresFullContext = true;\n            // in SLL-only mode, we will stop at this state and return the minimum alt\n            D.isAcceptState = true;\n            D.prediction = D.configs.conflictingAlts.minValue();\n        }\n        if (D.isAcceptState && D.configs.hasSemanticContext) {\n            this.predicateDFAState(D, this.atn.getDecisionState(dfa.decision));\n            if( D.predicates!==null) {\n                D.prediction = ATN.INVALID_ALT_NUMBER;\n            }\n        }\n        // all adds to dfa are done after we've created full D state\n        D = this.addDFAEdge(dfa, previousD, t, D);\n        return D;\n    }\n\n    predicateDFAState(dfaState, decisionState) {\n        // We need to test all predicates, even in DFA states that\n        // uniquely predict alternative.\n        const nalts = decisionState.transitions.length;\n        // Update DFA so reach becomes accept state with (predicate,alt)\n        // pairs if preds found for conflicting alts\n        const altsToCollectPredsFrom = this.getConflictingAltsOrUniqueAlt(dfaState.configs);\n        const altToPred = this.getPredsForAmbigAlts(altsToCollectPredsFrom, dfaState.configs, nalts);\n        if (altToPred!==null) {\n            dfaState.predicates = this.getPredicatePredictions(altsToCollectPredsFrom, altToPred);\n            dfaState.prediction = ATN.INVALID_ALT_NUMBER; // make sure we use preds\n        } else {\n            // There are preds in configs but they might go away\n            // when OR'd together like {p}? || NONE == NONE. If neither\n            // alt has preds, resolve to min alt\n            dfaState.prediction = altsToCollectPredsFrom.minValue();\n        }\n    }\n\n// comes back with reach.uniqueAlt set to a valid alt\n    execATNWithFullContext(dfa, D, // how far we got before failing over\n                                         s0,\n                                         input,\n                                         startIndex,\n                                         outerContext) {\n        if (this.debug || this.debug_list_atn_decisions) {\n            console.log(\"execATNWithFullContext \"+s0);\n        }\n        const fullCtx = true;\n        let foundExactAmbig = false;\n        let reach;\n        let previous = s0;\n        input.seek(startIndex);\n        let t = input.LA(1);\n        let predictedAlt = -1;\n        for (;;) { // while more work\n            reach = this.computeReachSet(previous, t, fullCtx);\n            if (reach===null) {\n                // if any configs in previous dipped into outer context, that\n                // means that input up to t actually finished entry rule\n                // at least for LL decision. Full LL doesn't dip into outer\n                // so don't need special case.\n                // We will get an error no matter what so delay until after\n                // decision; better error message. Also, no reachable target\n                // ATN states in SLL implies LL will also get nowhere.\n                // If conflict in states that dip out, choose min since we\n                // will get error no matter what.\n                const e = this.noViableAlt(input, outerContext, previous, startIndex);\n                input.seek(startIndex);\n                const alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previous, outerContext);\n                if(alt!==ATN.INVALID_ALT_NUMBER) {\n                    return alt;\n                } else {\n                    throw e;\n                }\n            }\n            const altSubSets = PredictionMode.getConflictingAltSubsets(reach);\n            if(this.debug) {\n                console.log(\"LL altSubSets=\" + altSubSets + \", predict=\" +\n                      PredictionMode.getUniqueAlt(altSubSets) + \", resolvesToJustOneViableAlt=\" +\n                      PredictionMode.resolvesToJustOneViableAlt(altSubSets));\n            }\n            reach.uniqueAlt = this.getUniqueAlt(reach);\n            // unique prediction?\n            if(reach.uniqueAlt!==ATN.INVALID_ALT_NUMBER) {\n                predictedAlt = reach.uniqueAlt;\n                break;\n            } else if (this.predictionMode !== PredictionMode.LL_EXACT_AMBIG_DETECTION) {\n                predictedAlt = PredictionMode.resolvesToJustOneViableAlt(altSubSets);\n                if(predictedAlt !== ATN.INVALID_ALT_NUMBER) {\n                    break;\n                }\n            } else {\n                // In exact ambiguity mode, we never try to terminate early.\n                // Just keeps scarfing until we know what the conflict is\n                if (PredictionMode.allSubsetsConflict(altSubSets) && PredictionMode.allSubsetsEqual(altSubSets)) {\n                    foundExactAmbig = true;\n                    predictedAlt = PredictionMode.getSingleViableAlt(altSubSets);\n                    break;\n                }\n                // else there are multiple non-conflicting subsets or\n                // we're not sure what the ambiguity is yet.\n                // So, keep going.\n            }\n            previous = reach;\n            if( t !== Token.EOF) {\n                input.consume();\n                t = input.LA(1);\n            }\n        }\n        // If the configuration set uniquely predicts an alternative,\n        // without conflict, then we know that it's a full LL decision\n        // not SLL.\n        if (reach.uniqueAlt !== ATN.INVALID_ALT_NUMBER ) {\n            this.reportContextSensitivity(dfa, predictedAlt, reach, startIndex, input.index);\n            return predictedAlt;\n        }\n        // We do not check predicates here because we have checked them\n        // on-the-fly when doing full context prediction.\n\n        //\n        // In non-exact ambiguity detection mode, we might\tactually be able to\n        // detect an exact ambiguity, but I'm not going to spend the cycles\n        // needed to check. We only emit ambiguity warnings in exact ambiguity\n        // mode.\n        //\n        // For example, we might know that we have conflicting configurations.\n        // But, that does not mean that there is no way forward without a\n        // conflict. It's possible to have nonconflicting alt subsets as in:\n\n        // altSubSets=[{1, 2}, {1, 2}, {1}, {1, 2}]\n\n        // from\n        //\n        //    [(17,1,[5 $]), (13,1,[5 10 $]), (21,1,[5 10 $]), (11,1,[$]),\n        //     (13,2,[5 10 $]), (21,2,[5 10 $]), (11,2,[$])]\n        //\n        // In this case, (17,1,[5 $]) indicates there is some next sequence that\n        // would resolve this without conflict to alternative 1. Any other viable\n        // next sequence, however, is associated with a conflict.  We stop\n        // looking for input because no amount of further lookahead will alter\n        // the fact that we should predict alternative 1.  We just can't say for\n        // sure that there is an ambiguity without looking further.\n\n        this.reportAmbiguity(dfa, D, startIndex, input.index, foundExactAmbig, null, reach);\n\n        return predictedAlt;\n    }\n\n    computeReachSet(closure, t, fullCtx) {\n        if (this.debug) {\n            console.log(\"in computeReachSet, starting closure: \" + closure);\n        }\n        if( this.mergeCache===null) {\n            this.mergeCache = new DoubleDict();\n        }\n        const intermediate = new ATNConfigSet(fullCtx);\n\n        // Configurations already in a rule stop state indicate reaching the end\n        // of the decision rule (local context) or end of the start rule (full\n        // context). Once reached, these configurations are never updated by a\n        // closure operation, so they are handled separately for the performance\n        // advantage of having a smaller intermediate set when calling closure.\n        //\n        // For full-context reach operations, separate handling is required to\n        // ensure that the alternative matching the longest overall sequence is\n        // chosen when multiple such configurations can match the input.\n\n        let skippedStopStates = null;\n\n        // First figure out where we can reach on input t\n        for (let i=0; i<closure.items.length;i++) {\n            const c = closure.items[i];\n            if(this.debug) {\n                console.log(\"testing \" + this.getTokenName(t) + \" at \" + c);\n            }\n            if (c.state instanceof RuleStopState) {\n                if (fullCtx || t === Token.EOF) {\n                    if (skippedStopStates===null) {\n                        skippedStopStates = [];\n                    }\n                    skippedStopStates.push(c);\n                    if(this.debug_add) {\n                        console.log(\"added \" + c + \" to skippedStopStates\");\n                    }\n                }\n                continue;\n            }\n            for(let j=0;j<c.state.transitions.length;j++) {\n                const trans = c.state.transitions[j];\n                const target = this.getReachableTarget(trans, t);\n                if (target!==null) {\n                    const cfg = new ATNConfig({state:target}, c);\n                    intermediate.add(cfg, this.mergeCache);\n                    if(this.debug_add) {\n                        console.log(\"added \" + cfg + \" to intermediate\");\n                    }\n                }\n            }\n        }\n        // Now figure out where the reach operation can take us...\n        let reach = null;\n\n        // This block optimizes the reach operation for intermediate sets which\n        // trivially indicate a termination state for the overall\n        // adaptivePredict operation.\n        //\n        // The conditions assume that intermediate\n        // contains all configurations relevant to the reach set, but this\n        // condition is not true when one or more configurations have been\n        // withheld in skippedStopStates, or when the current symbol is EOF.\n        //\n        if (skippedStopStates===null && t!==Token.EOF) {\n            if (intermediate.items.length===1) {\n                // Don't pursue the closure if there is just one state.\n                // It can only have one alternative; just add to result\n                // Also don't pursue the closure if there is unique alternative\n                // among the configurations.\n                reach = intermediate;\n            } else if (this.getUniqueAlt(intermediate)!==ATN.INVALID_ALT_NUMBER) {\n                // Also don't pursue the closure if there is unique alternative\n                // among the configurations.\n                reach = intermediate;\n            }\n        }\n        // If the reach set could not be trivially determined, perform a closure\n        // operation on the intermediate set to compute its initial value.\n        //\n        if (reach===null) {\n            reach = new ATNConfigSet(fullCtx);\n            const closureBusy = new HashSet();\n            const treatEofAsEpsilon = t === Token.EOF;\n            for (let k=0; k<intermediate.items.length;k++) {\n                this.closure(intermediate.items[k], reach, closureBusy, false, fullCtx, treatEofAsEpsilon);\n            }\n        }\n        if (t === Token.EOF) {\n            // After consuming EOF no additional input is possible, so we are\n            // only interested in configurations which reached the end of the\n            // decision rule (local context) or end of the start rule (full\n            // context). Update reach to contain only these configurations. This\n            // handles both explicit EOF transitions in the grammar and implicit\n            // EOF transitions following the end of the decision or start rule.\n            //\n            // When reach==intermediate, no closure operation was performed. In\n            // this case, removeAllConfigsNotInRuleStopState needs to check for\n            // reachable rule stop states as well as configurations already in\n            // a rule stop state.\n            //\n            // This is handled before the configurations in skippedStopStates,\n            // because any configurations potentially added from that list are\n            // already guaranteed to meet this condition whether or not it's\n            // required.\n            //\n            reach = this.removeAllConfigsNotInRuleStopState(reach, reach === intermediate);\n        }\n        // If skippedStopStates!==null, then it contains at least one\n        // configuration. For full-context reach operations, these\n        // configurations reached the end of the start rule, in which case we\n        // only add them back to reach if no configuration during the current\n        // closure operation reached such a state. This ensures adaptivePredict\n        // chooses an alternative matching the longest overall sequence when\n        // multiple alternatives are viable.\n        //\n        if (skippedStopStates!==null && ( (! fullCtx) || (! PredictionMode.hasConfigInRuleStopState(reach)))) {\n            for (let l=0; l<skippedStopStates.length;l++) {\n                reach.add(skippedStopStates[l], this.mergeCache);\n            }\n        }\n        if (reach.items.length===0) {\n            return null;\n        } else {\n            return reach;\n        }\n    }\n\n    /**\n     * Return a configuration set containing only the configurations from\n     * {@code configs} which are in a {@link RuleStopState}. If all\n     * configurations in {@code configs} are already in a rule stop state, this\n     * method simply returns {@code configs}.\n     *\n     * <p>When {@code lookToEndOfRule} is true, this method uses\n     * {@link ATN//nextTokens} for each configuration in {@code configs} which is\n     * not already in a rule stop state to see if a rule stop state is reachable\n     * from the configuration via epsilon-only transitions.</p>\n     *\n     * @param configs the configuration set to update\n     * @param lookToEndOfRule when true, this method checks for rule stop states\n     * reachable by epsilon-only transitions from each configuration in\n     * {@code configs}.\n     *\n     * @return {@code configs} if all configurations in {@code configs} are in a\n     * rule stop state, otherwise return a new configuration set containing only\n     * the configurations from {@code configs} which are in a rule stop state\n     */\n    removeAllConfigsNotInRuleStopState(configs, lookToEndOfRule) {\n        if (PredictionMode.allConfigsInRuleStopStates(configs)) {\n            return configs;\n        }\n        const result = new ATNConfigSet(configs.fullCtx);\n        for(let i=0; i<configs.items.length;i++) {\n            const config = configs.items[i];\n            if (config.state instanceof RuleStopState) {\n                result.add(config, this.mergeCache);\n                continue;\n            }\n            if (lookToEndOfRule && config.state.epsilonOnlyTransitions) {\n                const nextTokens = this.atn.nextTokens(config.state);\n                if (nextTokens.contains(Token.EPSILON)) {\n                    const endOfRuleState = this.atn.ruleToStopState[config.state.ruleIndex];\n                    result.add(new ATNConfig({state:endOfRuleState}, config), this.mergeCache);\n                }\n            }\n        }\n        return result;\n    }\n\n    computeStartState(p, ctx, fullCtx) {\n        // always at least the implicit call to start rule\n        const initialContext = predictionContextFromRuleContext(this.atn, ctx);\n        const configs = new ATNConfigSet(fullCtx);\n        for(let i=0;i<p.transitions.length;i++) {\n            const target = p.transitions[i].target;\n            const c = new ATNConfig({ state:target, alt:i+1, context:initialContext }, null);\n            const closureBusy = new HashSet();\n            this.closure(c, configs, closureBusy, true, fullCtx, false);\n        }\n        return configs;\n    }\n\n    /**\n     * This method transforms the start state computed by\n     * {@link //computeStartState} to the special start state used by a\n     * precedence DFA for a particular precedence value. The transformation\n     * process applies the following changes to the start state's configuration\n     * set.\n     *\n     * <ol>\n     * <li>Evaluate the precedence predicates for each configuration using\n     * {@link SemanticContext//evalPrecedence}.</li>\n     * <li>Remove all configurations which predict an alternative greater than\n     * 1, for which another configuration that predicts alternative 1 is in the\n     * same ATN state with the same prediction context. This transformation is\n     * valid for the following reasons:\n     * <ul>\n     * <li>The closure block cannot contain any epsilon transitions which bypass\n     * the body of the closure, so all states reachable via alternative 1 are\n     * part of the precedence alternatives of the transformed left-recursive\n     * rule.</li>\n     * <li>The \"primary\" portion of a left recursive rule cannot contain an\n     * epsilon transition, so the only way an alternative other than 1 can exist\n     * in a state that is also reachable via alternative 1 is by nesting calls\n     * to the left-recursive rule, with the outer calls not being at the\n     * preferred precedence level.</li>\n     * </ul>\n     * </li>\n     * </ol>\n     *\n     * <p>\n     * The prediction context must be considered by this filter to address\n     * situations like the following.\n     * </p>\n     * <code>\n     * <pre>\n     * grammar TA;\n     * prog: statement* EOF;\n     * statement: letterA | statement letterA 'b' ;\n     * letterA: 'a';\n     * </pre>\n     * </code>\n     * <p>\n     * If the above grammar, the ATN state immediately before the token\n     * reference {@code 'a'} in {@code letterA} is reachable from the left edge\n     * of both the primary and closure blocks of the left-recursive rule\n     * {@code statement}. The prediction context associated with each of these\n     * configurations distinguishes between them, and prevents the alternative\n     * which stepped out to {@code prog} (and then back in to {@code statement}\n     * from being eliminated by the filter.\n     * </p>\n     *\n     * @param configs The configuration set computed by\n     * {@link //computeStartState} as the start state for the DFA.\n     * @return The transformed configuration set representing the start state\n     * for a precedence DFA at a particular precedence level (determined by\n     * calling {@link Parser//getPrecedence})\n     */\n    applyPrecedenceFilter(configs) {\n        let config;\n        const statesFromAlt1 = [];\n        const configSet = new ATNConfigSet(configs.fullCtx);\n        for(let i=0; i<configs.items.length; i++) {\n            config = configs.items[i];\n            // handle alt 1 first\n            if (config.alt !== 1) {\n                continue;\n            }\n            const updatedContext = config.semanticContext.evalPrecedence(this.parser, this._outerContext);\n            if (updatedContext===null) {\n                // the configuration was eliminated\n                continue;\n            }\n            statesFromAlt1[config.state.stateNumber] = config.context;\n            if (updatedContext !== config.semanticContext) {\n                configSet.add(new ATNConfig({semanticContext:updatedContext}, config), this.mergeCache);\n            } else {\n                configSet.add(config, this.mergeCache);\n            }\n        }\n        for(let i=0; i<configs.items.length; i++) {\n            config = configs.items[i];\n            if (config.alt === 1) {\n                // already handled\n                continue;\n            }\n            // In the future, this elimination step could be updated to also\n            // filter the prediction context for alternatives predicting alt>1\n            // (basically a graph subtraction algorithm).\n            if (!config.precedenceFilterSuppressed) {\n                const context = statesFromAlt1[config.state.stateNumber] || null;\n                if (context!==null && context.equals(config.context)) {\n                    // eliminated\n                    continue;\n                }\n            }\n            configSet.add(config, this.mergeCache);\n        }\n        return configSet;\n    }\n\n    getReachableTarget(trans, ttype) {\n        if (trans.matches(ttype, 0, this.atn.maxTokenType)) {\n            return trans.target;\n        } else {\n            return null;\n        }\n    }\n\n    getPredsForAmbigAlts(ambigAlts, configs, nalts) {\n        // REACH=[1|1|[]|0:0, 1|2|[]|0:1]\n        // altToPred starts as an array of all null contexts. The entry at index i\n        // corresponds to alternative i. altToPred[i] may have one of three values:\n        //   1. null: no ATNConfig c is found such that c.alt==i\n        //   2. SemanticContext.NONE: At least one ATNConfig c exists such that\n        //      c.alt==i and c.semanticContext==SemanticContext.NONE. In other words,\n        //      alt i has at least one unpredicated config.\n        //   3. Non-NONE Semantic Context: There exists at least one, and for all\n        //      ATNConfig c such that c.alt==i, c.semanticContext!=SemanticContext.NONE.\n        //\n        // From this, it is clear that NONE||anything==NONE.\n        //\n        let altToPred = [];\n        for(let i=0;i<configs.items.length;i++) {\n            const c = configs.items[i];\n            if(ambigAlts.has( c.alt )) {\n                altToPred[c.alt] = SemanticContext.orContext(altToPred[c.alt] || null, c.semanticContext);\n            }\n        }\n        let nPredAlts = 0;\n        for (let i =1;i< nalts+1;i++) {\n            const pred = altToPred[i] || null;\n            if (pred===null) {\n                altToPred[i] = SemanticContext.NONE;\n            } else if (pred !== SemanticContext.NONE) {\n                nPredAlts += 1;\n            }\n        }\n        // nonambig alts are null in altToPred\n        if (nPredAlts===0) {\n            altToPred = null;\n        }\n        if (this.debug) {\n            console.log(\"getPredsForAmbigAlts result \" + arrayToString(altToPred));\n        }\n        return altToPred;\n    }\n\n    getPredicatePredictions(ambigAlts, altToPred) {\n        const pairs = [];\n        let containsPredicate = false;\n        for (let i=1; i<altToPred.length;i++) {\n            const pred = altToPred[i];\n            // unpredicated is indicated by SemanticContext.NONE\n            if( ambigAlts!==null && ambigAlts.has( i )) {\n                pairs.push(new PredPrediction(pred, i));\n            }\n            if (pred !== SemanticContext.NONE) {\n                containsPredicate = true;\n            }\n        }\n        if (! containsPredicate) {\n            return null;\n        }\n        return pairs;\n    }\n\n    /**\n     * This method is used to improve the localization of error messages by\n     * choosing an alternative rather than throwing a\n     * {@link NoViableAltException} in particular prediction scenarios where the\n     * {@link //ERROR} state was reached during ATN simulation.\n     *\n     * <p>\n     * The default implementation of this method uses the following\n     * algorithm to identify an ATN configuration which successfully parsed the\n     * decision entry rule. Choosing such an alternative ensures that the\n     * {@link ParserRuleContext} returned by the calling rule will be complete\n     * and valid, and the syntax error will be reported later at a more\n     * localized location.</p>\n     *\n     * <ul>\n     * <li>If a syntactically valid path or paths reach the end of the decision rule and\n     * they are semantically valid if predicated, return the min associated alt.</li>\n     * <li>Else, if a semantically invalid but syntactically valid path exist\n     * or paths exist, return the minimum associated alt.\n     * </li>\n     * <li>Otherwise, return {@link ATN//INVALID_ALT_NUMBER}.</li>\n     * </ul>\n     *\n     * <p>\n     * In some scenarios, the algorithm described above could predict an\n     * alternative which will result in a {@link FailedPredicateException} in\n     * the parser. Specifically, this could occur if the <em>only</em> configuration\n     * capable of successfully parsing to the end of the decision rule is\n     * blocked by a semantic predicate. By choosing this alternative within\n     * {@link //adaptivePredict} instead of throwing a\n     * {@link NoViableAltException}, the resulting\n     * {@link FailedPredicateException} in the parser will identify the specific\n     * predicate which is preventing the parser from successfully parsing the\n     * decision rule, which helps developers identify and correct logic errors\n     * in semantic predicates.\n     * </p>\n     *\n     * @param configs The ATN configurations which were valid immediately before\n     * the {@link //ERROR} state was reached\n     * @param outerContext The is the \\gamma_0 initial parser context from the paper\n     * or the parser stack at the instant before prediction commences.\n     *\n     * @return The value to return from {@link //adaptivePredict}, or\n     * {@link ATN//INVALID_ALT_NUMBER} if a suitable alternative was not\n     * identified and {@link //adaptivePredict} should report an error instead\n     */\n    getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(configs, outerContext) {\n        const cfgs = this.splitAccordingToSemanticValidity(configs, outerContext);\n        const semValidConfigs = cfgs[0];\n        const semInvalidConfigs = cfgs[1];\n        let alt = this.getAltThatFinishedDecisionEntryRule(semValidConfigs);\n        if (alt!==ATN.INVALID_ALT_NUMBER) { // semantically/syntactically viable path exists\n            return alt;\n        }\n        // Is there a syntactically valid path with a failed pred?\n        if (semInvalidConfigs.items.length>0) {\n            alt = this.getAltThatFinishedDecisionEntryRule(semInvalidConfigs);\n            if (alt!==ATN.INVALID_ALT_NUMBER) { // syntactically viable path exists\n                return alt;\n            }\n        }\n        return ATN.INVALID_ALT_NUMBER;\n    }\n\n    getAltThatFinishedDecisionEntryRule(configs) {\n        const alts = [];\n        for(let i=0;i<configs.items.length; i++) {\n            const c = configs.items[i];\n            if (c.reachesIntoOuterContext>0 || ((c.state instanceof RuleStopState) && c.context.hasEmptyPath())) {\n                if(alts.indexOf(c.alt)<0) {\n                    alts.push(c.alt);\n                }\n            }\n        }\n        if (alts.length===0) {\n            return ATN.INVALID_ALT_NUMBER;\n        } else {\n            return Math.min.apply(null, alts);\n        }\n    }\n\n    /**\n     * Walk the list of configurations and split them according to\n     * those that have preds evaluating to true/false.  If no pred, assume\n     * true pred and include in succeeded set.  Returns Pair of sets.\n     *\n     * Create a new set so as not to alter the incoming parameter.\n     *\n     * Assumption: the input stream has been restored to the starting point\n     * prediction, which is where predicates need to evaluate.*/\n    splitAccordingToSemanticValidity( configs, outerContext) {\n        const succeeded = new ATNConfigSet(configs.fullCtx);\n        const failed = new ATNConfigSet(configs.fullCtx);\n        for(let i=0;i<configs.items.length; i++) {\n            const c = configs.items[i];\n            if (c.semanticContext !== SemanticContext.NONE) {\n                const predicateEvaluationResult = c.semanticContext.evaluate(this.parser, outerContext);\n                if (predicateEvaluationResult) {\n                    succeeded.add(c);\n                } else {\n                    failed.add(c);\n                }\n            } else {\n                succeeded.add(c);\n            }\n        }\n        return [succeeded, failed];\n    }\n\n    /**\n     * Look through a list of predicate/alt pairs, returning alts for the\n     * pairs that win. A {@code NONE} predicate indicates an alt containing an\n     * unpredicated config which behaves as \"always true.\" If !complete\n     * then we stop at the first predicate that evaluates to true. This\n     * includes pairs with null predicates.\n     */\n    evalSemanticContext(predPredictions, outerContext, complete) {\n        const predictions = new BitSet();\n        for(let i=0;i<predPredictions.length;i++) {\n            const pair = predPredictions[i];\n            if (pair.pred === SemanticContext.NONE) {\n                predictions.add(pair.alt);\n                if (! complete) {\n                    break;\n                }\n                continue;\n            }\n            const predicateEvaluationResult = pair.pred.evaluate(this.parser, outerContext);\n            if (this.debug || this.dfa_debug) {\n                console.log(\"eval pred \" + pair + \"=\" + predicateEvaluationResult);\n            }\n            if (predicateEvaluationResult) {\n                if (this.debug || this.dfa_debug) {\n                    console.log(\"PREDICT \" + pair.alt);\n                }\n                predictions.add(pair.alt);\n                if (! complete) {\n                    break;\n                }\n            }\n        }\n        return predictions;\n    }\n\n// TODO: If we are doing predicates, there is no point in pursuing\n//     closure operations if we reach a DFA state that uniquely predicts\n//     alternative. We will not be caching that DFA state and it is a\n//     waste to pursue the closure. Might have to advance when we do\n//     ambig detection thought :(\n//\n    closure(config, configs, closureBusy, collectPredicates, fullCtx, treatEofAsEpsilon) {\n        const initialDepth = 0;\n        this.closureCheckingStopState(config, configs, closureBusy, collectPredicates,\n                                 fullCtx, initialDepth, treatEofAsEpsilon);\n    }\n\n    closureCheckingStopState(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {\n        if (this.debug || this.debug_closure) {\n            console.log(\"closure(\" + config.toString(this.parser,true) + \")\");\n            // console.log(\"configs(\" + configs.toString() + \")\");\n            if(config.reachesIntoOuterContext>50) {\n                throw \"problem\";\n            }\n        }\n        if (config.state instanceof RuleStopState) {\n            // We hit rule end. If we have context info, use it\n            // run thru all possible stack tops in ctx\n            if (! config.context.isEmpty()) {\n                for (let i =0; i<config.context.length; i++) {\n                    if (config.context.getReturnState(i) === PredictionContext.EMPTY_RETURN_STATE) {\n                        if (fullCtx) {\n                            configs.add(new ATNConfig({state:config.state, context:PredictionContext.EMPTY}, config), this.mergeCache);\n                            continue;\n                        } else {\n                            // we have no context info, just chase follow links (if greedy)\n                            if (this.debug) {\n                                console.log(\"FALLING off rule \" + this.getRuleName(config.state.ruleIndex));\n                            }\n                            this.closure_(config, configs, closureBusy, collectPredicates,\n                                     fullCtx, depth, treatEofAsEpsilon);\n                        }\n                        continue;\n                    }\n                    const returnState = this.atn.states[config.context.getReturnState(i)];\n                    const newContext = config.context.getParent(i); // \"pop\" return state\n                    const parms = {state:returnState, alt:config.alt, context:newContext, semanticContext:config.semanticContext};\n                    const c = new ATNConfig(parms, null);\n                    // While we have context to pop back from, we may have\n                    // gotten that context AFTER having falling off a rule.\n                    // Make sure we track that we are now out of context.\n                    c.reachesIntoOuterContext = config.reachesIntoOuterContext;\n                    this.closureCheckingStopState(c, configs, closureBusy, collectPredicates, fullCtx, depth - 1, treatEofAsEpsilon);\n                }\n                return;\n            } else if( fullCtx) {\n                // reached end of start rule\n                configs.add(config, this.mergeCache);\n                return;\n            } else {\n                // else if we have no context info, just chase follow links (if greedy)\n                if (this.debug) {\n                    console.log(\"FALLING off rule \" + this.getRuleName(config.state.ruleIndex));\n                }\n            }\n        }\n        this.closure_(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon);\n    }\n\n    // Do the actual work of walking epsilon edges//\n    closure_(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {\n        const p = config.state;\n        // optimization\n        if (! p.epsilonOnlyTransitions) {\n            configs.add(config, this.mergeCache);\n            // make sure to not return here, because EOF transitions can act as\n            // both epsilon transitions and non-epsilon transitions.\n        }\n        for(let i = 0;i<p.transitions.length; i++) {\n            if(i === 0 && this.canDropLoopEntryEdgeInLeftRecursiveRule(config))\n                continue;\n\n            const t = p.transitions[i];\n            const continueCollecting = collectPredicates && !(t instanceof ActionTransition);\n            const c = this.getEpsilonTarget(config, t, continueCollecting, depth === 0, fullCtx, treatEofAsEpsilon);\n            if (c!==null) {\n                let newDepth = depth;\n                if ( config.state instanceof RuleStopState) {\n                    // target fell off end of rule; mark resulting c as having dipped into outer context\n                    // We can't get here if incoming config was rule stop and we had context\n                    // track how far we dip into outer context.  Might\n                    // come in handy and we avoid evaluating context dependent\n                    // preds if this is > 0.\n                    if (this._dfa !== null && this._dfa.precedenceDfa) {\n                        if (t.outermostPrecedenceReturn === this._dfa.atnStartState.ruleIndex) {\n                            c.precedenceFilterSuppressed = true;\n                        }\n                    }\n\n                    c.reachesIntoOuterContext += 1;\n                    if (closureBusy.add(c)!==c) {\n                        // avoid infinite recursion for right-recursive rules\n                        continue;\n                    }\n                    configs.dipsIntoOuterContext = true; // TODO: can remove? only care when we add to set per middle of this method\n                    newDepth -= 1;\n                    if (this.debug) {\n                        console.log(\"dips into outer ctx: \" + c);\n                    }\n                } else {\n                    if (!t.isEpsilon && closureBusy.add(c)!==c){\n                        // avoid infinite recursion for EOF* and EOF+\n                        continue;\n                    }\n                    if (t instanceof RuleTransition) {\n                        // latch when newDepth goes negative - once we step out of the entry context we can't return\n                        if (newDepth >= 0) {\n                            newDepth += 1;\n                        }\n                    }\n                }\n                this.closureCheckingStopState(c, configs, closureBusy, continueCollecting, fullCtx, newDepth, treatEofAsEpsilon);\n            }\n        }\n    }\n\n    canDropLoopEntryEdgeInLeftRecursiveRule(config) {\n        // return False\n        const p = config.state;\n        // First check to see if we are in StarLoopEntryState generated during\n        // left-recursion elimination. For efficiency, also check if\n        // the context has an empty stack case. If so, it would mean\n        // global FOLLOW so we can't perform optimization\n        // Are we the special loop entry/exit state? or SLL wildcard\n        if(p.stateType !== ATNState.STAR_LOOP_ENTRY)\n            return false;\n        if(p.stateType !== ATNState.STAR_LOOP_ENTRY || !p.isPrecedenceDecision ||\n               config.context.isEmpty() || config.context.hasEmptyPath())\n            return false;\n\n        // Require all return states to return back to the same rule that p is in.\n        const numCtxs = config.context.length;\n        for(let i=0; i<numCtxs; i++) { // for each stack context\n            const returnState = this.atn.states[config.context.getReturnState(i)];\n            if (returnState.ruleIndex !== p.ruleIndex)\n                return false;\n        }\n\n        const decisionStartState = p.transitions[0].target;\n        const blockEndStateNum = decisionStartState.endState.stateNumber;\n        const blockEndState = this.atn.states[blockEndStateNum];\n\n        // Verify that the top of each stack context leads to loop entry/exit\n        // state through epsilon edges and w/o leaving rule.\n        for(let i=0; i<numCtxs; i++) { // for each stack context\n            const returnStateNumber = config.context.getReturnState(i);\n            const returnState = this.atn.states[returnStateNumber];\n            // all states must have single outgoing epsilon edge\n            if (returnState.transitions.length !== 1 || !returnState.transitions[0].isEpsilon)\n                return false;\n\n            // Look for prefix op case like 'not expr', (' type ')' expr\n            const returnStateTarget = returnState.transitions[0].target;\n            if ( returnState.stateType === ATNState.BLOCK_END && returnStateTarget === p )\n                continue;\n\n            // Look for 'expr op expr' or case where expr's return state is block end\n            // of (...)* internal block; the block end points to loop back\n            // which points to p but we don't need to check that\n            if ( returnState === blockEndState )\n                continue;\n\n            // Look for ternary expr ? expr : expr. The return state points at block end,\n            // which points at loop entry state\n            if ( returnStateTarget === blockEndState )\n                continue;\n\n            // Look for complex prefix 'between expr and expr' case where 2nd expr's\n            // return state points at block end state of (...)* internal block\n            if (returnStateTarget.stateType === ATNState.BLOCK_END && returnStateTarget.transitions.length === 1\n                    && returnStateTarget.transitions[0].isEpsilon && returnStateTarget.transitions[0].target === p)\n                continue;\n\n            // anything else ain't conforming\n            return false;\n        }\n        return true;\n    }\n\n    getRuleName(index) {\n        if (this.parser!==null && index>=0) {\n            return this.parser.ruleNames[index];\n        } else {\n            return \"<rule \" + index + \">\";\n        }\n    }\n\n    getEpsilonTarget(config, t, collectPredicates, inContext, fullCtx, treatEofAsEpsilon) {\n        switch(t.serializationType) {\n        case Transition.RULE:\n            return this.ruleTransition(config, t);\n        case Transition.PRECEDENCE:\n            return this.precedenceTransition(config, t, collectPredicates, inContext, fullCtx);\n        case Transition.PREDICATE:\n            return this.predTransition(config, t, collectPredicates, inContext, fullCtx);\n        case Transition.ACTION:\n            return this.actionTransition(config, t);\n        case Transition.EPSILON:\n            return new ATNConfig({state:t.target}, config);\n        case Transition.ATOM:\n        case Transition.RANGE:\n        case Transition.SET:\n            // EOF transitions act like epsilon transitions after the first EOF\n            // transition is traversed\n            if (treatEofAsEpsilon) {\n                if (t.matches(Token.EOF, 0, 1)) {\n                    return new ATNConfig({state: t.target}, config);\n                }\n            }\n            return null;\n        default:\n            return null;\n        }\n    }\n\n    actionTransition(config, t) {\n        if (this.debug) {\n            const index = t.actionIndex === -1 ? 65535 : t.actionIndex;\n            console.log(\"ACTION edge \" + t.ruleIndex + \":\" + index);\n        }\n        return new ATNConfig({state:t.target}, config);\n    }\n\n    precedenceTransition(config, pt, collectPredicates, inContext, fullCtx) {\n        if (this.debug) {\n            console.log(\"PRED (collectPredicates=\" + collectPredicates + \") \" +\n                    pt.precedence + \">=_p, ctx dependent=true\");\n            if (this.parser!==null) {\n                console.log(\"context surrounding pred is \" + arrayToString(this.parser.getRuleInvocationStack()));\n            }\n        }\n        let c = null;\n        if (collectPredicates && inContext) {\n            if (fullCtx) {\n                // In full context mode, we can evaluate predicates on-the-fly\n                // during closure, which dramatically reduces the size of\n                // the config sets. It also obviates the need to test predicates\n                // later during conflict resolution.\n                const currentPosition = this._input.index;\n                this._input.seek(this._startIndex);\n                const predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);\n                this._input.seek(currentPosition);\n                if (predSucceeds) {\n                    c = new ATNConfig({state:pt.target}, config); // no pred context\n                }\n            } else {\n                const newSemCtx = SemanticContext.andContext(config.semanticContext, pt.getPredicate());\n                c = new ATNConfig({state:pt.target, semanticContext:newSemCtx}, config);\n            }\n        } else {\n            c = new ATNConfig({state:pt.target}, config);\n        }\n        if (this.debug) {\n            console.log(\"config from pred transition=\" + c);\n        }\n        return c;\n    }\n\n    predTransition(config, pt, collectPredicates, inContext, fullCtx) {\n        if (this.debug) {\n            console.log(\"PRED (collectPredicates=\" + collectPredicates + \") \" + pt.ruleIndex +\n                    \":\" + pt.predIndex + \", ctx dependent=\" + pt.isCtxDependent);\n            if (this.parser!==null) {\n                console.log(\"context surrounding pred is \" + arrayToString(this.parser.getRuleInvocationStack()));\n            }\n        }\n        let c = null;\n        if (collectPredicates && ((pt.isCtxDependent && inContext) || ! pt.isCtxDependent)) {\n            if (fullCtx) {\n                // In full context mode, we can evaluate predicates on-the-fly\n                // during closure, which dramatically reduces the size of\n                // the config sets. It also obviates the need to test predicates\n                // later during conflict resolution.\n                const currentPosition = this._input.index;\n                this._input.seek(this._startIndex);\n                const predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);\n                this._input.seek(currentPosition);\n                if (predSucceeds) {\n                    c = new ATNConfig({state:pt.target}, config); // no pred context\n                }\n            } else {\n                const newSemCtx = SemanticContext.andContext(config.semanticContext, pt.getPredicate());\n                c = new ATNConfig({state:pt.target, semanticContext:newSemCtx}, config);\n            }\n        } else {\n            c = new ATNConfig({state:pt.target}, config);\n        }\n        if (this.debug) {\n            console.log(\"config from pred transition=\" + c);\n        }\n        return c;\n    }\n\n    ruleTransition(config, t) {\n        if (this.debug) {\n            console.log(\"CALL rule \" + this.getRuleName(t.target.ruleIndex) + \", ctx=\" + config.context);\n        }\n        const returnState = t.followState;\n        const newContext = SingletonPredictionContext.create(config.context, returnState.stateNumber);\n        return new ATNConfig({state:t.target, context:newContext}, config );\n    }\n\n    getConflictingAlts(configs) {\n        const altsets = PredictionMode.getConflictingAltSubsets(configs);\n        return PredictionMode.getAlts(altsets);\n    }\n\n    /**\n     * Sam pointed out a problem with the previous definition, v3, of\n     * ambiguous states. If we have another state associated with conflicting\n     * alternatives, we should keep going. For example, the following grammar\n     *\n     * s : (ID | ID ID?) ';' ;\n     *\n     * When the ATN simulation reaches the state before ';', it has a DFA\n     * state that looks like: [12|1|[], 6|2|[], 12|2|[]]. Naturally\n     * 12|1|[] and 12|2|[] conflict, but we cannot stop processing this node\n     * because alternative to has another way to continue, via [6|2|[]].\n     * The key is that we have a single state that has config's only associated\n     * with a single alternative, 2, and crucially the state transitions\n     * among the configurations are all non-epsilon transitions. That means\n     * we don't consider any conflicts that include alternative 2. So, we\n     * ignore the conflict between alts 1 and 2. We ignore a set of\n     * conflicting alts when there is an intersection with an alternative\n     * associated with a single alt state in the state&rarr;config-list map.\n     *\n     * It's also the case that we might have two conflicting configurations but\n     * also a 3rd nonconflicting configuration for a different alternative:\n     * [1|1|[], 1|2|[], 8|3|[]]. This can come about from grammar:\n     *\n     * a : A | A | A B ;\n     *\n     * After matching input A, we reach the stop state for rule A, state 1.\n     * State 8 is the state right before B. Clearly alternatives 1 and 2\n     * conflict and no amount of further lookahead will separate the two.\n     * However, alternative 3 will be able to continue and so we do not\n     * stop working on this state. In the previous example, we're concerned\n     * with states associated with the conflicting alternatives. Here alt\n     * 3 is not associated with the conflicting configs, but since we can continue\n     * looking for input reasonably, I don't declare the state done. We\n     * ignore a set of conflicting alts when we have an alternative\n     * that we still need to pursue\n     */\n    getConflictingAltsOrUniqueAlt(configs) {\n        let conflictingAlts = null;\n        if (configs.uniqueAlt!== ATN.INVALID_ALT_NUMBER) {\n            conflictingAlts = new BitSet();\n            conflictingAlts.add(configs.uniqueAlt);\n        } else {\n            conflictingAlts = configs.conflictingAlts;\n        }\n        return conflictingAlts;\n    }\n\n    getTokenName(t) {\n        if (t===Token.EOF) {\n            return \"EOF\";\n        }\n        if( this.parser!==null && this.parser.literalNames!==null) {\n            if (t >= this.parser.literalNames.length && t >= this.parser.symbolicNames.length) {\n                console.log(\"\" + t + \" ttype out of range: \" + this.parser.literalNames);\n                console.log(\"\" + this.parser.getInputStream().getTokens());\n            } else {\n                const name = this.parser.literalNames[t] || this.parser.symbolicNames[t];\n                return name + \"<\" + t + \">\";\n            }\n        }\n        return \"\" + t;\n    }\n\n    getLookaheadName(input) {\n        return this.getTokenName(input.LA(1));\n    }\n\n    /**\n     * Used for debugging in adaptivePredict around execATN but I cut\n     * it out for clarity now that alg. works well. We can leave this\n     * \"dead\" code for a bit\n     */\n    dumpDeadEndConfigs(nvae) {\n        console.log(\"dead end configs: \");\n        const decs = nvae.getDeadEndConfigs();\n        for(let i=0; i<decs.length; i++) {\n            const c = decs[i];\n            let trans = \"no edges\";\n            if (c.state.transitions.length>0) {\n                const t = c.state.transitions[0];\n                if (t instanceof AtomTransition) {\n                    trans = \"Atom \"+ this.getTokenName(t.label);\n                } else if (t instanceof SetTransition) {\n                    const neg = (t instanceof NotSetTransition);\n                    trans = (neg ? \"~\" : \"\") + \"Set \" + t.set;\n                }\n            }\n            console.error(c.toString(this.parser, true) + \":\" + trans);\n        }\n    }\n\n    noViableAlt(input, outerContext, configs, startIndex) {\n        return new NoViableAltException(this.parser, input, input.get(startIndex), input.LT(1), configs, outerContext);\n    }\n\n    getUniqueAlt(configs) {\n        let alt = ATN.INVALID_ALT_NUMBER;\n        for(let i=0;i<configs.items.length;i++) {\n            const c = configs.items[i];\n            if (alt === ATN.INVALID_ALT_NUMBER) {\n                alt = c.alt // found first alt\n            } else if( c.alt!==alt) {\n                return ATN.INVALID_ALT_NUMBER;\n            }\n        }\n        return alt;\n    }\n\n    /**\n     * Add an edge to the DFA, if possible. This method calls\n     * {@link //addDFAState} to ensure the {@code to} state is present in the\n     * DFA. If {@code from} is {@code null}, or if {@code t} is outside the\n     * range of edges that can be represented in the DFA tables, this method\n     * returns without adding the edge to the DFA.\n     *\n     * <p>If {@code to} is {@code null}, this method returns {@code null}.\n     * Otherwise, this method returns the {@link DFAState} returned by calling\n     * {@link //addDFAState} for the {@code to} state.</p>\n     *\n     * @param dfa The DFA\n     * @param from_ The source state for the edge\n     * @param t The input symbol\n     * @param to The target state for the edge\n     *\n     * @return If {@code to} is {@code null}, this method returns {@code null};\n     * otherwise this method returns the result of calling {@link //addDFAState}\n     * on {@code to}\n     */\n    addDFAEdge(dfa, from_, t, to) {\n        if( this.debug) {\n            console.log(\"EDGE \" + from_ + \" -> \" + to + \" upon \" + this.getTokenName(t));\n        }\n        if (to===null) {\n            return null;\n        }\n        to = this.addDFAState(dfa, to); // used existing if possible not incoming\n        if (from_===null || t < -1 || t > this.atn.maxTokenType) {\n            return to;\n        }\n        if (from_.edges===null) {\n            from_.edges = [];\n        }\n        from_.edges[t+1] = to; // connect\n\n        if (this.debug) {\n            const literalNames = this.parser===null ? null : this.parser.literalNames;\n            const symbolicNames = this.parser===null ? null : this.parser.symbolicNames;\n            console.log(\"DFA=\\n\" + dfa.toString(literalNames, symbolicNames));\n        }\n        return to;\n    }\n\n    /**\n     * Add state {@code D} to the DFA if it is not already present, and return\n     * the actual instance stored in the DFA. If a state equivalent to {@code D}\n     * is already in the DFA, the existing state is returned. Otherwise this\n     * method returns {@code D} after adding it to the DFA.\n     *\n     * <p>If {@code D} is {@link //ERROR}, this method returns {@link //ERROR} and\n     * does not change the DFA.</p>\n     *\n     * @param dfa The dfa\n     * @param D The DFA state to add\n     * @return The state stored in the DFA. This will be either the existing\n     * state if {@code D} is already in the DFA, or {@code D} itself if the\n     * state was not already present\n     */\n    addDFAState(dfa, D) {\n        if (D === ATNSimulator.ERROR) {\n            return D;\n        }\n        const existing = dfa.states.get(D);\n        if(existing!==null) {\n            return existing;\n        }\n        D.stateNumber = dfa.states.length;\n        if (! D.configs.readOnly) {\n            D.configs.optimizeConfigs(this);\n            D.configs.setReadonly(true);\n        }\n        dfa.states.add(D);\n        if (this.debug) {\n            console.log(\"adding new DFA state: \" + D);\n        }\n        return D;\n    }\n\n    reportAttemptingFullContext(dfa, conflictingAlts, configs, startIndex, stopIndex) {\n        if (this.debug || this.retry_debug) {\n            const interval = new Interval(startIndex, stopIndex + 1);\n            console.log(\"reportAttemptingFullContext decision=\" + dfa.decision + \":\" + configs +\n                               \", input=\" + this.parser.getTokenStream().getText(interval));\n        }\n        if (this.parser!==null) {\n            this.parser.getErrorListenerDispatch().reportAttemptingFullContext(this.parser, dfa, startIndex, stopIndex, conflictingAlts, configs);\n        }\n    }\n\n    reportContextSensitivity(dfa, prediction, configs, startIndex, stopIndex) {\n        if (this.debug || this.retry_debug) {\n            const interval = new Interval(startIndex, stopIndex + 1);\n            console.log(\"reportContextSensitivity decision=\" + dfa.decision + \":\" + configs +\n                               \", input=\" + this.parser.getTokenStream().getText(interval));\n        }\n        if (this.parser!==null) {\n            this.parser.getErrorListenerDispatch().reportContextSensitivity(this.parser, dfa, startIndex, stopIndex, prediction, configs);\n        }\n    }\n\n    // If context sensitive parsing, we know it's ambiguity not conflict//\n    reportAmbiguity(dfa, D, startIndex, stopIndex,\n                                   exact, ambigAlts, configs ) {\n        if (this.debug || this.retry_debug) {\n            const interval = new Interval(startIndex, stopIndex + 1);\n            console.log(\"reportAmbiguity \" + ambigAlts + \":\" + configs +\n                               \", input=\" + this.parser.getTokenStream().getText(interval));\n        }\n        if (this.parser!==null) {\n            this.parser.getErrorListenerDispatch().reportAmbiguity(this.parser, dfa, startIndex, stopIndex, exact, ambigAlts, configs);\n        }\n    }\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nimport ATN from './ATN.js';\nimport ATNDeserializer from './ATNDeserializer.js';\nimport LexerATNSimulator from './LexerATNSimulator.js';\nimport ParserATNSimulator from './ParserATNSimulator.js';\nimport PredictionMode from './PredictionMode.js';\n\nexport default { ATN, ATNDeserializer, LexerATNSimulator, ParserATNSimulator, PredictionMode }\n", "/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\nimport arrayToString from \"../utils/arrayToString.js\";\n\n/**\n * A DFA walker that knows how to dump them to serialized strings.\n */\nexport default class DFASerializer {\n    constructor(dfa, literalNames, symbolicNames) {\n        this.dfa = dfa;\n        this.literalNames = literalNames || [];\n        this.symbolicNames = symbolicNames || [];\n    }\n\n    toString() {\n       if(this.dfa.s0 === null) {\n           return null;\n       }\n       let buf = \"\";\n       const states = this.dfa.sortedStates();\n       for(let i=0; i<states.length; i++) {\n           const s = states[i];\n           if(s.edges!==null) {\n                const n = s.edges.length;\n                for(let j=0;j<n;j++) {\n                    const t = s.edges[j] || null;\n                    if(t!==null && t.stateNumber !== 0x7FFFFFFF) {\n                        buf = buf.concat(this.getStateString(s));\n                        buf = buf.concat(\"-\");\n                        buf = buf.concat(this.getEdgeLabel(j));\n                        buf = buf.concat(\"->\");\n                        buf = buf.concat(this.getStateString(t));\n                        buf = buf.concat('\\n');\n                    }\n                }\n           }\n       }\n       return buf.length===0 ? null : buf;\n    }\n\n    getEdgeLabel(i) {\n        if (i===0) {\n            return \"EOF\";\n        } else if(this.literalNames !==null || this.symbolicNames!==null) {\n            return this.literalNames[i-1] || this.symbolicNames[i-1];\n        } else {\n            return String.fromCharCode(i-1);\n        }\n    }\n\n    getStateString(s) {\n        const baseStateStr = ( s.isAcceptState ? \":\" : \"\") + \"s\" + s.stateNumber + ( s.requiresFullContext ? \"^\" : \"\");\n        if(s.isAcceptState) {\n            if (s.predicates !== null) {\n                return baseStateStr + \"=>\" + arrayToString(s.predicates);\n            } else {\n                return baseStateStr + \"=>\" + s.prediction.toString();\n            }\n        } else {\n            return baseStateStr;\n        }\n    }\n}\n\n\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport DFASerializer from \"./DFASerializer.js\";\n\nexport default class LexerDFASerializer extends DFASerializer {\n    constructor(dfa) {\n        super(dfa, null);\n    }\n\n    getEdgeLabel(i) {\n        return \"'\" + String.fromCharCode(i) + \"'\";\n    }\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nimport DFAState from './DFAState.js';\nimport StarLoopEntryState from '../state/StarLoopEntryState.js';\nimport ATNConfigSet from './../atn/ATNConfigSet.js';\nimport DFASerializer from './DFASerializer.js';\nimport LexerDFASerializer from './LexerDFASerializer.js';\nimport HashSet from \"../misc/HashSet.js\";\n\nexport default class DFA {\n\tconstructor(atnStartState, decision) {\n\t\tif (decision === undefined) {\n\t\t\tdecision = 0;\n\t\t}\n\t\t/**\n\t\t * From which ATN state did we create this DFA?\n\t\t */\n\t\tthis.atnStartState = atnStartState;\n\t\tthis.decision = decision;\n\t\t/**\n\t\t * A set of all DFA states. Use {@link Map} so we can get old state back\n\t\t * ({@link Set} only allows you to see if it's there).\n\t\t */\n\t\tthis._states = new HashSet();\n\t\tthis.s0 = null;\n\t\t/**\n\t\t * {@code true} if this DFA is for a precedence decision; otherwise,\n\t\t * {@code false}. This is the backing field for {@link //isPrecedenceDfa},\n\t\t * {@link //setPrecedenceDfa}\n\t\t */\n\t\tthis.precedenceDfa = false;\n\t\tif (atnStartState instanceof StarLoopEntryState)\n\t\t{\n\t\t\tif (atnStartState.isPrecedenceDecision) {\n\t\t\t\tthis.precedenceDfa = true;\n\t\t\t\tconst precedenceState = new DFAState(null, new ATNConfigSet());\n\t\t\t\tprecedenceState.edges = [];\n\t\t\t\tprecedenceState.isAcceptState = false;\n\t\t\t\tprecedenceState.requiresFullContext = false;\n\t\t\t\tthis.s0 = precedenceState;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get the start state for a specific precedence value.\n\t *\n\t * @param precedence The current precedence.\n\t * @return The start state corresponding to the specified precedence, or\n\t * {@code null} if no start state exists for the specified precedence.\n\t *\n\t * @throws IllegalStateException if this is not a precedence DFA.\n\t * @see //isPrecedenceDfa()\n\t */\n\tgetPrecedenceStartState(precedence) {\n\t\tif (!(this.precedenceDfa)) {\n\t\t\tthrow (\"Only precedence DFAs may contain a precedence start state.\");\n\t\t}\n\t\t// s0.edges is never null for a precedence DFA\n\t\tif (precedence < 0 || precedence >= this.s0.edges.length) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this.s0.edges[precedence] || null;\n\t}\n\n\t/**\n\t * Set the start state for a specific precedence value.\n\t *\n\t * @param precedence The current precedence.\n\t * @param startState The start state corresponding to the specified\n\t * precedence.\n\t *\n\t * @throws IllegalStateException if this is not a precedence DFA.\n\t * @see //isPrecedenceDfa()\n\t */\n\tsetPrecedenceStartState(precedence, startState) {\n\t\tif (!(this.precedenceDfa)) {\n\t\t\tthrow (\"Only precedence DFAs may contain a precedence start state.\");\n\t\t}\n\t\tif (precedence < 0) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * synchronization on s0 here is ok. when the DFA is turned into a\n\t\t * precedence DFA, s0 will be initialized once and not updated again\n\t\t * s0.edges is never null for a precedence DFA\n\t\t */\n\t\tthis.s0.edges[precedence] = startState;\n\t}\n\n\t/**\n\t * Sets whether this is a precedence DFA. If the specified value differs\n\t * from the current DFA configuration, the following actions are taken;\n\t * otherwise no changes are made to the current DFA.\n\t *\n\t * <ul>\n\t * <li>The {@link //states} map is cleared</li>\n\t * <li>If {@code precedenceDfa} is {@code false}, the initial state\n\t * {@link //s0} is set to {@code null}; otherwise, it is initialized to a new\n\t * {@link DFAState} with an empty outgoing {@link DFAState//edges} array to\n\t * store the start states for individual precedence values.</li>\n\t * <li>The {@link //precedenceDfa} field is updated</li>\n\t * </ul>\n\t *\n\t * @param precedenceDfa {@code true} if this is a precedence DFA; otherwise,\n\t * {@code false}\n\t */\n\tsetPrecedenceDfa(precedenceDfa) {\n\t\tif (this.precedenceDfa!==precedenceDfa) {\n\t\t\tthis._states = new HashSet();\n\t\t\tif (precedenceDfa) {\n\t\t\t\tconst precedenceState = new DFAState(null, new ATNConfigSet());\n\t\t\t\tprecedenceState.edges = [];\n\t\t\t\tprecedenceState.isAcceptState = false;\n\t\t\t\tprecedenceState.requiresFullContext = false;\n\t\t\t\tthis.s0 = precedenceState;\n\t\t\t} else {\n\t\t\t\tthis.s0 = null;\n\t\t\t}\n\t\t\tthis.precedenceDfa = precedenceDfa;\n\t\t}\n\t}\n\n\t/**\n\t * Return a list of all states in this DFA, ordered by state number.\n\t */\n\tsortedStates() {\n\t\tconst list = this._states.values();\n\t\treturn list.sort(function(a, b) {\n\t\t\treturn a.stateNumber - b.stateNumber;\n\t\t});\n\t}\n\n\ttoString(literalNames, symbolicNames) {\n\t\tliteralNames = literalNames || null;\n\t\tsymbolicNames = symbolicNames || null;\n\t\tif (this.s0 === null) {\n\t\t\treturn \"\";\n\t\t}\n\t\tconst serializer = new DFASerializer(this, literalNames, symbolicNames);\n\t\treturn serializer.toString();\n\t}\n\n\ttoLexerString() {\n\t\tif (this.s0 === null) {\n\t\t\treturn \"\";\n\t\t}\n\t\tconst serializer = new LexerDFASerializer(this);\n\t\treturn serializer.toString();\n\t}\n\n\tget states(){\n\t\treturn this._states;\n\t}\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nimport DFA from './DFA.js';\nimport DFASerializer from './DFASerializer.js';\nimport LexerDFASerializer from './LexerDFASerializer.js';\nimport PredPrediction from './PredPrediction.js';\n\nexport default { DFA, DFASerializer, LexerDFASerializer, PredPrediction };\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nexport default class ParseTreeListener {\n    visitTerminal(node) {\n    }\n\n    visitErrorNode(node) {\n    }\n\n    enterEveryRule(node) {\n    }\n\n    exitEveryRule(node) {\n    }\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nexport default class ParseTreeVisitor {\n    visit(ctx) {\n        if (Array.isArray(ctx)) {\n            return ctx.map(function(child) {\n                return child.accept(this);\n            }, this);\n        } else {\n            return ctx.accept(this);\n        }\n    }\n\n    visitChildren(ctx) {\n        if (ctx.children) {\n            return this.visit(ctx.children);\n        } else {\n            return null;\n        }\n    }\n\n    visitTerminal(node) {\n    }\n\n    visitErrorNode(node) {\n    }\n}\n\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport TerminalNode from \"./TerminalNode.js\";\nimport ErrorNode from \"./ErrorNode.js\";\n\nexport default class ParseTreeWalker {\n\n    /**\n     * Performs a walk on the given parse tree starting at the root and going down recursively\n     * with depth-first search. On each node, {@link ParseTreeWalker//enterRule} is called before\n     * recursively walking down into child nodes, then\n     * {@link ParseTreeWalker//exitRule} is called after the recursive call to wind up.\n     * @param listener The listener used by the walker to process grammar rules\n     * @param t The parse tree to be walked on\n     */\n    walk(listener, t) {\n        const errorNode = t instanceof ErrorNode ||\n            (t.isErrorNode !== undefined && t.isErrorNode());\n        if (errorNode) {\n            listener.visitErrorNode(t);\n        } else if (t instanceof TerminalNode) {\n            listener.visitTerminal(t);\n        } else {\n            this.enterRule(listener, t);\n            for (let i = 0; i < t.getChildCount(); i++) {\n                const child = t.getChild(i);\n                this.walk(listener, child);\n            }\n            this.exitRule(listener, t);\n        }\n    }\n\n    /**\n     * Enters a grammar rule by first triggering the generic event {@link ParseTreeListener//enterEveryRule}\n     * then by triggering the event specific to the given parse tree node\n     * @param listener The listener responding to the trigger events\n     * @param r The grammar rule containing the rule context\n     */\n    enterRule(listener, r) {\n        const ctx = r.getRuleContext();\n        listener.enterEveryRule(ctx);\n        ctx.enterRule(listener);\n    }\n\n    /**\n     * Exits a grammar rule by first triggering the event specific to the given parse tree node\n     * then by triggering the generic event {@link ParseTreeListener//exitEveryRule}\n     * @param listener The listener responding to the trigger events\n     * @param r The grammar rule containing the rule context\n     */\n    exitRule(listener, r) {\n        const ctx = r.getRuleContext();\n        ctx.exitRule(listener);\n        listener.exitEveryRule(ctx);\n    }\n}\n\nParseTreeWalker.DEFAULT = new ParseTreeWalker();\n", "/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nimport RuleNode from './RuleNode.js';\nimport ErrorNode from './ErrorNode.js';\nimport TerminalNode from './TerminalNode.js';\nimport ParseTreeListener from './ParseTreeListener.js';\nimport ParseTreeVisitor from './ParseTreeVisitor.js';\nimport ParseTreeWalker from './ParseTreeWalker.js';\nimport { default as Trees } from './Trees.js';\n\nexport default { Trees, RuleNode, ErrorNode, TerminalNode, ParseTreeListener, ParseTreeVisitor, ParseTreeWalker }\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport RecognitionException from \"./RecognitionException.js\";\n\n/**\n * This signifies any kind of mismatched input exceptions such as\n * when the current input does not match the expected token.\n */\nexport default class InputMismatchException extends RecognitionException {\n    constructor(recognizer) {\n        super({message: \"\", recognizer: recognizer, input: recognizer.getInputStream(), ctx: recognizer._ctx});\n        this.offendingToken = recognizer.getCurrentToken();\n    }\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport PredicateTransition from \"../transition/PredicateTransition.js\";\nimport RecognitionException from \"./RecognitionException.js\";\n\n/**\n * A semantic predicate failed during validation. Validation of predicates\n * occurs when normally parsing the alternative just like matching a token.\n * Disambiguating predicate evaluation occurs when we test a predicate during\n * prediction.\n */\nexport default class FailedPredicateException extends RecognitionException {\n    constructor(recognizer, predicate, message) {\n        super({\n            message: formatMessage(predicate, message || null), recognizer: recognizer,\n            input: recognizer.getInputStream(), ctx: recognizer._ctx\n        });\n        const s = recognizer._interp.atn.states[recognizer.state]\n        const trans = s.transitions[0]\n        if (trans instanceof PredicateTransition) {\n            this.ruleIndex = trans.ruleIndex;\n            this.predicateIndex = trans.predIndex;\n        } else {\n            this.ruleIndex = 0;\n            this.predicateIndex = 0;\n        }\n        this.predicate = predicate;\n        this.offendingToken = recognizer.getCurrentToken();\n    }\n}\n\n\nfunction formatMessage(predicate, message) {\n    if (message !==null) {\n        return message;\n    } else {\n        return \"failed predicate: {\" + predicate + \"}?\";\n    }\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nimport ErrorListener from './ErrorListener.js';\nimport Interval from '../misc/Interval.js';\nimport BitSet from \"../misc/BitSet.js\";\n\n\n/**\n * This implementation of {@link ANTLRErrorListener} can be used to identify\n *  certain potential correctness and performance problems in grammars. \"Reports\"\n *  are made by calling {@link Parser//notifyErrorListeners} with the appropriate\n *  message.\n *\n *  <ul>\n *  <li><b>Ambiguities</b>: These are cases where more than one path through the\n *  grammar can match the input.</li>\n *  <li><b>Weak context sensitivity</b>: These are cases where full-context\n *  prediction resolved an SLL conflict to a unique alternative which equaled the\n *  minimum alternative of the SLL conflict.</li>\n *  <li><b>Strong (forced) context sensitivity</b>: These are cases where the\n *  full-context prediction resolved an SLL conflict to a unique alternative,\n *  <em>and</em> the minimum alternative of the SLL conflict was found to not be\n *  a truly viable alternative. Two-stage parsing cannot be used for inputs where\n *  this situation occurs.</li>\n *  </ul>\n */\nexport default class DiagnosticErrorListener extends ErrorListener {\n\tconstructor(exactOnly) {\n\t\tsuper();\n\t\texactOnly = exactOnly || true;\n\t\t// whether all ambiguities or only exact ambiguities are reported.\n\t\tthis.exactOnly = exactOnly;\n\t}\n\n\treportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {\n\t\tif (this.exactOnly && !exact) {\n\t\t\treturn;\n\t\t}\n\t\tconst msg = \"reportAmbiguity d=\" +\n\t\t\tthis.getDecisionDescription(recognizer, dfa) +\n\t\t\t\": ambigAlts=\" +\n\t\t\tthis.getConflictingAlts(ambigAlts, configs) +\n\t\t\t\", input='\" +\n\t\t\trecognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + \"'\"\n\t\trecognizer.notifyErrorListeners(msg);\n\t}\n\n\treportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {\n\t\tconst msg = \"reportAttemptingFullContext d=\" +\n\t\t\tthis.getDecisionDescription(recognizer, dfa) +\n\t\t\t\", input='\" +\n\t\t\trecognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + \"'\"\n\t\trecognizer.notifyErrorListeners(msg);\n\t}\n\n\treportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs) {\n\t\tconst msg = \"reportContextSensitivity d=\" +\n\t\t\tthis.getDecisionDescription(recognizer, dfa) +\n\t\t\t\", input='\" +\n\t\t\trecognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + \"'\"\n\t\trecognizer.notifyErrorListeners(msg);\n\t}\n\n\tgetDecisionDescription(recognizer, dfa) {\n\t\tconst decision = dfa.decision\n\t\tconst ruleIndex = dfa.atnStartState.ruleIndex\n\n\t\tconst ruleNames = recognizer.ruleNames\n\t\tif (ruleIndex < 0 || ruleIndex >= ruleNames.length) {\n\t\t\treturn \"\" + decision;\n\t\t}\n\t\tconst ruleName = ruleNames[ruleIndex] || null\n\t\tif (ruleName === null || ruleName.length === 0) {\n\t\t\treturn \"\" + decision;\n\t\t}\n\t\treturn `${decision} (${ruleName})`;\n\t}\n\n\t/**\n\t * Computes the set of conflicting or ambiguous alternatives from a\n\t * configuration set, if that information was not already provided by the\n\t * parser.\n\t *\n\t * @param reportedAlts The set of conflicting or ambiguous alternatives, as\n\t * reported by the parser.\n\t * @param configs The conflicting or ambiguous configuration set.\n\t * @return Returns {@code reportedAlts} if it is not {@code null}, otherwise\n\t * returns the set of alternatives represented in {@code configs}.\n     */\n\tgetConflictingAlts(reportedAlts, configs) {\n\t\tif (reportedAlts !== null) {\n\t\t\treturn reportedAlts;\n\t\t}\n\t\tconst result = new BitSet()\n\t\tfor (let i = 0; i < configs.items.length; i++) {\n\t\t\tresult.add(configs.items[i].alt);\n\t\t}\n\t\treturn `{${result.values().join(\", \")}}`;\n\t}\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nexport default class ParseCancellationException extends Error {\n    constructor() {\n        super()\n        Error.captureStackTrace(this, ParseCancellationException);\n    }\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nexport default class ErrorStrategy {\n\n    reset(recognizer) {\n    }\n\n    recoverInline(recognizer) {\n    }\n\n    recover(recognizer, e) {\n    }\n\n    sync(recognizer) {\n    }\n\n    inErrorRecoveryMode(recognizer) {\n    }\n\n    reportError(recognizer) {\n    }\n}\n\n\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport FailedPredicateException from \"./FailedPredicateException.js\";\nimport InputMismatchException from \"./InputMismatchException.js\";\nimport NoViableAltException from \"./NoViableAltException.js\";\nimport ATNState from \"../state/ATNState.js\";\nimport Token from '../Token.js';\nimport Interval from \"../misc/Interval.js\";\nimport IntervalSet from \"../misc/IntervalSet.js\";\nimport ErrorStrategy from \"./ErrorStrategy.js\";\n\n/**\n * This is the default implementation of {@link ANTLRErrorStrategy} used for\n * error reporting and recovery in ANTLR parsers.\n */\nexport default class DefaultErrorStrategy extends ErrorStrategy {\n    constructor() {\n        super();\n        /**\n         * Indicates whether the error strategy is currently \"recovering from an\n         * error\". This is used to suppress reporting multiple error messages while\n         * attempting to recover from a detected syntax error.\n         *\n         * @see //inErrorRecoveryMode\n         */\n        this.errorRecoveryMode = false;\n\n        /**\n         * The index into the input stream where the last error occurred.\n         * This is used to prevent infinite loops where an error is found\n         * but no token is consumed during recovery...another error is found,\n         * ad nauseum. This is a failsafe mechanism to guarantee that at least\n         * one token/tree node is consumed for two errors.\n         */\n        this.lastErrorIndex = -1;\n        this.lastErrorStates = null;\n        this.nextTokensContext = null;\n        this.nextTokenState = 0;\n    }\n\n    /**\n     * <p>The default implementation simply calls {@link //endErrorCondition} to\n     * ensure that the handler is not in error recovery mode.</p>\n     */\n    reset(recognizer) {\n        this.endErrorCondition(recognizer);\n    }\n\n    /**\n     * This method is called to enter error recovery mode when a recognition\n     * exception is reported.\n     *\n     * @param recognizer the parser instance\n     */\n    beginErrorCondition(recognizer) {\n        this.errorRecoveryMode = true;\n    }\n\n    inErrorRecoveryMode(recognizer) {\n        return this.errorRecoveryMode;\n    }\n\n    /**\n     * This method is called to leave error recovery mode after recovering from\n     * a recognition exception.\n     * @param recognizer\n     */\n    endErrorCondition(recognizer) {\n        this.errorRecoveryMode = false;\n        this.lastErrorStates = null;\n        this.lastErrorIndex = -1;\n    }\n\n    /**\n     * {@inheritDoc}\n     * <p>The default implementation simply calls {@link //endErrorCondition}.</p>\n     */\n    reportMatch(recognizer) {\n        this.endErrorCondition(recognizer);\n    }\n\n    /**\n     * {@inheritDoc}\n     *\n     * <p>The default implementation returns immediately if the handler is already\n     * in error recovery mode. Otherwise, it calls {@link //beginErrorCondition}\n     * and dispatches the reporting task based on the runtime type of {@code e}\n     * according to the following table.</p>\n     *\n     * <ul>\n     * <li>{@link NoViableAltException}: Dispatches the call to\n     * {@link //reportNoViableAlternative}</li>\n     * <li>{@link InputMismatchException}: Dispatches the call to\n     * {@link //reportInputMismatch}</li>\n     * <li>{@link FailedPredicateException}: Dispatches the call to\n     * {@link //reportFailedPredicate}</li>\n     * <li>All other types: calls {@link Parser//notifyErrorListeners} to report\n     * the exception</li>\n     * </ul>\n     */\n    reportError(recognizer, e) {\n        // if we've already reported an error and have not matched a token\n        // yet successfully, don't report any errors.\n        if(this.inErrorRecoveryMode(recognizer)) {\n            return; // don't report spurious errors\n        }\n        this.beginErrorCondition(recognizer);\n        if ( e instanceof NoViableAltException ) {\n            this.reportNoViableAlternative(recognizer, e);\n        } else if ( e instanceof InputMismatchException ) {\n            this.reportInputMismatch(recognizer, e);\n        } else if ( e instanceof FailedPredicateException ) {\n            this.reportFailedPredicate(recognizer, e);\n        } else {\n            console.log(\"unknown recognition error type: \" + e.constructor.name);\n            console.log(e.stack);\n            recognizer.notifyErrorListeners(e.getOffendingToken(), e.getMessage(), e);\n        }\n    }\n\n    /**\n     *\n     * {@inheritDoc}\n     *\n     * <p>The default implementation resynchronizes the parser by consuming tokens\n     * until we find one in the resynchronization set--loosely the set of tokens\n     * that can follow the current rule.</p>\n     *\n     */\n    recover(recognizer, e) {\n        if (this.lastErrorIndex===recognizer.getInputStream().index &&\n            this.lastErrorStates !== null && this.lastErrorStates.indexOf(recognizer.state)>=0) {\n            // uh oh, another error at same token index and previously-visited\n            // state in ATN; must be a case where LT(1) is in the recovery\n            // token set so nothing got consumed. Consume a single token\n            // at least to prevent an infinite loop; this is a failsafe.\n            recognizer.consume();\n        }\n        this.lastErrorIndex = recognizer._input.index;\n        if (this.lastErrorStates === null) {\n            this.lastErrorStates = [];\n        }\n        this.lastErrorStates.push(recognizer.state);\n        const followSet = this.getErrorRecoverySet(recognizer)\n        this.consumeUntil(recognizer, followSet);\n    }\n\n    /**\n     * The default implementation of {@link ANTLRErrorStrategy//sync} makes sure\n     * that the current lookahead symbol is consistent with what were expecting\n     * at this point in the ATN. You can call this anytime but ANTLR only\n     * generates code to check before subrules/loops and each iteration.\n     *\n     * <p>Implements Jim Idle's magic sync mechanism in closures and optional\n     * subrules. E.g.,</p>\n     *\n     * <pre>\n     * a : sync ( stuff sync )* ;\n     * sync : {consume to what can follow sync} ;\n     * </pre>\n     *\n     * At the start of a sub rule upon error, {@link //sync} performs single\n     * token deletion, if possible. If it can't do that, it bails on the current\n     * rule and uses the default error recovery, which consumes until the\n     * resynchronization set of the current rule.\n     *\n     * <p>If the sub rule is optional ({@code (...)?}, {@code (...)*}, or block\n     * with an empty alternative), then the expected set includes what follows\n     * the subrule.</p>\n     *\n     * <p>During loop iteration, it consumes until it sees a token that can start a\n     * sub rule or what follows loop. Yes, that is pretty aggressive. We opt to\n     * stay in the loop as long as possible.</p>\n     *\n     * <p><strong>ORIGINS</strong></p>\n     *\n     * <p>Previous versions of ANTLR did a poor job of their recovery within loops.\n     * A single mismatch token or missing token would force the parser to bail\n     * out of the entire rules surrounding the loop. So, for rule</p>\n     *\n     * <pre>\n     * classDef : 'class' ID '{' member* '}'\n     * </pre>\n     *\n     * input with an extra token between members would force the parser to\n     * consume until it found the next class definition rather than the next\n     * member definition of the current class.\n     *\n     * <p>This functionality cost a little bit of effort because the parser has to\n     * compare token set at the start of the loop and at each iteration. If for\n     * some reason speed is suffering for you, you can turn off this\n     * functionality by simply overriding this method as a blank { }.</p>\n     *\n     */\n    sync(recognizer) {\n        // If already recovering, don't try to sync\n        if (this.inErrorRecoveryMode(recognizer)) {\n            return;\n        }\n        const s = recognizer._interp.atn.states[recognizer.state];\n        const la = recognizer.getTokenStream().LA(1);\n        // try cheaper subset first; might get lucky. seems to shave a wee bit off\n        const nextTokens = recognizer.atn.nextTokens(s);\n        if(nextTokens.contains(la)) {\n            this.nextTokensContext = null;\n            this.nextTokenState = ATNState.INVALID_STATE_NUMBER;\n            return;\n        } else if (nextTokens.contains(Token.EPSILON)) {\n            if(this.nextTokensContext === null) {\n                // It's possible the next token won't match information tracked\n                // by sync is restricted for performance.\n                this.nextTokensContext = recognizer._ctx;\n                this.nextTokensState = recognizer._stateNumber;\n            }\n            return;\n        }\n        switch (s.stateType) {\n            case ATNState.BLOCK_START:\n            case ATNState.STAR_BLOCK_START:\n            case ATNState.PLUS_BLOCK_START:\n            case ATNState.STAR_LOOP_ENTRY:\n                // report error and recover if possible\n                if( this.singleTokenDeletion(recognizer) !== null) {\n                    return;\n                } else {\n                    throw new InputMismatchException(recognizer);\n                }\n            case ATNState.PLUS_LOOP_BACK:\n            case ATNState.STAR_LOOP_BACK:\n                {\n                this.reportUnwantedToken(recognizer);\n                const expecting = new IntervalSet();\n                expecting.addSet(recognizer.getExpectedTokens());\n                const whatFollowsLoopIterationOrRule = expecting.addSet(this.getErrorRecoverySet(recognizer));\n                this.consumeUntil(recognizer, whatFollowsLoopIterationOrRule);\n                }\n                break;\n            default:\n            // do nothing if we can't identify the exact kind of ATN state\n        }\n    }\n\n    /**\n     * This is called by {@link //reportError} when the exception is a\n     * {@link NoViableAltException}.\n     *\n     * @see //reportError\n     *\n     * @param recognizer the parser instance\n     * @param e the recognition exception\n     */\n    reportNoViableAlternative(recognizer, e) {\n        const tokens = recognizer.getTokenStream()\n        let input\n        if(tokens !== null) {\n            if (e.startToken.type===Token.EOF) {\n                input = \"<EOF>\";\n            } else {\n                input = tokens.getText(new Interval(e.startToken.tokenIndex, e.offendingToken.tokenIndex));\n            }\n        } else {\n            input = \"<unknown input>\";\n        }\n        const msg = \"no viable alternative at input \" + this.escapeWSAndQuote(input)\n        recognizer.notifyErrorListeners(msg, e.offendingToken, e);\n    }\n\n    /**\n     * This is called by {@link //reportError} when the exception is an\n     * {@link InputMismatchException}.\n     *\n     * @see //reportError\n     *\n     * @param recognizer the parser instance\n     * @param e the recognition exception\n     */\n    reportInputMismatch(recognizer, e) {\n        const msg = \"mismatched input \" + this.getTokenErrorDisplay(e.offendingToken) +\n            \" expecting \" + e.getExpectedTokens().toString(recognizer.literalNames, recognizer.symbolicNames)\n        recognizer.notifyErrorListeners(msg, e.offendingToken, e);\n    }\n\n    /**\n     * This is called by {@link //reportError} when the exception is a\n     * {@link FailedPredicateException}.\n     *\n     * @see //reportError\n     *\n     * @param recognizer the parser instance\n     * @param e the recognition exception\n     */\n    reportFailedPredicate(recognizer, e) {\n        const ruleName = recognizer.ruleNames[recognizer._ctx.ruleIndex]\n        const msg = \"rule \" + ruleName + \" \" + e.message\n        recognizer.notifyErrorListeners(msg, e.offendingToken, e);\n    }\n\n    /**\n     * This method is called to report a syntax error which requires the removal\n     * of a token from the input stream. At the time this method is called, the\n     * erroneous symbol is current {@code LT(1)} symbol and has not yet been\n     * removed from the input stream. When this method returns,\n     * {@code recognizer} is in error recovery mode.\n     *\n     * <p>This method is called when {@link //singleTokenDeletion} identifies\n     * single-token deletion as a viable recovery strategy for a mismatched\n     * input error.</p>\n     *\n     * <p>The default implementation simply returns if the handler is already in\n     * error recovery mode. Otherwise, it calls {@link //beginErrorCondition} to\n     * enter error recovery mode, followed by calling\n     * {@link Parser//notifyErrorListeners}.</p>\n     *\n     * @param recognizer the parser instance\n     *\n     */\n    reportUnwantedToken(recognizer) {\n        if (this.inErrorRecoveryMode(recognizer)) {\n            return;\n        }\n        this.beginErrorCondition(recognizer);\n        const t = recognizer.getCurrentToken()\n        const tokenName = this.getTokenErrorDisplay(t)\n        const expecting = this.getExpectedTokens(recognizer)\n        const msg = \"extraneous input \" + tokenName + \" expecting \" +\n            expecting.toString(recognizer.literalNames, recognizer.symbolicNames)\n        recognizer.notifyErrorListeners(msg, t, null);\n    }\n\n    /**\n     * This method is called to report a syntax error which requires the\n     * insertion of a missing token into the input stream. At the time this\n     * method is called, the missing token has not yet been inserted. When this\n     * method returns, {@code recognizer} is in error recovery mode.\n     *\n     * <p>This method is called when {@link //singleTokenInsertion} identifies\n     * single-token insertion as a viable recovery strategy for a mismatched\n     * input error.</p>\n     *\n     * <p>The default implementation simply returns if the handler is already in\n     * error recovery mode. Otherwise, it calls {@link //beginErrorCondition} to\n     * enter error recovery mode, followed by calling\n     * {@link Parser//notifyErrorListeners}.</p>\n     *\n     * @param recognizer the parser instance\n     */\n    reportMissingToken(recognizer) {\n        if ( this.inErrorRecoveryMode(recognizer)) {\n            return;\n        }\n        this.beginErrorCondition(recognizer);\n        const t = recognizer.getCurrentToken()\n        const expecting = this.getExpectedTokens(recognizer)\n        const msg = \"missing \" + expecting.toString(recognizer.literalNames, recognizer.symbolicNames) +\n            \" at \" + this.getTokenErrorDisplay(t)\n        recognizer.notifyErrorListeners(msg, t, null);\n    }\n\n    /**\n     * <p>The default implementation attempts to recover from the mismatched input\n     * by using single token insertion and deletion as described below. If the\n     * recovery attempt fails, this method throws an\n     * {@link InputMismatchException}.</p>\n     *\n     * <p><strong>EXTRA TOKEN</strong> (single token deletion)</p>\n     *\n     * <p>{@code LA(1)} is not what we are looking for. If {@code LA(2)} has the\n     * right token, however, then assume {@code LA(1)} is some extra spurious\n     * token and delete it. Then consume and return the next token (which was\n     * the {@code LA(2)} token) as the successful result of the match operation.</p>\n     *\n     * <p>This recovery strategy is implemented by {@link\n        * //singleTokenDeletion}.</p>\n     *\n     * <p><strong>MISSING TOKEN</strong> (single token insertion)</p>\n     *\n     * <p>If current token (at {@code LA(1)}) is consistent with what could come\n     * after the expected {@code LA(1)} token, then assume the token is missing\n     * and use the parser's {@link TokenFactory} to create it on the fly. The\n     * \"insertion\" is performed by returning the created token as the successful\n     * result of the match operation.</p>\n     *\n     * <p>This recovery strategy is implemented by {@link\n        * //singleTokenInsertion}.</p>\n     *\n     * <p><strong>EXAMPLE</strong></p>\n     *\n     * <p>For example, Input {@code i=(3;} is clearly missing the {@code ')'}. When\n     * the parser returns from the nested call to {@code expr}, it will have\n     * call chain:</p>\n     *\n     * <pre>\n     * stat &rarr; expr &rarr; atom\n     * </pre>\n     *\n     * and it will be trying to match the {@code ')'} at this point in the\n     * derivation:\n     *\n     * <pre>\n     * =&gt; ID '=' '(' INT ')' ('+' atom)* ';'\n     * ^\n     * </pre>\n     *\n     * The attempt to match {@code ')'} will fail when it sees {@code ';'} and\n     * call {@link //recoverInline}. To recover, it sees that {@code LA(1)==';'}\n     * is in the set of tokens that can follow the {@code ')'} token reference\n     * in rule {@code atom}. It can assume that you forgot the {@code ')'}.\n     */\n    recoverInline(recognizer) {\n        // SINGLE TOKEN DELETION\n        const matchedSymbol = this.singleTokenDeletion(recognizer)\n        if (matchedSymbol !== null) {\n            // we have deleted the extra token.\n            // now, move past ttype token as if all were ok\n            recognizer.consume();\n            return matchedSymbol;\n        }\n        // SINGLE TOKEN INSERTION\n        if (this.singleTokenInsertion(recognizer)) {\n            return this.getMissingSymbol(recognizer);\n        }\n        // even that didn't work; must throw the exception\n        throw new InputMismatchException(recognizer);\n    }\n\n    /**\n     * This method implements the single-token insertion inline error recovery\n     * strategy. It is called by {@link //recoverInline} if the single-token\n     * deletion strategy fails to recover from the mismatched input. If this\n     * method returns {@code true}, {@code recognizer} will be in error recovery\n     * mode.\n     *\n     * <p>This method determines whether or not single-token insertion is viable by\n     * checking if the {@code LA(1)} input symbol could be successfully matched\n     * if it were instead the {@code LA(2)} symbol. If this method returns\n     * {@code true}, the caller is responsible for creating and inserting a\n     * token with the correct type to produce this behavior.</p>\n     *\n     * @param recognizer the parser instance\n     * @return {@code true} if single-token insertion is a viable recovery\n     * strategy for the current mismatched input, otherwise {@code false}\n     */\n    singleTokenInsertion(recognizer) {\n        const currentSymbolType = recognizer.getTokenStream().LA(1)\n        // if current token is consistent with what could come after current\n        // ATN state, then we know we're missing a token; error recovery\n        // is free to conjure up and insert the missing token\n        const atn = recognizer._interp.atn\n        const currentState = atn.states[recognizer.state]\n        const next = currentState.transitions[0].target\n        const expectingAtLL2 = atn.nextTokens(next, recognizer._ctx)\n        if (expectingAtLL2.contains(currentSymbolType) ){\n            this.reportMissingToken(recognizer);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * This method implements the single-token deletion inline error recovery\n     * strategy. It is called by {@link //recoverInline} to attempt to recover\n     * from mismatched input. If this method returns null, the parser and error\n     * handler state will not have changed. If this method returns non-null,\n     * {@code recognizer} will <em>not</em> be in error recovery mode since the\n     * returned token was a successful match.\n     *\n     * <p>If the single-token deletion is successful, this method calls\n     * {@link //reportUnwantedToken} to report the error, followed by\n     * {@link Parser//consume} to actually \"delete\" the extraneous token. Then,\n     * before returning {@link //reportMatch} is called to signal a successful\n     * match.</p>\n     *\n     * @param recognizer the parser instance\n     * @return the successfully matched {@link Token} instance if single-token\n     * deletion successfully recovers from the mismatched input, otherwise\n     * {@code null}\n     */\n    singleTokenDeletion(recognizer) {\n        const nextTokenType = recognizer.getTokenStream().LA(2)\n        const expecting = this.getExpectedTokens(recognizer)\n        if (expecting.contains(nextTokenType)) {\n            this.reportUnwantedToken(recognizer);\n            // print(\"recoverFromMismatchedToken deleting \" \\\n            // + str(recognizer.getTokenStream().LT(1)) \\\n            // + \" since \" + str(recognizer.getTokenStream().LT(2)) \\\n            // + \" is what we want\", file=sys.stderr)\n            recognizer.consume(); // simply delete extra token\n            // we want to return the token we're actually matching\n            const matchedSymbol = recognizer.getCurrentToken()\n            this.reportMatch(recognizer); // we know current token is correct\n            return matchedSymbol;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Conjure up a missing token during error recovery.\n     *\n     * The recognizer attempts to recover from single missing\n     * symbols. But, actions might refer to that missing symbol.\n     * For example, x=ID {f($x);}. The action clearly assumes\n     * that there has been an identifier matched previously and that\n     * $x points at that token. If that token is missing, but\n     * the next token in the stream is what we want we assume that\n     * this token is missing and we keep going. Because we\n     * have to return some token to replace the missing token,\n     * we have to conjure one up. This method gives the user control\n     * over the tokens returned for missing tokens. Mostly,\n     * you will want to create something special for identifier\n     * tokens. For literals such as '{' and ',', the default\n     * action in the parser or tree parser works. It simply creates\n     * a CommonToken of the appropriate type. The text will be the token.\n     * If you change what tokens must be created by the lexer,\n     * override this method to create the appropriate tokens.\n     *\n     */\n    getMissingSymbol(recognizer) {\n        const currentSymbol = recognizer.getCurrentToken()\n        const expecting = this.getExpectedTokens(recognizer)\n        const expectedTokenType = expecting.first() // get any element\n        let tokenText\n        if (expectedTokenType===Token.EOF) {\n            tokenText = \"<missing EOF>\";\n        } else {\n            tokenText = \"<missing \" + recognizer.literalNames[expectedTokenType] + \">\";\n        }\n        let current = currentSymbol\n        const lookback = recognizer.getTokenStream().LT(-1)\n        if (current.type===Token.EOF && lookback !== null) {\n            current = lookback;\n        }\n        return recognizer.getTokenFactory().create(current.source,\n            expectedTokenType, tokenText, Token.DEFAULT_CHANNEL,\n            -1, -1, current.line, current.column);\n    }\n\n    getExpectedTokens(recognizer) {\n        return recognizer.getExpectedTokens();\n    }\n\n    /**\n     * How should a token be displayed in an error message? The default\n     * is to display just the text, but during development you might\n     * want to have a lot of information spit out. Override in that case\n     * to use t.toString() (which, for CommonToken, dumps everything about\n     * the token). This is better than forcing you to override a method in\n     * your token objects because you don't have to go modify your lexer\n     * so that it creates a new Java type.\n     */\n    getTokenErrorDisplay(t) {\n        if (t === null) {\n            return \"<no token>\";\n        }\n        let s = t.text\n        if (s === null) {\n            if (t.type===Token.EOF) {\n                s = \"<EOF>\";\n            } else {\n                s = \"<\" + t.type + \">\";\n            }\n        }\n        return this.escapeWSAndQuote(s);\n    }\n\n    escapeWSAndQuote(s) {\n        s = s.replace(/\\n/g,\"\\\\n\");\n        s = s.replace(/\\r/g,\"\\\\r\");\n        s = s.replace(/\\t/g,\"\\\\t\");\n        return \"'\" + s + \"'\";\n    }\n\n    /**\n     * Compute the error recovery set for the current rule. During\n     * rule invocation, the parser pushes the set of tokens that can\n     * follow that rule reference on the stack; this amounts to\n     * computing FIRST of what follows the rule reference in the\n     * enclosing rule. See LinearApproximator.FIRST().\n     * This local follow set only includes tokens\n     * from within the rule; i.e., the FIRST computation done by\n     * ANTLR stops at the end of a rule.\n     *\n     * EXAMPLE\n     *\n     * When you find a \"no viable alt exception\", the input is not\n     * consistent with any of the alternatives for rule r. The best\n     * thing to do is to consume tokens until you see something that\n     * can legally follow a call to r//or* any rule that called r.\n     * You don't want the exact set of viable next tokens because the\n     * input might just be missing a token--you might consume the\n     * rest of the input looking for one of the missing tokens.\n     *\n     * Consider grammar:\n     *\n     * a : '[' b ']'\n     * | '(' b ')'\n     * ;\n     * b : c '^' INT ;\n     * c : ID\n     * | INT\n     * ;\n     *\n     * At each rule invocation, the set of tokens that could follow\n     * that rule is pushed on a stack. Here are the various\n     * context-sensitive follow sets:\n     *\n     * FOLLOW(b1_in_a) = FIRST(']') = ']'\n     * FOLLOW(b2_in_a) = FIRST(')') = ')'\n     * FOLLOW(c_in_b) = FIRST('^') = '^'\n     *\n     * Upon erroneous input \"[]\", the call chain is\n     *\n     * a -> b -> c\n     *\n     * and, hence, the follow context stack is:\n     *\n     * depth follow set start of rule execution\n     * 0 <EOF> a (from main())\n     * 1 ']' b\n     * 2 '^' c\n     *\n     * Notice that ')' is not included, because b would have to have\n     * been called from a different context in rule a for ')' to be\n     * included.\n     *\n     * For error recovery, we cannot consider FOLLOW(c)\n     * (context-sensitive or otherwise). We need the combined set of\n     * all context-sensitive FOLLOW sets--the set of all tokens that\n     * could follow any reference in the call chain. We need to\n     * resync to one of those tokens. Note that FOLLOW(c)='^' and if\n     * we resync'd to that token, we'd consume until EOF. We need to\n     * sync to context-sensitive FOLLOWs for a, b, and c: {']','^'}.\n     * In this case, for input \"[]\", LA(1) is ']' and in the set, so we would\n     * not consume anything. After printing an error, rule c would\n     * return normally. Rule b would not find the required '^' though.\n     * At this point, it gets a mismatched token error and throws an\n     * exception (since LA(1) is not in the viable following token\n     * set). The rule exception handler tries to recover, but finds\n     * the same recovery set and doesn't consume anything. Rule b\n     * exits normally returning to rule a. Now it finds the ']' (and\n     * with the successful match exits errorRecovery mode).\n     *\n     * So, you can see that the parser walks up the call chain looking\n     * for the token that was a member of the recovery set.\n     *\n     * Errors are not generated in errorRecovery mode.\n     *\n     * ANTLR's error recovery mechanism is based upon original ideas:\n     *\n     * \"Algorithms + Data Structures = Programs\" by Niklaus Wirth\n     *\n     * and\n     *\n     * \"A note on error recovery in recursive descent parsers\":\n     * http://portal.acm.org/citation.cfm?id=947902.947905\n     *\n     * Later, Josef Grosch had some good ideas:\n     *\n     * \"Efficient and Comfortable Error Recovery in Recursive Descent\n     * Parsers\":\n     * ftp://www.cocolab.com/products/cocktail/doca4.ps/ell.ps.zip\n     *\n     * Like Grosch I implement context-sensitive FOLLOW sets that are combined\n     * at run-time upon error to avoid overhead during parsing.\n     */\n    getErrorRecoverySet(recognizer) {\n        const atn = recognizer._interp.atn\n        let ctx = recognizer._ctx\n        const recoverSet = new IntervalSet()\n        while (ctx !== null && ctx.invokingState>=0) {\n            // compute what follows who invoked us\n            const invokingState = atn.states[ctx.invokingState]\n            const rt = invokingState.transitions[0]\n            const follow = atn.nextTokens(rt.followState)\n            recoverSet.addSet(follow);\n            ctx = ctx.parentCtx;\n        }\n        recoverSet.removeOne(Token.EPSILON);\n        return recoverSet;\n    }\n\n// Consume tokens until one matches the given token set.//\n    consumeUntil(recognizer, set) {\n        let ttype = recognizer.getTokenStream().LA(1)\n        while( ttype !== Token.EOF && !set.contains(ttype)) {\n            recognizer.consume();\n            ttype = recognizer.getTokenStream().LA(1);\n        }\n    }\n}\n\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport InputMismatchException from \"./InputMismatchException.js\";\nimport ParseCancellationException from \"./ParseCancellationException.js\";\nimport DefaultErrorStrategy from \"./DefaultErrorStrategy.js\";\n\n/**\n * This implementation of {@link ANTLRErrorStrategy} responds to syntax errors\n * by immediately canceling the parse operation with a\n * {@link ParseCancellationException}. The implementation ensures that the\n * {@link ParserRuleContext//exception} field is set for all parse tree nodes\n * that were not completed prior to encountering the error.\n *\n * <p>\n * This error strategy is useful in the following scenarios.</p>\n *\n * <ul>\n * <li><strong>Two-stage parsing:</strong> This error strategy allows the first\n * stage of two-stage parsing to immediately terminate if an error is\n * encountered, and immediately fall back to the second stage. In addition to\n * avoiding wasted work by attempting to recover from errors here, the empty\n * implementation of {@link BailErrorStrategy//sync} improves the performance of\n * the first stage.</li>\n * <li><strong>Silent validation:</strong> When syntax errors are not being\n * reported or logged, and the parse result is simply ignored if errors occur,\n * the {@link BailErrorStrategy} avoids wasting work on recovering from errors\n * when the result will be ignored either way.</li>\n * </ul>\n *\n * <p>\n * {@code myparser.setErrorHandler(new BailErrorStrategy());}</p>\n *\n * @see Parser//setErrorHandler(ANTLRErrorStrategy)\n * */\nexport default class BailErrorStrategy extends DefaultErrorStrategy {\n\n    constructor() {\n        super();\n    }\n\n    /**\n     * Instead of recovering from exception {@code e}, re-throw it wrapped\n     * in a {@link ParseCancellationException} so it is not caught by the\n     * rule function catches. Use {@link Exception//getCause()} to get the\n     * original {@link RecognitionException}.\n     */\n    recover(recognizer, e) {\n        let context = recognizer._ctx\n        while (context !== null) {\n            context.exception = e;\n            context = context.parentCtx;\n        }\n        throw new ParseCancellationException(e);\n    }\n\n    /**\n     * Make sure we don't attempt to recover inline; if the parser\n     * successfully recovers, it won't throw an exception.\n     */\n    recoverInline(recognizer) {\n        this.recover(recognizer, new InputMismatchException(recognizer));\n    }\n\n// Make sure we don't attempt to recover from problems in subrules.//\n    sync(recognizer) {\n        // pass\n    }\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nimport RecognitionException from './RecognitionException.js';\nimport NoViableAltException from './NoViableAltException.js';\nimport LexerNoViableAltException from './LexerNoViableAltException.js';\nimport InputMismatchException from './InputMismatchException.js';\nimport FailedPredicateException from './FailedPredicateException.js';\nimport DiagnosticErrorListener from './DiagnosticErrorListener.js';\nimport BailErrorStrategy from './BailErrorStrategy.js';\nimport DefaultErrorStrategy from './DefaultErrorStrategy.js';\nimport ErrorListener from './ErrorListener.js';\n\nexport default {\n    RecognitionException, NoViableAltException, LexerNoViableAltException, InputMismatchException, FailedPredicateException,\n    DiagnosticErrorListener, BailErrorStrategy, DefaultErrorStrategy, ErrorListener\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nimport Token from './Token.js';\nimport './polyfills/codepointat.js';\nimport './polyfills/fromcodepoint.js';\n\n/**\n * If decodeToUnicodeCodePoints is true, the input is treated\n * as a series of Unicode code points.\n *\n * Otherwise, the input is treated as a series of 16-bit UTF-16 code\n * units.\n */\nexport default class InputStream {\n\tconstructor(data, decodeToUnicodeCodePoints) {\n\t\tthis.name = \"<empty>\";\n\t\tthis.strdata = data;\n\t\tthis.decodeToUnicodeCodePoints = decodeToUnicodeCodePoints || false;\n\t\t// _loadString - Vacuum all input from a string and then treat it like a buffer.\n\t\tthis._index = 0;\n\t\tthis.data = [];\n\t\tif (this.decodeToUnicodeCodePoints) {\n\t\t\tfor (let i = 0; i < this.strdata.length; ) {\n\t\t\t\tconst codePoint = this.strdata.codePointAt(i);\n\t\t\t\tthis.data.push(codePoint);\n\t\t\t\ti += codePoint <= 0xFFFF ? 1 : 2;\n\t\t\t}\n\t\t} else {\n\t\t\tthis.data = new Array(this.strdata.length);\n\t\t\tfor (let i = 0; i < this.strdata.length; i++) {\n\t\t\t\tconst codeUnit = this.strdata.charCodeAt(i);\n\t\t\t\tthis.data[i] = codeUnit;\n\t\t\t}\n\t\t}\n\t\tthis._size = this.data.length;\n\t}\n\n\t/**\n\t * Reset the stream so that it's in the same state it was\n\t * when the object was created *except* the data array is not\n\t * touched.\n\t */\n\treset() {\n\t\tthis._index = 0;\n\t}\n\n\tconsume() {\n\t\tif (this._index >= this._size) {\n\t\t\t// assert this.LA(1) == Token.EOF\n\t\t\tthrow (\"cannot consume EOF\");\n\t\t}\n\t\tthis._index += 1;\n\t}\n\n\tLA(offset) {\n\t\tif (offset === 0) {\n\t\t\treturn 0; // undefined\n\t\t}\n\t\tif (offset < 0) {\n\t\t\toffset += 1; // e.g., translate LA(-1) to use offset=0\n\t\t}\n\t\tconst pos = this._index + offset - 1;\n\t\tif (pos < 0 || pos >= this._size) { // invalid\n\t\t\treturn Token.EOF;\n\t\t}\n\t\treturn this.data[pos];\n\t}\n\n\tLT(offset) {\n\t\treturn this.LA(offset);\n\t}\n\n// mark/release do nothing; we have entire buffer\n\tmark() {\n\t\treturn -1;\n\t}\n\n\trelease(marker) {\n\t}\n\n\t/**\n\t * consume() ahead until p==_index; can't just set p=_index as we must\n\t * update line and column. If we seek backwards, just set p\n\t */\n\tseek(_index) {\n\t\tif (_index <= this._index) {\n\t\t\tthis._index = _index; // just jump; don't update stream state (line,\n\t\t\t\t\t\t\t\t\t// ...)\n\t\t\treturn;\n\t\t}\n\t\t// seek forward\n\t\tthis._index = Math.min(_index, this._size);\n\t}\n\n\tgetText(start, stop) {\n\t\tif (stop >= this._size) {\n\t\t\tstop = this._size - 1;\n\t\t}\n\t\tif (start >= this._size) {\n\t\t\treturn \"\";\n\t\t} else {\n\t\t\tif (this.decodeToUnicodeCodePoints) {\n\t\t\t\tlet result = \"\";\n\t\t\t\tfor (let i = start; i <= stop; i++) {\n\t\t\t\t\tresult += String.fromCodePoint(this.data[i]);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this.strdata.slice(start, stop + 1);\n\t\t\t}\n\t\t}\n\t}\n\n\ttoString() {\n\t\treturn this.strdata;\n\t}\n\n\tget index(){\n\t\treturn this._index;\n\t}\n\n\tget size(){\n\t\treturn this._size;\n\t}\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nimport InputStream from './InputStream.js';\nimport fs from \"fs\";\n\n/**\n * Utility functions to create InputStreams from various sources.\n *\n * All returned InputStreams support the full range of Unicode\n * up to U+10FFFF (the default behavior of InputStream only supports\n * code points up to U+FFFF).\n */\nexport default {\n  // Creates an InputStream from a string.\n  fromString: function(str) {\n    return new InputStream(str, true);\n  },\n\n  /**\n   * Asynchronously creates an InputStream from a blob given the\n   * encoding of the bytes in that blob (defaults to 'utf8' if\n   * encoding is null).\n   *\n   * Invokes onLoad(result) on success, onError(error) on\n   * failure.\n   */\n  fromBlob: function(blob, encoding, onLoad, onError) {\n    const reader = new window.FileReader();\n    reader.onload = function(e) {\n      const is = new InputStream(e.target.result, true);\n      onLoad(is);\n    };\n    reader.onerror = onError;\n    reader.readAsText(blob, encoding);\n  },\n\n  /**\n   * Creates an InputStream from a Buffer given the\n   * encoding of the bytes in that buffer (defaults to 'utf8' if\n   * encoding is null).\n   */\n  fromBuffer: function(buffer, encoding) {\n    return new InputStream(buffer.toString(encoding), true);\n  },\n\n  /** Asynchronously creates an InputStream from a file on disk given\n   * the encoding of the bytes in that file (defaults to 'utf8' if\n   * encoding is null).\n   *\n   * Invokes callback(error, result) on completion.\n   */\n  fromPath: function(path, encoding, callback) {\n    fs.readFile(path, encoding, function(err, data) {\n      let is = null;\n      if (data !== null) {\n        is = new InputStream(data, true);\n      }\n      callback(err, is);\n    });\n  },\n\n  /**\n   * Synchronously creates an InputStream given a path to a file\n   * on disk and the encoding of the bytes in that file (defaults to\n   * 'utf8' if encoding is null).\n   */\n  fromPathSync: function(path, encoding) {\n    const data = fs.readFileSync(path, encoding);\n    return new InputStream(data, true);\n  }\n};\n", "/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nimport InputStream from './InputStream.js';\nimport fs from \"fs\";\n\n/**\n * This is an InputStream that is loaded from a file all at once\n * when you construct the object.\n */\nexport default class FileStream extends InputStream {\n\tconstructor(fileName, decodeToUnicodeCodePoints) {\n\t\tconst data = fs.readFileSync(fileName, \"utf8\");\n\t\tsuper(data, decodeToUnicodeCodePoints);\n\t\tthis.fileName = fileName;\n\t}\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n// this is just to keep meaningful parameter types to Parser\nexport default class TokenStream {}\n\n", "/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nimport Token from './Token.js';\nimport Lexer from './Lexer.js';\nimport Interval from './misc/Interval.js';\nimport TokenStream from \"./TokenStream.js\";\n\n/**\n * This implementation of {@link TokenStream} loads tokens from a\n * {@link TokenSource} on-demand, and places the tokens in a buffer to provide\n * access to any previous token by index.\n *\n * <p>\n * This token stream ignores the value of {@link Token//getChannel}. If your\n * parser requires the token stream filter tokens to only those on a particular\n * channel, such as {@link Token//DEFAULT_CHANNEL} or\n * {@link Token//HIDDEN_CHANNEL}, use a filtering token stream such a\n * {@link CommonTokenStream}.</p>\n */\nexport default class BufferedTokenStream extends TokenStream {\n\tconstructor(tokenSource) {\n\n\t\tsuper();\n\t\t// The {@link TokenSource} from which tokens for this stream are fetched.\n\t\tthis.tokenSource = tokenSource;\n\t\t/**\n\t\t * A collection of all tokens fetched from the token source. The list is\n\t\t * considered a complete view of the input once {@link //fetchedEOF} is set\n\t\t * to {@code true}.\n\t\t */\n\t\tthis.tokens = [];\n\n\t\t/**\n\t\t * The index into {@link //tokens} of the current token (next token to\n\t\t * {@link //consume}). {@link //tokens}{@code [}{@link //p}{@code ]} should\n\t\t * be\n\t\t * {@link //LT LT(1)}.\n\t\t *\n\t\t * <p>This field is set to -1 when the stream is first constructed or when\n\t\t * {@link //setTokenSource} is called, indicating that the first token has\n\t\t * not yet been fetched from the token source. For additional information,\n\t\t * see the documentation of {@link IntStream} for a description of\n\t\t * Initializing Methods.</p>\n\t\t */\n\t\tthis.index = -1;\n\n\t\t/**\n\t\t * Indicates whether the {@link Token//EOF} token has been fetched from\n\t\t * {@link //tokenSource} and added to {@link //tokens}. This field improves\n\t\t * performance for the following cases:\n\t\t *\n\t\t * <ul>\n\t\t * <li>{@link //consume}: The lookahead check in {@link //consume} to\n\t\t * prevent\n\t\t * consuming the EOF symbol is optimized by checking the values of\n\t\t * {@link //fetchedEOF} and {@link //p} instead of calling {@link\n\t\t * //LA}.</li>\n\t\t * <li>{@link //fetch}: The check to prevent adding multiple EOF symbols\n\t\t * into\n\t\t * {@link //tokens} is trivial with this field.</li>\n\t\t * <ul>\n\t\t */\n\t\tthis.fetchedEOF = false;\n\t}\n\n\tmark() {\n\t\treturn 0;\n\t}\n\n\trelease(marker) {\n\t\t// no resources to release\n\t}\n\n\treset() {\n\t\tthis.seek(0);\n\t}\n\n\tseek(index) {\n\t\tthis.lazyInit();\n\t\tthis.index = this.adjustSeekIndex(index);\n\t}\n\n\tget(index) {\n\t\tthis.lazyInit();\n\t\treturn this.tokens[index];\n\t}\n\n\tconsume() {\n\t\tlet skipEofCheck = false;\n\t\tif (this.index >= 0) {\n\t\t\tif (this.fetchedEOF) {\n\t\t\t\t// the last token in tokens is EOF. skip check if p indexes any\n\t\t\t\t// fetched token except the last.\n\t\t\t\tskipEofCheck = this.index < this.tokens.length - 1;\n\t\t\t} else {\n\t\t\t\t// no EOF token in tokens. skip check if p indexes a fetched token.\n\t\t\t\tskipEofCheck = this.index < this.tokens.length;\n\t\t\t}\n\t\t} else {\n\t\t\t// not yet initialized\n\t\t\tskipEofCheck = false;\n\t\t}\n\t\tif (!skipEofCheck && this.LA(1) === Token.EOF) {\n\t\t\tthrow \"cannot consume EOF\";\n\t\t}\n\t\tif (this.sync(this.index + 1)) {\n\t\t\tthis.index = this.adjustSeekIndex(this.index + 1);\n\t\t}\n\t}\n\n\t/**\n\t * Make sure index {@code i} in tokens has a token.\n\t *\n\t * @return {Boolean} {@code true} if a token is located at index {@code i}, otherwise\n\t * {@code false}.\n\t * @see //get(int i)\n\t */\n\tsync(i) {\n\t\tconst n = i - this.tokens.length + 1; // how many more elements we need?\n\t\tif (n > 0) {\n\t\t\tconst fetched = this.fetch(n);\n\t\t\treturn fetched >= n;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Add {@code n} elements to buffer.\n\t *\n\t * @return {Number} The actual number of elements added to the buffer.\n\t */\n\tfetch(n) {\n\t\tif (this.fetchedEOF) {\n\t\t\treturn 0;\n\t\t}\n\t\tfor (let i = 0; i < n; i++) {\n\t\t\tconst t = this.tokenSource.nextToken();\n\t\t\tt.tokenIndex = this.tokens.length;\n\t\t\tthis.tokens.push(t);\n\t\t\tif (t.type === Token.EOF) {\n\t\t\t\tthis.fetchedEOF = true;\n\t\t\t\treturn i + 1;\n\t\t\t}\n\t\t}\n\t\treturn n;\n\t}\n\n// Get all tokens from start..stop inclusively///\n\tgetTokens(start, stop, types) {\n\t\tif (types === undefined) {\n\t\t\ttypes = null;\n\t\t}\n\t\tif (start < 0 || stop < 0) {\n\t\t\treturn null;\n\t\t}\n\t\tthis.lazyInit();\n\t\tconst subset = [];\n\t\tif (stop >= this.tokens.length) {\n\t\t\tstop = this.tokens.length - 1;\n\t\t}\n\t\tfor (let i = start; i < stop; i++) {\n\t\t\tconst t = this.tokens[i];\n\t\t\tif (t.type === Token.EOF) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (types === null || types.contains(t.type)) {\n\t\t\t\tsubset.push(t);\n\t\t\t}\n\t\t}\n\t\treturn subset;\n\t}\n\n\tLA(i) {\n\t\treturn this.LT(i).type;\n\t}\n\n\tLB(k) {\n\t\tif (this.index - k < 0) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this.tokens[this.index - k];\n\t}\n\n\tLT(k) {\n\t\tthis.lazyInit();\n\t\tif (k === 0) {\n\t\t\treturn null;\n\t\t}\n\t\tif (k < 0) {\n\t\t\treturn this.LB(-k);\n\t\t}\n\t\tconst i = this.index + k - 1;\n\t\tthis.sync(i);\n\t\tif (i >= this.tokens.length) { // return EOF token\n\t\t\t// EOF must be last token\n\t\t\treturn this.tokens[this.tokens.length - 1];\n\t\t}\n\t\treturn this.tokens[i];\n\t}\n\n\t/**\n\t * Allowed derived classes to modify the behavior of operations which change\n\t * the current stream position by adjusting the target token index of a seek\n\t * operation. The default implementation simply returns {@code i}. If an\n\t * exception is thrown in this method, the current stream index should not be\n\t * changed.\n\t *\n\t * <p>For example, {@link CommonTokenStream} overrides this method to ensure\n\t * that\n\t * the seek target is always an on-channel token.</p>\n\t *\n\t * @param {Number} i The target token index.\n\t * @return {Number} The adjusted target token index.\n\t */\n\tadjustSeekIndex(i) {\n\t\treturn i;\n\t}\n\n\tlazyInit() {\n\t\tif (this.index === -1) {\n\t\t\tthis.setup();\n\t\t}\n\t}\n\n\tsetup() {\n\t\tthis.sync(0);\n\t\tthis.index = this.adjustSeekIndex(0);\n\t}\n\n// Reset this token stream by setting its token source.///\n\tsetTokenSource(tokenSource) {\n\t\tthis.tokenSource = tokenSource;\n\t\tthis.tokens = [];\n\t\tthis.index = -1;\n\t\tthis.fetchedEOF = false;\n\t}\n\n\t/**\n\t * Given a starting index, return the index of the next token on channel.\n\t * Return i if tokens[i] is on channel. Return -1 if there are no tokens\n\t * on channel between i and EOF.\n\t */\n\tnextTokenOnChannel(i, channel) {\n\t\tthis.sync(i);\n\t\tif (i >= this.tokens.length) {\n\t\t\treturn -1;\n\t\t}\n\t\tlet token = this.tokens[i];\n\t\twhile (token.channel !== this.channel) {\n\t\t\tif (token.type === Token.EOF) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\ti += 1;\n\t\t\tthis.sync(i);\n\t\t\ttoken = this.tokens[i];\n\t\t}\n\t\treturn i;\n\t}\n\n\t/**\n\t * Given a starting index, return the index of the previous token on channel.\n\t * Return i if tokens[i] is on channel. Return -1 if there are no tokens\n\t * on channel between i and 0.\n\t */\n\tpreviousTokenOnChannel(i, channel) {\n\t\twhile (i >= 0 && this.tokens[i].channel !== channel) {\n\t\t\ti -= 1;\n\t\t}\n\t\treturn i;\n\t}\n\n\t/**\n\t * Collect all tokens on specified channel to the right of\n\t * the current token up until we see a token on DEFAULT_TOKEN_CHANNEL or\n\t * EOF. If channel is -1, find any non default channel token.\n\t */\n\tgetHiddenTokensToRight(tokenIndex,\n\t\t\tchannel) {\n\t\tif (channel === undefined) {\n\t\t\tchannel = -1;\n\t\t}\n\t\tthis.lazyInit();\n\t\tif (tokenIndex < 0 || tokenIndex >= this.tokens.length) {\n\t\t\tthrow \"\" + tokenIndex + \" not in 0..\" + this.tokens.length - 1;\n\t\t}\n\t\tconst nextOnChannel = this.nextTokenOnChannel(tokenIndex + 1, Lexer.DEFAULT_TOKEN_CHANNEL);\n\t\tconst from_ = tokenIndex + 1;\n\t\t// if none onchannel to right, nextOnChannel=-1 so set to = last token\n\t\tconst to = nextOnChannel === -1 ? this.tokens.length - 1 : nextOnChannel;\n\t\treturn this.filterForChannel(from_, to, channel);\n\t}\n\n\t/**\n\t * Collect all tokens on specified channel to the left of\n\t * the current token up until we see a token on DEFAULT_TOKEN_CHANNEL.\n\t * If channel is -1, find any non default channel token.\n\t */\n\tgetHiddenTokensToLeft(tokenIndex,\n\t\t\tchannel) {\n\t\tif (channel === undefined) {\n\t\t\tchannel = -1;\n\t\t}\n\t\tthis.lazyInit();\n\t\tif (tokenIndex < 0 || tokenIndex >= this.tokens.length) {\n\t\t\tthrow \"\" + tokenIndex + \" not in 0..\" + this.tokens.length - 1;\n\t\t}\n\t\tconst prevOnChannel = this.previousTokenOnChannel(tokenIndex - 1, Lexer.DEFAULT_TOKEN_CHANNEL);\n\t\tif (prevOnChannel === tokenIndex - 1) {\n\t\t\treturn null;\n\t\t}\n\t\t// if none on channel to left, prevOnChannel=-1 then from=0\n\t\tconst from_ = prevOnChannel + 1;\n\t\tconst to = tokenIndex - 1;\n\t\treturn this.filterForChannel(from_, to, channel);\n\t}\n\n\tfilterForChannel(left, right, channel) {\n\t\tconst hidden = [];\n\t\tfor (let i = left; i < right + 1; i++) {\n\t\t\tconst t = this.tokens[i];\n\t\t\tif (channel === -1) {\n\t\t\t\tif (t.channel !== Lexer.DEFAULT_TOKEN_CHANNEL) {\n\t\t\t\t\thidden.push(t);\n\t\t\t\t}\n\t\t\t} else if (t.channel === channel) {\n\t\t\t\thidden.push(t);\n\t\t\t}\n\t\t}\n\t\tif (hidden.length === 0) {\n\t\t\treturn null;\n\t\t}\n\t\treturn hidden;\n\t}\n\n\tgetSourceName() {\n\t\treturn this.tokenSource.getSourceName();\n\t}\n\n// Get the text of all tokens in this buffer.///\n\tgetText(interval) {\n\t\tthis.lazyInit();\n\t\tthis.fill();\n\t\tif (interval === undefined || interval === null) {\n\t\t\tinterval = new Interval(0, this.tokens.length - 1);\n\t\t}\n\t\tlet start = interval.start;\n\t\tif (start instanceof Token) {\n\t\t\tstart = start.tokenIndex;\n\t\t}\n\t\tlet stop = interval.stop;\n\t\tif (stop instanceof Token) {\n\t\t\tstop = stop.tokenIndex;\n\t\t}\n\t\tif (start === null || stop === null || start < 0 || stop < 0) {\n\t\t\treturn \"\";\n\t\t}\n\t\tif (stop >= this.tokens.length) {\n\t\t\tstop = this.tokens.length - 1;\n\t\t}\n\t\tlet s = \"\";\n\t\tfor (let i = start; i < stop + 1; i++) {\n\t\t\tconst t = this.tokens[i];\n\t\t\tif (t.type === Token.EOF) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ts = s + t.text;\n\t\t}\n\t\treturn s;\n\t}\n\n// Get all tokens from lexer until EOF///\n\tfill() {\n\t\tthis.lazyInit();\n\t\twhile (this.fetch(1000) === 1000) {\n\t\t\tcontinue;\n\t\t}\n\t}\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\nimport Token from './Token.js';\nimport BufferedTokenStream from './BufferedTokenStream.js';\n\n/**\n * This class extends {@link BufferedTokenStream} with functionality to filter\n * token streams to tokens on a particular channel (tokens where\n * {@link Token//getChannel} returns a particular value).\n *\n * <p>\n * This token stream provides access to all tokens by index or when calling\n * methods like {@link //getText}. The channel filtering is only used for code\n * accessing tokens via the lookahead methods {@link //LA}, {@link //LT}, and\n * {@link //LB}.</p>\n *\n * <p>\n * By default, tokens are placed on the default channel\n * ({@link Token//DEFAULT_CHANNEL}), but may be reassigned by using the\n * {@code ->channel(HIDDEN)} lexer command, or by using an embedded action to\n * call {@link Lexer//setChannel}.\n * </p>\n *\n * <p>\n * Note: lexer rules which use the {@code ->skip} lexer command or call\n * {@link Lexer//skip} do not produce tokens at all, so input text matched by\n * such a rule will not be available as part of the token stream, regardless of\n * channel.</p>\n */\nexport default class CommonTokenStream extends BufferedTokenStream {\n    constructor(lexer, channel) {\n        super(lexer);\n        this.channel = channel===undefined ? Token.DEFAULT_CHANNEL : channel;\n    }\n\n    adjustSeekIndex(i) {\n        return this.nextTokenOnChannel(i, this.channel);\n    }\n\n    LB(k) {\n        if (k===0 || this.index-k<0) {\n            return null;\n        }\n        let i = this.index;\n        let n = 1;\n        // find k good tokens looking backwards\n        while (n <= k) {\n            // skip off-channel tokens\n            i = this.previousTokenOnChannel(i - 1, this.channel);\n            n += 1;\n        }\n        if (i < 0) {\n            return null;\n        }\n        return this.tokens[i];\n    }\n\n    LT(k) {\n        this.lazyInit();\n        if (k === 0) {\n            return null;\n        }\n        if (k < 0) {\n            return this.LB(-k);\n        }\n        let i = this.index;\n        let n = 1; // we know tokens[pos] is a good one\n        // find k good tokens\n        while (n < k) {\n            // skip off-channel tokens, but make sure to not look past EOF\n            if (this.sync(i + 1)) {\n                i = this.nextTokenOnChannel(i + 1, this.channel);\n            }\n            n += 1;\n        }\n        return this.tokens[i];\n    }\n\n    // Count EOF just once.\n    getNumberOfOnChannelTokens() {\n        let n = 0;\n        this.fill();\n        for (let i =0; i< this.tokens.length;i++) {\n            const t = this.tokens[i];\n            if( t.channel===this.channel) {\n                n += 1;\n            }\n            if( t.type===Token.EOF) {\n                break;\n            }\n        }\n        return n;\n    }\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport ParseTreeListener from \"./tree/ParseTreeListener.js\";\n\nexport default class TraceListener extends ParseTreeListener {\n    constructor(parser) {\n        super();\n        this.parser = parser;\n    }\n\n    enterEveryRule(ctx) {\n        console.log(\"enter   \" + this.parser.ruleNames[ctx.ruleIndex] + \", LT(1)=\" + this.parser._input.LT(1).text);\n    }\n\n    visitTerminal(node) {\n        console.log(\"consume \" + node.symbol + \" rule \" + this.parser.ruleNames[this.parser._ctx.ruleIndex]);\n    }\n\n    exitEveryRule(ctx) {\n        console.log(\"exit    \" + this.parser.ruleNames[ctx.ruleIndex] + \", LT(1)=\" + this.parser._input.LT(1).text);\n    }\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nimport Token from './Token.js';\nimport TerminalNode from './tree/TerminalNode.js';\nimport ErrorNode from './tree/ErrorNode.js';\nimport Recognizer from './Recognizer.js';\nimport DefaultErrorStrategy from './error/DefaultErrorStrategy.js';\nimport ATNDeserializer from './atn/ATNDeserializer.js';\nimport ATNDeserializationOptions from './atn/ATNDeserializationOptions.js';\nimport TraceListener from \"./TraceListener.js\";\n\nexport default class Parser extends Recognizer {\n    /**\n     * this is all the parsing support code essentially; most of it is error\n     * recovery stuff.\n     */\n    constructor(input) {\n        super();\n        // The input stream.\n        this._input = null;\n        /**\n         * The error handling strategy for the parser. The default value is a new\n         * instance of {@link DefaultErrorStrategy}.\n         */\n        this._errHandler = new DefaultErrorStrategy();\n        this._precedenceStack = [];\n        this._precedenceStack.push(0);\n        /**\n         * The {@link ParserRuleContext} object for the currently executing rule.\n         * this is always non-null during the parsing process.\n         */\n        this._ctx = null;\n        /**\n         * Specifies whether or not the parser should construct a parse tree during\n         * the parsing process. The default value is {@code true}.\n         */\n        this.buildParseTrees = true;\n        /**\n         * When {@link //setTrace}{@code (true)} is called, a reference to the\n         * {@link TraceListener} is stored here so it can be easily removed in a\n         * later call to {@link //setTrace}{@code (false)}. The listener itself is\n         * implemented as a parser listener so this field is not directly used by\n         * other parser methods.\n         */\n        this._tracer = null;\n        /**\n         * The list of {@link ParseTreeListener} listeners registered to receive\n         * events during the parse.\n         */\n        this._parseListeners = null;\n        /**\n         * The number of syntax errors reported during parsing. this value is\n         * incremented each time {@link //notifyErrorListeners} is called.\n         */\n        this._syntaxErrors = 0;\n        this.setInputStream(input);\n    }\n\n    // reset the parser's state\n    reset() {\n        if (this._input !== null) {\n            this._input.seek(0);\n        }\n        this._errHandler.reset(this);\n        this._ctx = null;\n        this._syntaxErrors = 0;\n        this.setTrace(false);\n        this._precedenceStack = [];\n        this._precedenceStack.push(0);\n        if (this._interp !== null) {\n            this._interp.reset();\n        }\n    }\n\n    /**\n     * Match current input symbol against {@code ttype}. If the symbol type\n     * matches, {@link ANTLRErrorStrategy//reportMatch} and {@link //consume} are\n     * called to complete the match process.\n     *\n     * <p>If the symbol type does not match,\n     * {@link ANTLRErrorStrategy//recoverInline} is called on the current error\n     * strategy to attempt recovery. If {@link //getBuildParseTree} is\n     * {@code true} and the token index of the symbol returned by\n     * {@link ANTLRErrorStrategy//recoverInline} is -1, the symbol is added to\n     * the parse tree by calling {@link ParserRuleContext//addErrorNode}.</p>\n     *\n     * @param ttype the token type to match\n     * @return the matched symbol\n     * @throws RecognitionException if the current input symbol did not match\n     * {@code ttype} and the error strategy could not recover from the\n     * mismatched symbol\n     */\n    match(ttype) {\n        let t = this.getCurrentToken();\n        if (t.type === ttype) {\n            this._errHandler.reportMatch(this);\n            this.consume();\n        } else {\n            t = this._errHandler.recoverInline(this);\n            if (this.buildParseTrees && t.tokenIndex === -1) {\n                // we must have conjured up a new token during single token\n                // insertion\n                // if it's not the current symbol\n                this._ctx.addErrorNode(t);\n            }\n        }\n        return t;\n    }\n\n    /**\n     * Match current input symbol as a wildcard. If the symbol type matches\n     * (i.e. has a value greater than 0), {@link ANTLRErrorStrategy//reportMatch}\n     * and {@link //consume} are called to complete the match process.\n     *\n     * <p>If the symbol type does not match,\n     * {@link ANTLRErrorStrategy//recoverInline} is called on the current error\n     * strategy to attempt recovery. If {@link //getBuildParseTree} is\n     * {@code true} and the token index of the symbol returned by\n     * {@link ANTLRErrorStrategy//recoverInline} is -1, the symbol is added to\n     * the parse tree by calling {@link ParserRuleContext//addErrorNode}.</p>\n     *\n     * @return the matched symbol\n     * @throws RecognitionException if the current input symbol did not match\n     * a wildcard and the error strategy could not recover from the mismatched\n     * symbol\n     */\n    matchWildcard() {\n        let t = this.getCurrentToken();\n        if (t.type > 0) {\n            this._errHandler.reportMatch(this);\n            this.consume();\n        } else {\n            t = this._errHandler.recoverInline(this);\n            if (this._buildParseTrees && t.tokenIndex === -1) {\n                // we must have conjured up a new token during single token\n                // insertion\n                // if it's not the current symbol\n                this._ctx.addErrorNode(t);\n            }\n        }\n        return t;\n    }\n\n    getParseListeners() {\n        return this._parseListeners || [];\n    }\n\n    /**\n     * Registers {@code listener} to receive events during the parsing process.\n     *\n     * <p>To support output-preserving grammar transformations (including but not\n     * limited to left-recursion removal, automated left-factoring, and\n     * optimized code generation), calls to listener methods during the parse\n     * may differ substantially from calls made by\n     * {@link ParseTreeWalker//DEFAULT} used after the parse is complete. In\n     * particular, rule entry and exit events may occur in a different order\n     * during the parse than after the parser. In addition, calls to certain\n     * rule entry methods may be omitted.</p>\n     *\n     * <p>With the following specific exceptions, calls to listener events are\n     * <em>deterministic</em>, i.e. for identical input the calls to listener\n     * methods will be the same.</p>\n     *\n     * <ul>\n     * <li>Alterations to the grammar used to generate code may change the\n     * behavior of the listener calls.</li>\n     * <li>Alterations to the command line options passed to ANTLR 4 when\n     * generating the parser may change the behavior of the listener calls.</li>\n     * <li>Changing the version of the ANTLR Tool used to generate the parser\n     * may change the behavior of the listener calls.</li>\n     * </ul>\n     *\n     * @param listener the listener to add\n     *\n     * @throws NullPointerException if {@code} listener is {@code null}\n     */\n    addParseListener(listener) {\n        if (listener === null) {\n            throw \"listener\";\n        }\n        if (this._parseListeners === null) {\n            this._parseListeners = [];\n        }\n        this._parseListeners.push(listener);\n    }\n\n    /**\n     * Remove {@code listener} from the list of parse listeners.\n     *\n     * <p>If {@code listener} is {@code null} or has not been added as a parse\n     * listener, this method does nothing.</p>\n     * @param listener the listener to remove\n     */\n    removeParseListener(listener) {\n        if (this._parseListeners !== null) {\n            const idx = this._parseListeners.indexOf(listener);\n            if (idx >= 0) {\n                this._parseListeners.splice(idx, 1);\n            }\n            if (this._parseListeners.length === 0) {\n                this._parseListeners = null;\n            }\n        }\n    }\n\n    // Remove all parse listeners.\n    removeParseListeners() {\n        this._parseListeners = null;\n    }\n\n    // Notify any parse listeners of an enter rule event.\n    triggerEnterRuleEvent() {\n        if (this._parseListeners !== null) {\n            const ctx = this._ctx;\n            this._parseListeners.forEach(function (listener) {\n                listener.enterEveryRule(ctx);\n                ctx.enterRule(listener);\n            });\n        }\n    }\n\n    /**\n     * Notify any parse listeners of an exit rule event.\n     * @see //addParseListener\n     */\n    triggerExitRuleEvent() {\n        if (this._parseListeners !== null) {\n            // reverse order walk of listeners\n            const ctx = this._ctx;\n            this._parseListeners.slice(0).reverse().forEach(function (listener) {\n                ctx.exitRule(listener);\n                listener.exitEveryRule(ctx);\n            });\n        }\n    }\n\n    getTokenFactory() {\n        return this._input.tokenSource._factory;\n    }\n\n    // Tell our token source and error strategy about a new way to create tokens.\n    setTokenFactory(factory) {\n        this._input.tokenSource._factory = factory;\n    }\n\n    /**\n     * The ATN with bypass alternatives is expensive to create so we create it\n     * lazily.\n     *\n     * @throws UnsupportedOperationException if the current parser does not\n     * implement the {@link //getSerializedATN()} method.\n     */\n    getATNWithBypassAlts() {\n        const serializedAtn = this.getSerializedATN();\n        if (serializedAtn === null) {\n            throw \"The current parser does not support an ATN with bypass alternatives.\";\n        }\n        let result = this.bypassAltsAtnCache[serializedAtn];\n        if (result === null) {\n            const deserializationOptions = new ATNDeserializationOptions();\n            deserializationOptions.generateRuleBypassTransitions = true;\n            result = new ATNDeserializer(deserializationOptions)\n                .deserialize(serializedAtn);\n            this.bypassAltsAtnCache[serializedAtn] = result;\n        }\n        return result;\n    }\n\n    getInputStream() {\n        return this.getTokenStream();\n    }\n\n    setInputStream(input) {\n        this.setTokenStream(input);\n    }\n\n    getTokenStream() {\n        return this._input;\n    }\n\n    // Set the token stream and reset the parser.\n    setTokenStream(input) {\n        this._input = null;\n        this.reset();\n        this._input = input;\n    }\n\n    /**\n     * Match needs to return the current input symbol, which gets put\n     * into the label for the associated token ref; e.g., x=ID.\n     */\n    getCurrentToken() {\n        return this._input.LT(1);\n    }\n\n    notifyErrorListeners(msg, offendingToken, err) {\n        offendingToken = offendingToken || null;\n        err = err || null;\n        if (offendingToken === null) {\n            offendingToken = this.getCurrentToken();\n        }\n        this._syntaxErrors += 1;\n        const line = offendingToken.line;\n        const column = offendingToken.column;\n        const listener = this.getErrorListenerDispatch();\n        listener.syntaxError(this, offendingToken, line, column, msg, err);\n    }\n\n    /**\n     * Consume and return the {@linkplain //getCurrentToken current symbol}.\n     *\n     * <p>E.g., given the following input with {@code A} being the current\n     * lookahead symbol, this function moves the cursor to {@code B} and returns\n     * {@code A}.</p>\n     *\n     * <pre>\n     * A B\n     * ^\n     * </pre>\n     *\n     * If the parser is not in error recovery mode, the consumed symbol is added\n     * to the parse tree using {@link ParserRuleContext//addChild(Token)}, and\n     * {@link ParseTreeListener//visitTerminal} is called on any parse listeners.\n     * If the parser <em>is</em> in error recovery mode, the consumed symbol is\n     * added to the parse tree using\n     * {@link ParserRuleContext//addErrorNode(Token)}, and\n     * {@link ParseTreeListener//visitErrorNode} is called on any parse\n     * listeners.\n     */\n    consume() {\n        const o = this.getCurrentToken();\n        if (o.type !== Token.EOF) {\n            this.getInputStream().consume();\n        }\n        const hasListener = this._parseListeners !== null && this._parseListeners.length > 0;\n        if (this.buildParseTrees || hasListener) {\n            let node;\n            if (this._errHandler.inErrorRecoveryMode(this)) {\n                node = this._ctx.addErrorNode(o);\n            } else {\n                node = this._ctx.addTokenNode(o);\n            }\n            node.invokingState = this.state;\n            if (hasListener) {\n                this._parseListeners.forEach(function (listener) {\n                    if (node instanceof ErrorNode || (node.isErrorNode !== undefined && node.isErrorNode())) {\n                        listener.visitErrorNode(node);\n                    } else if (node instanceof TerminalNode) {\n                        listener.visitTerminal(node);\n                    }\n                });\n            }\n        }\n        return o;\n    }\n\n    addContextToParseTree() {\n        // add current context to parent if we have a parent\n        if (this._ctx.parentCtx !== null) {\n            this._ctx.parentCtx.addChild(this._ctx);\n        }\n    }\n\n    /**\n     * Always called by generated parsers upon entry to a rule. Access field\n     * {@link //_ctx} get the current context.\n     */\n    enterRule(localctx, state, ruleIndex) {\n        this.state = state;\n        this._ctx = localctx;\n        this._ctx.start = this._input.LT(1);\n        if (this.buildParseTrees) {\n            this.addContextToParseTree();\n        }\n        this.triggerEnterRuleEvent();\n    }\n\n    exitRule() {\n        this._ctx.stop = this._input.LT(-1);\n        // trigger event on _ctx, before it reverts to parent\n        this.triggerExitRuleEvent();\n        this.state = this._ctx.invokingState;\n        this._ctx = this._ctx.parentCtx;\n    }\n\n    enterOuterAlt(localctx, altNum) {\n        localctx.setAltNumber(altNum);\n        // if we have new localctx, make sure we replace existing ctx\n        // that is previous child of parse tree\n        if (this.buildParseTrees && this._ctx !== localctx) {\n            if (this._ctx.parentCtx !== null) {\n                this._ctx.parentCtx.removeLastChild();\n                this._ctx.parentCtx.addChild(localctx);\n            }\n        }\n        this._ctx = localctx;\n    }\n\n    /**\n     * Get the precedence level for the top-most precedence rule.\n     *\n     * @return The precedence level for the top-most precedence rule, or -1 if\n     * the parser context is not nested within a precedence rule.\n     */\n    getPrecedence() {\n        if (this._precedenceStack.length === 0) {\n            return -1;\n        } else {\n            return this._precedenceStack[this._precedenceStack.length - 1];\n        }\n    }\n\n    enterRecursionRule(localctx, state, ruleIndex, precedence) {\n        this.state = state;\n        this._precedenceStack.push(precedence);\n        this._ctx = localctx;\n        this._ctx.start = this._input.LT(1);\n        this.triggerEnterRuleEvent(); // simulates rule entry for left-recursive rules\n    }\n\n    // Like {@link //enterRule} but for recursive rules.\n    pushNewRecursionContext(localctx, state, ruleIndex) {\n        const previous = this._ctx;\n        previous.parentCtx = localctx;\n        previous.invokingState = state;\n        previous.stop = this._input.LT(-1);\n\n        this._ctx = localctx;\n        this._ctx.start = previous.start;\n        if (this.buildParseTrees) {\n            this._ctx.addChild(previous);\n        }\n        this.triggerEnterRuleEvent(); // simulates rule entry for left-recursive rules\n    }\n\n    unrollRecursionContexts(parentCtx) {\n        this._precedenceStack.pop();\n        this._ctx.stop = this._input.LT(-1);\n        const retCtx = this._ctx; // save current ctx (return value)\n        // unroll so _ctx is as it was before call to recursive method\n        const parseListeners = this.getParseListeners();\n        if (parseListeners !== null && parseListeners.length > 0) {\n            while (this._ctx !== parentCtx) {\n                this.triggerExitRuleEvent();\n                this._ctx = this._ctx.parentCtx;\n            }\n        } else {\n            this._ctx = parentCtx;\n        }\n        // hook into tree\n        retCtx.parentCtx = parentCtx;\n        if (this.buildParseTrees && parentCtx !== null) {\n            // add return ctx into invoking rule's tree\n            parentCtx.addChild(retCtx);\n        }\n    }\n\n    getInvokingContext(ruleIndex) {\n        let ctx = this._ctx;\n        while (ctx !== null) {\n            if (ctx.ruleIndex === ruleIndex) {\n                return ctx;\n            }\n            ctx = ctx.parentCtx;\n        }\n        return null;\n    }\n\n    precpred(localctx, precedence) {\n        return precedence >= this._precedenceStack[this._precedenceStack.length - 1];\n    }\n\n    inContext(context) {\n        // TODO: useful in parser?\n        return false;\n    }\n\n    /**\n     * Checks whether or not {@code symbol} can follow the current state in the\n     * ATN. The behavior of this method is equivalent to the following, but is\n     * implemented such that the complete context-sensitive follow set does not\n     * need to be explicitly constructed.\n     *\n     * <pre>\n     * return getExpectedTokens().contains(symbol);\n     * </pre>\n     *\n     * @param symbol the symbol type to check\n     * @return {@code true} if {@code symbol} can follow the current state in\n     * the ATN, otherwise {@code false}.\n     */\n    isExpectedToken(symbol) {\n        const atn = this._interp.atn;\n        let ctx = this._ctx;\n        const s = atn.states[this.state];\n        let following = atn.nextTokens(s);\n        if (following.contains(symbol)) {\n            return true;\n        }\n        if (!following.contains(Token.EPSILON)) {\n            return false;\n        }\n        while (ctx !== null && ctx.invokingState >= 0 && following.contains(Token.EPSILON)) {\n            const invokingState = atn.states[ctx.invokingState];\n            const rt = invokingState.transitions[0];\n            following = atn.nextTokens(rt.followState);\n            if (following.contains(symbol)) {\n                return true;\n            }\n            ctx = ctx.parentCtx;\n        }\n        if (following.contains(Token.EPSILON) && symbol === Token.EOF) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Computes the set of input symbols which could follow the current parser\n     * state and context, as given by {@link //getState} and {@link //getContext},\n     * respectively.\n     *\n     * @see ATN//getExpectedTokens(int, RuleContext)\n     */\n    getExpectedTokens() {\n        return this._interp.atn.getExpectedTokens(this.state, this._ctx);\n    }\n\n    getExpectedTokensWithinCurrentRule() {\n        const atn = this._interp.atn;\n        const s = atn.states[this.state];\n        return atn.nextTokens(s);\n    }\n\n    // Get a rule's index (i.e., {@code RULE_ruleName} field) or -1 if not found.\n    getRuleIndex(ruleName) {\n        const ruleIndex = this.getRuleIndexMap()[ruleName];\n        if (ruleIndex !== null) {\n            return ruleIndex;\n        } else {\n            return -1;\n        }\n    }\n\n    /**\n     * Return List&lt;String&gt; of the rule names in your parser instance\n     * leading up to a call to the current rule. You could override if\n     * you want more details such as the file/line info of where\n     * in the ATN a rule is invoked.\n     *\n     * this is very useful for error messages.\n     */\n    getRuleInvocationStack(p) {\n        p = p || null;\n        if (p === null) {\n            p = this._ctx;\n        }\n        const stack = [];\n        while (p !== null) {\n            // compute what follows who invoked us\n            const ruleIndex = p.ruleIndex;\n            if (ruleIndex < 0) {\n                stack.push(\"n/a\");\n            } else {\n                stack.push(this.ruleNames[ruleIndex]);\n            }\n            p = p.parentCtx;\n        }\n        return stack;\n    }\n\n    // For debugging and other purposes.\n    getDFAStrings() {\n        return this._interp.decisionToDFA.toString();\n    }\n\n    // For debugging and other purposes.\n    dumpDFA() {\n        let seenOne = false;\n        for (let i = 0; i < this._interp.decisionToDFA.length; i++) {\n            const dfa = this._interp.decisionToDFA[i];\n            if (dfa.states.length > 0) {\n                if (seenOne) {\n                    console.log();\n                }\n                this.printer.println(\"Decision \" + dfa.decision + \":\");\n                this.printer.print(dfa.toString(this.literalNames, this.symbolicNames));\n                seenOne = true;\n            }\n        }\n    }\n\n    /*\n        \"\t\t\tprinter = function() {\\r\\n\" +\n        \"\t\t\t\tthis.println = function(s) { document.getElementById('output') += s + '\\\\n'; }\\r\\n\" +\n        \"\t\t\t\tthis.print = function(s) { document.getElementById('output') += s; }\\r\\n\" +\n        \"\t\t\t};\\r\\n\" +\n        */\n    getSourceName() {\n        return this._input.sourceName;\n    }\n\n    /**\n     * During a parse is sometimes useful to listen in on the rule entry and exit\n     * events as well as token matches. this is for quick and dirty debugging.\n     */\n    setTrace(trace) {\n        if (!trace) {\n            this.removeParseListener(this._tracer);\n            this._tracer = null;\n        } else {\n            if (this._tracer !== null) {\n                this.removeParseListener(this._tracer);\n            }\n            this._tracer = new TraceListener(this);\n            this.addParseListener(this._tracer);\n        }\n    }\n}\n\n/**\n * this field maps from the serialized ATN string to the deserialized {@link\n    * ATN} with\n * bypass alternatives.\n *\n * @see ATNDeserializationOptions//isGenerateRuleBypassTransitions()\n */\nParser.bypassAltsAtnCache = {};\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport PredictionContext from \"../context/PredictionContext.js\";\nimport HashMap from \"../misc/HashMap.js\";\n\n/**\n * Used to cache {@link PredictionContext} objects. Its used for the shared\n * context cash associated with contexts in DFA states. This cache\n * can be used for both lexers and parsers.\n */\nexport default class PredictionContextCache {\n\n    constructor() {\n        this.cache = new HashMap();\n    }\n\n    /**\n     * Add a context to the cache and return it. If the context already exists,\n     * return that one instead and do not add a new context to the cache.\n     * Protect shared cache from unsafe thread access.\n     */\n    add(ctx) {\n        if (ctx === PredictionContext.EMPTY) {\n            return PredictionContext.EMPTY;\n        }\n        const existing = this.cache.get(ctx) || null;\n        if (existing !== null) {\n            return existing;\n        }\n        this.cache.set(ctx, ctx);\n        return ctx;\n    }\n\n    get(ctx) {\n        return this.cache.get(ctx) || null;\n    }\n\n    get length(){\n        return this.cache.length;\n    }\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport Interval from \"../misc/Interval.js\";\nimport Token from '../Token.js';\nimport TerminalNode from \"./TerminalNode.js\";\n\nexport default class TerminalNodeImpl extends TerminalNode {\n    constructor(symbol) {\n        super();\n        this.parentCtx = null;\n        this.symbol = symbol;\n    }\n\n    getChild(i) {\n        return null;\n    }\n\n    getSymbol() {\n        return this.symbol;\n    }\n\n    getParent() {\n        return this.parentCtx;\n    }\n\n    getPayload() {\n        return this.symbol;\n    }\n\n    getSourceInterval() {\n        if (this.symbol === null) {\n            return Interval.INVALID_INTERVAL;\n        }\n        const tokenIndex = this.symbol.tokenIndex;\n        return new Interval(tokenIndex, tokenIndex);\n    }\n\n    getChildCount() {\n        return 0;\n    }\n\n    accept(visitor) {\n        return visitor.visitTerminal(this);\n    }\n\n    getText() {\n        return this.symbol.text;\n    }\n\n    toString() {\n        if (this.symbol.type === Token.EOF) {\n            return \"<EOF>\";\n        } else {\n            return this.symbol.text;\n        }\n    }\n}\n\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n/**\n * Represents a token that was consumed during resynchronization\n * rather than during a valid match operation. For example,\n * we will create this kind of a node during single token insertion\n * and deletion as well as during \"consume until error recovery set\"\n * upon no viable alternative exceptions.\n */\nimport TerminalNodeImpl from \"./TerminalNodeImpl.js\";\n\nexport default class ErrorNodeImpl extends TerminalNodeImpl {\n    constructor(token) {\n        super(token);\n    }\n\n    isErrorNode() {\n        return true;\n    }\n\n    accept(visitor) {\n        return visitor.visitErrorNode(this);\n    }\n}\n", "/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nimport RuleContext from './RuleContext.js';\nimport TerminalNode from '../tree/TerminalNode.js';\nimport TerminalNodeImpl from '../tree/TerminalNodeImpl.js';\nimport ErrorNodeImpl from '../tree/ErrorNodeImpl.js';\nimport Interval from \"../misc/Interval.js\";\n\n/**\n * A rule invocation record for parsing.\n *\n *  Contains all of the information about the current rule not stored in the\n *  RuleContext. It handles parse tree children list, Any ATN state\n *  tracing, and the default values available for rule indications:\n *  start, stop, rule index, current alt number, current\n *  ATN state.\n *\n *  Subclasses made for each rule and grammar track the parameters,\n *  return values, locals, and labels specific to that rule. These\n *  are the objects that are returned from rules.\n *\n *  Note text is not an actual field of a rule return value; it is computed\n *  from start and stop using the input stream's toString() method.  I\n *  could add a ctor to this so that we can pass in and store the input\n *  stream, but I'm not sure we want to do that.  It would seem to be undefined\n *  to get the .text property anyway if the rule matches tokens from multiple\n *  input streams.\n *\n *  I do not use getters for fields of objects that are used simply to\n *  group values such as this aggregate.  The getters/setters are there to\n *  satisfy the superclass interface.\n */\nexport default class ParserRuleContext extends RuleContext {\n\tconstructor(parent, invokingStateNumber) {\n\t\tparent = parent || null;\n\t\tinvokingStateNumber = invokingStateNumber || null;\n\t\tsuper(parent, invokingStateNumber);\n\t\tthis.ruleIndex = -1;\n\t\t/**\n\t\t * If we are debugging or building a parse tree for a visitor,\n\t\t * we need to track all of the tokens and rule invocations associated\n\t\t * with this rule's context. This is empty for parsing w/o tree constr.\n\t\t * operation because we don't the need to track the details about\n\t\t * how we parse this rule.\n\t\t */\n\t\tthis.children = null;\n\t\tthis.start = null;\n\t\tthis.stop = null;\n\t\t/**\n\t\t * The exception that forced this rule to return. If the rule successfully\n\t\t * completed, this is {@code null}.\n\t\t */\n\t\tthis.exception = null;\n\t}\n\n\t// COPY a ctx (I'm deliberately not using copy constructor)\n\tcopyFrom(ctx) {\n\t\t// from RuleContext\n\t\tthis.parentCtx = ctx.parentCtx;\n\t\tthis.invokingState = ctx.invokingState;\n\t\tthis.children = null;\n\t\tthis.start = ctx.start;\n\t\tthis.stop = ctx.stop;\n\t\t// copy any error nodes to alt label node\n\t\tif(ctx.children) {\n\t\t\tthis.children = [];\n\t\t\t// reset parent pointer for any error nodes\n\t\t\tctx.children.map(function(child) {\n\t\t\t\tif (child instanceof ErrorNodeImpl) {\n\t\t\t\t\tthis.children.push(child);\n\t\t\t\t\tchild.parentCtx = this;\n\t\t\t\t}\n\t\t\t}, this);\n\t\t}\n\t}\n\n\t// Double dispatch methods for listeners\n\tenterRule(listener) {\n\t}\n\n\texitRule(listener) {\n\t}\n\n\t// Does not set parent link; other add methods do that\n\taddChild(child) {\n\t\tif (this.children === null) {\n\t\t\tthis.children = [];\n\t\t}\n\t\tthis.children.push(child);\n\t\treturn child;\n\t}\n\n\t/** Used by enterOuterAlt to toss out a RuleContext previously added as\n\t * we entered a rule. If we have // label, we will need to remove\n\t * generic ruleContext object.\n\t */\n\tremoveLastChild() {\n\t\tif (this.children !== null) {\n\t\t\tthis.children.pop();\n\t\t}\n\t}\n\n\taddTokenNode(token) {\n\t\tconst node = new TerminalNodeImpl(token);\n\t\tthis.addChild(node);\n\t\tnode.parentCtx = this;\n\t\treturn node;\n\t}\n\n\taddErrorNode(badToken) {\n\t\tconst node = new ErrorNodeImpl(badToken);\n\t\tthis.addChild(node);\n\t\tnode.parentCtx = this;\n\t\treturn node;\n\t}\n\n\tgetChild(i, type) {\n\t\ttype = type || null;\n\t\tif (this.children === null || i < 0 || i >= this.children.length) {\n\t\t\treturn null;\n\t\t}\n\t\tif (type === null) {\n\t\t\treturn this.children[i];\n\t\t} else {\n\t\t\tfor(let j=0; j<this.children.length; j++) {\n\t\t\t\tconst child = this.children[j];\n\t\t\t\tif(child instanceof type) {\n\t\t\t\t\tif(i===0) {\n\t\t\t\t\t\treturn child;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ti -= 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tgetToken(ttype, i) {\n\t\tif (this.children === null || i < 0 || i >= this.children.length) {\n\t\t\treturn null;\n\t\t}\n\t\tfor(let j=0; j<this.children.length; j++) {\n\t\t\tconst child = this.children[j];\n\t\t\tif (child instanceof TerminalNode) {\n\t\t\t\tif (child.symbol.type === ttype) {\n\t\t\t\t\tif(i===0) {\n\t\t\t\t\t\treturn child;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ti -= 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetTokens(ttype ) {\n\t\tif (this.children=== null) {\n\t\t\treturn [];\n\t\t} else {\n\t\t\tconst tokens = [];\n\t\t\tfor(let j=0; j<this.children.length; j++) {\n\t\t\t\tconst child = this.children[j];\n\t\t\t\tif (child instanceof TerminalNode) {\n\t\t\t\t\tif (child.symbol.type === ttype) {\n\t\t\t\t\t\ttokens.push(child);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn tokens;\n\t\t}\n\t}\n\n\tgetTypedRuleContext(ctxType, i) {\n\t\treturn this.getChild(i, ctxType);\n\t}\n\n\tgetTypedRuleContexts(ctxType) {\n\t\tif (this.children=== null) {\n\t\t\treturn [];\n\t\t} else {\n\t\t\tconst contexts = [];\n\t\t\tfor(let j=0; j<this.children.length; j++) {\n\t\t\t\tconst child = this.children[j];\n\t\t\t\tif (child instanceof ctxType) {\n\t\t\t\t\tcontexts.push(child);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn contexts;\n\t\t}\n\t}\n\n\tgetChildCount() {\n\t\tif (this.children=== null) {\n\t\t\treturn 0;\n\t\t} else {\n\t\t\treturn this.children.length;\n\t\t}\n\t}\n\n\tgetSourceInterval() {\n\t\tif( this.start === null || this.stop === null) {\n\t\t\treturn Interval.INVALID_INTERVAL;\n\t\t} else {\n\t\t\treturn new Interval(this.start.tokenIndex, this.stop.tokenIndex);\n\t\t}\n\t}\n}\n\nRuleContext.EMPTY = new ParserRuleContext();\n\n\n", "/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport arrayToString from \"../utils/arrayToString.js\";\n\nexport default { arrayToString };\n", "/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nimport './utils/stringHashCode.js';\nimport './polyfills/codepointat.js';\nimport './polyfills/fromcodepoint.js';\nimport { default as atn } from './atn/index.js';\nimport { default as dfa } from './dfa/index.js';\nimport { default as tree } from './tree/index.js';\nimport { default as error } from './error/index.js';\nimport Token from './Token.js';\nimport CommonToken from './CommonToken.js';\nimport { default as CharStreams } from './CharStreams.js';\nimport InputStream from './InputStream.js';\nimport FileStream from './FileStream.js';\nimport CommonTokenStream from './CommonTokenStream.js';\nimport Lexer from './Lexer.js';\nimport Parser from './Parser.js';\nimport PredictionContextCache from './atn/PredictionContextCache.js';\nimport ParserRuleContext from './context/ParserRuleContext.js';\nimport Interval from './misc/Interval.js';\nimport IntervalSet from './misc/IntervalSet.js';\nimport LL1Analyzer from './atn/LL1Analyzer.js';\nimport { default as Utils } from './utils/index.js';\n\nconst antlr4 = {\n    atn, dfa, tree, error, Token, CommonToken, CharStreams, InputStream, FileStream, CommonTokenStream, Lexer, Parser,\n    PredictionContextCache, ParserRuleContext, Interval, IntervalSet, LL1Analyzer, Utils\n};\n\nexport default antlr4;\n", "// Generated from java-escape by ANTLR 4.11.1\n// jshint ignore: start\nimport antlr4 from 'antlr4';\n\n\nconst serializedATN = [4,0,47,434,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,\n4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,\n12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,\n2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,\n27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,\n7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,\n41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,1,0,1,0,1,0,1,0,1,0,\n1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,4,\n1,4,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,\n1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,\n11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,\n1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,\n13,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,\n1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,18,3,18,205,8,18,1,19,1,19,1,19,\n1,19,1,19,1,19,1,19,1,19,3,19,215,8,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,\n1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,\n22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,245,8,22,1,23,1,23,1,23,1,23,3,23,\n251,8,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,\n1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,276,8,26,1,27,1,27,\n1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,\n29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,30,\n1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,\n31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,32,3,32,332,8,32,1,32,1,32,3,32,\n336,8,32,1,33,1,33,1,33,1,34,1,34,1,34,1,34,5,34,345,8,34,10,34,12,34,348,\n9,34,1,34,1,34,1,35,1,35,1,36,1,36,1,36,5,36,357,8,36,10,36,12,36,360,9,\n36,3,36,362,8,36,1,37,1,37,3,37,366,8,37,1,38,1,38,1,38,1,38,1,38,1,38,1,\n38,1,38,3,38,376,8,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,\n1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,395,8,40,1,41,1,41,1,41,1,42,1,42,\n1,42,1,43,1,43,5,43,405,8,43,10,43,12,43,408,9,43,1,44,4,44,411,8,44,11,\n44,12,44,412,1,45,3,45,416,8,45,1,45,4,45,419,8,45,11,45,12,45,420,1,45,\n3,45,424,8,45,4,45,426,8,45,11,45,12,45,427,1,46,4,46,431,8,46,11,46,12,\n46,432,0,0,47,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,\n25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,\n49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,\n73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,1,0,7,\n3,0,42,43,45,45,47,47,2,0,34,34,92,92,4,0,10,10,13,13,34,34,92,92,1,0,65,\n90,2,0,65,90,97,122,2,0,10,10,13,13,2,0,9,9,32,32,456,0,1,1,0,0,0,0,3,1,\n0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,\n1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,\n0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,\n0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,\n49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,\n0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,\n1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,\n0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,\n0,0,0,1,95,1,0,0,0,3,101,1,0,0,0,5,106,1,0,0,0,7,115,1,0,0,0,9,117,1,0,0,\n0,11,119,1,0,0,0,13,121,1,0,0,0,15,124,1,0,0,0,17,126,1,0,0,0,19,132,1,0,\n0,0,21,140,1,0,0,0,23,147,1,0,0,0,25,158,1,0,0,0,27,171,1,0,0,0,29,183,1,\n0,0,0,31,185,1,0,0,0,33,187,1,0,0,0,35,197,1,0,0,0,37,204,1,0,0,0,39,214,\n1,0,0,0,41,216,1,0,0,0,43,227,1,0,0,0,45,244,1,0,0,0,47,250,1,0,0,0,49,252,\n1,0,0,0,51,261,1,0,0,0,53,275,1,0,0,0,55,277,1,0,0,0,57,281,1,0,0,0,59,293,\n1,0,0,0,61,307,1,0,0,0,63,316,1,0,0,0,65,331,1,0,0,0,67,337,1,0,0,0,69,340,\n1,0,0,0,71,351,1,0,0,0,73,361,1,0,0,0,75,365,1,0,0,0,77,375,1,0,0,0,79,377,\n1,0,0,0,81,394,1,0,0,0,83,396,1,0,0,0,85,399,1,0,0,0,87,402,1,0,0,0,89,410,\n1,0,0,0,91,425,1,0,0,0,93,430,1,0,0,0,95,96,5,100,0,0,96,97,5,101,0,0,97,\n98,5,98,0,0,98,99,5,117,0,0,99,100,5,103,0,0,100,2,1,0,0,0,101,102,5,107,\n0,0,102,103,5,105,0,0,103,104,5,105,0,0,104,105,5,114,0,0,105,4,1,0,0,0,\n106,107,5,118,0,0,107,108,5,225,0,0,108,109,5,108,0,0,109,110,5,116,0,0,\n110,111,5,111,0,0,111,112,5,122,0,0,112,113,5,243,0,0,113,114,5,107,0,0,\n114,6,1,0,0,0,115,116,5,40,0,0,116,8,1,0,0,0,117,118,5,44,0,0,118,10,1,0,\n0,0,119,120,5,41,0,0,120,12,1,0,0,0,121,122,5,40,0,0,122,123,5,41,0,0,123,\n14,1,0,0,0,124,125,5,58,0,0,125,16,1,0,0,0,126,127,5,101,0,0,127,128,5,103,\n0,0,128,129,5,233,0,0,129,130,5,115,0,0,130,131,5,122,0,0,131,18,1,0,0,0,\n132,133,5,108,0,0,133,134,5,111,0,0,134,135,5,103,0,0,135,136,5,105,0,0,\n136,137,5,107,0,0,137,138,5,97,0,0,138,139,5,105,0,0,139,20,1,0,0,0,140,\n141,5,115,0,0,141,142,5,122,0,0,142,143,5,246,0,0,143,144,5,118,0,0,144,\n145,5,101,0,0,145,146,5,103,0,0,146,22,1,0,0,0,147,148,5,101,0,0,148,149,\n5,103,0,0,149,150,5,233,0,0,150,151,5,115,0,0,151,152,5,122,0,0,152,153,\n5,32,0,0,153,154,5,116,0,0,154,155,5,246,0,0,155,156,5,109,0,0,156,157,5,\n98,0,0,157,24,1,0,0,0,158,159,5,108,0,0,159,160,5,111,0,0,160,161,5,103,\n0,0,161,162,5,105,0,0,162,163,5,107,0,0,163,164,5,97,0,0,164,165,5,105,0,\n0,165,166,5,32,0,0,166,167,5,116,0,0,167,168,5,246,0,0,168,169,5,109,0,0,\n169,170,5,98,0,0,170,26,1,0,0,0,171,172,5,115,0,0,172,173,5,122,0,0,173,\n174,5,246,0,0,174,175,5,118,0,0,175,176,5,101,0,0,176,177,5,103,0,0,177,\n178,5,32,0,0,178,179,5,116,0,0,179,180,5,246,0,0,180,181,5,109,0,0,181,182,\n5,98,0,0,182,28,1,0,0,0,183,184,5,91,0,0,184,30,1,0,0,0,185,186,5,93,0,0,\n186,32,1,0,0,0,187,188,5,76,0,0,188,189,5,233,0,0,189,190,5,116,0,0,190,\n191,5,114,0,0,191,192,5,101,0,0,192,193,5,104,0,0,193,194,5,111,0,0,194,\n195,5,122,0,0,195,196,5,91,0,0,196,34,1,0,0,0,197,198,5,93,0,0,198,199,5,\n40,0,0,199,36,1,0,0,0,200,205,7,0,0,0,201,202,5,109,0,0,202,203,5,111,0,\n0,203,205,5,100,0,0,204,200,1,0,0,0,204,201,1,0,0,0,205,38,1,0,0,0,206,215,\n2,60,62,0,207,208,5,61,0,0,208,209,5,47,0,0,209,215,5,61,0,0,210,211,5,60,\n0,0,211,215,5,61,0,0,212,213,5,62,0,0,213,215,5,61,0,0,214,206,1,0,0,0,214,\n207,1,0,0,0,214,210,1,0,0,0,214,212,1,0,0,0,215,40,1,0,0,0,216,217,5,99,\n0,0,217,218,5,237,0,0,218,219,5,109,0,0,219,220,5,115,0,0,220,221,5,122,\n0,0,221,222,5,101,0,0,222,223,5,114,0,0,223,224,5,105,0,0,224,225,5,110,\n0,0,225,226,5,116,0,0,226,42,1,0,0,0,227,228,5,97,0,0,228,229,5,109,0,0,\n229,230,5,237,0,0,230,231,5,103,0,0,231,44,1,0,0,0,232,233,5,99,0,0,233,\n234,5,105,0,0,234,235,5,107,0,0,235,236,5,108,0,0,236,237,5,117,0,0,237,\n245,5,115,0,0,238,239,5,67,0,0,239,240,5,105,0,0,240,241,5,107,0,0,241,242,\n5,108,0,0,242,243,5,117,0,0,243,245,5,115,0,0,244,232,1,0,0,0,244,238,1,\n0,0,0,245,46,1,0,0,0,246,247,5,104,0,0,247,251,5,97,0,0,248,249,5,72,0,0,\n249,251,5,97,0,0,250,246,1,0,0,0,250,248,1,0,0,0,251,48,1,0,0,0,252,253,\n5,107,0,0,253,254,5,252,0,0,254,255,5,108,0,0,255,256,5,246,0,0,256,257,\n5,110,0,0,257,258,5,98,0,0,258,259,5,101,0,0,259,260,5,110,0,0,260,50,1,\n0,0,0,261,262,5,97,0,0,262,263,5,107,0,0,263,264,5,107,0,0,264,265,5,111,\n0,0,265,266,5,114,0,0,266,52,1,0,0,0,267,268,5,45,0,0,268,269,5,116,0,0,\n269,270,5,243,0,0,270,276,5,108,0,0,271,272,5,45,0,0,272,273,5,116,0,0,273,\n274,5,337,0,0,274,276,5,108,0,0,275,267,1,0,0,0,275,271,1,0,0,0,276,54,1,\n0,0,0,277,278,5,45,0,0,278,279,5,105,0,0,279,280,5,103,0,0,280,56,1,0,0,\n0,281,282,5,99,0,0,282,283,5,105,0,0,283,284,5,107,0,0,284,285,5,108,0,0,\n285,286,5,117,0,0,286,287,5,115,0,0,287,288,5,32,0,0,288,289,5,118,0,0,289,\n290,5,233,0,0,290,291,5,103,0,0,291,292,5,101,0,0,292,58,1,0,0,0,293,294,\n5,101,0,0,294,295,5,108,0,0,295,296,5,225,0,0,296,297,5,103,0,0,297,298,\n5,97,0,0,298,299,5,122,0,0,299,300,5,225,0,0,300,301,5,115,0,0,301,302,5,\n32,0,0,302,303,5,118,0,0,303,304,5,233,0,0,304,305,5,103,0,0,305,306,5,101,\n0,0,306,60,1,0,0,0,307,308,5,102,0,0,308,309,5,252,0,0,309,310,5,103,0,0,\n310,311,5,103,0,0,311,312,5,118,0,0,312,313,5,233,0,0,313,314,5,110,0,0,\n314,315,5,121,0,0,315,62,1,0,0,0,316,317,5,102,0,0,317,318,5,252,0,0,318,\n319,5,103,0,0,319,320,5,103,0,0,320,321,5,118,0,0,321,322,5,233,0,0,322,\n323,5,110,0,0,323,324,5,121,0,0,324,325,5,32,0,0,325,326,5,118,0,0,326,327,\n5,233,0,0,327,328,5,103,0,0,328,329,5,101,0,0,329,64,1,0,0,0,330,332,3,93,\n46,0,331,330,1,0,0,0,331,332,1,0,0,0,332,333,1,0,0,0,333,335,3,67,33,0,334,\n336,3,93,46,0,335,334,1,0,0,0,335,336,1,0,0,0,336,66,1,0,0,0,337,338,5,60,\n0,0,338,339,5,45,0,0,339,68,1,0,0,0,340,346,5,34,0,0,341,342,5,92,0,0,342,\n345,7,1,0,0,343,345,8,2,0,0,344,341,1,0,0,0,344,343,1,0,0,0,345,348,1,0,\n0,0,346,344,1,0,0,0,346,347,1,0,0,0,347,349,1,0,0,0,348,346,1,0,0,0,349,\n350,5,34,0,0,350,70,1,0,0,0,351,352,5,126,0,0,352,72,1,0,0,0,353,362,5,48,\n0,0,354,358,2,49,57,0,355,357,2,48,57,0,356,355,1,0,0,0,357,360,1,0,0,0,\n358,356,1,0,0,0,358,359,1,0,0,0,359,362,1,0,0,0,360,358,1,0,0,0,361,353,\n1,0,0,0,361,354,1,0,0,0,362,74,1,0,0,0,363,366,3,77,38,0,364,366,3,81,40,\n0,365,363,1,0,0,0,365,364,1,0,0,0,366,76,1,0,0,0,367,368,5,105,0,0,368,369,\n5,103,0,0,369,370,5,97,0,0,370,376,5,122,0,0,371,372,5,73,0,0,372,373,5,\n103,0,0,373,374,5,97,0,0,374,376,5,122,0,0,375,367,1,0,0,0,375,371,1,0,0,\n0,376,78,1,0,0,0,377,378,5,118,0,0,378,379,5,105,0,0,379,380,5,115,0,0,380,\n381,5,115,0,0,381,382,5,122,0,0,382,383,5,97,0,0,383,80,1,0,0,0,384,385,\n5,104,0,0,385,386,5,97,0,0,386,387,5,109,0,0,387,388,5,105,0,0,388,395,5,\n115,0,0,389,390,5,72,0,0,390,391,5,97,0,0,391,392,5,109,0,0,392,393,5,105,\n0,0,393,395,5,115,0,0,394,384,1,0,0,0,394,389,1,0,0,0,395,82,1,0,0,0,396,\n397,5,47,0,0,397,398,5,92,0,0,398,84,1,0,0,0,399,400,5,92,0,0,400,401,5,\n47,0,0,401,86,1,0,0,0,402,406,7,3,0,0,403,405,7,4,0,0,404,403,1,0,0,0,405,\n408,1,0,0,0,406,404,1,0,0,0,406,407,1,0,0,0,407,88,1,0,0,0,408,406,1,0,0,\n0,409,411,2,97,122,0,410,409,1,0,0,0,411,412,1,0,0,0,412,410,1,0,0,0,412,\n413,1,0,0,0,413,90,1,0,0,0,414,416,3,93,46,0,415,414,1,0,0,0,415,416,1,0,\n0,0,416,418,1,0,0,0,417,419,7,5,0,0,418,417,1,0,0,0,419,420,1,0,0,0,420,\n418,1,0,0,0,420,421,1,0,0,0,421,423,1,0,0,0,422,424,3,93,46,0,423,422,1,\n0,0,0,423,424,1,0,0,0,424,426,1,0,0,0,425,415,1,0,0,0,426,427,1,0,0,0,427,\n425,1,0,0,0,427,428,1,0,0,0,428,92,1,0,0,0,429,431,7,6,0,0,430,429,1,0,0,\n0,431,432,1,0,0,0,432,430,1,0,0,0,432,433,1,0,0,0,433,94,1,0,0,0,23,0,204,\n214,244,250,275,331,335,344,346,358,361,365,375,394,404,406,412,415,420,\n423,427,432,0];\n\n\nconst atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);\n\nconst decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );\n\nexport default class PseudoCodeLexer extends antlr4.Lexer {\n\n    static grammarFileName = \"PseudoCode.g4\";\n    static channelNames = [ \"DEFAULT_TOKEN_CHANNEL\", \"HIDDEN\" ];\n\tstatic modeNames = [ \"DEFAULT_MODE\" ];\n\tstatic literalNames = [ null, \"'debug'\", \"'kiir'\", \"'v\\\\u00E1ltoz\\\\u00F3k'\", \n                         \"'('\", \"','\", \"')'\", \"'()'\", \"':'\", \"'eg\\\\u00E9sz'\", \n                         \"'logikai'\", \"'sz\\\\u00F6veg'\", \"'eg\\\\u00E9sz t\\\\u00F6mb'\", \n                         \"'logikai t\\\\u00F6mb'\", \"'sz\\\\u00F6veg t\\\\u00F6mb'\", \n                         \"'['\", \"']'\", \"'L\\\\u00E9trehoz['\", \"']('\", null, \n                         null, \"'c\\\\u00EDmszerint'\", \"'am\\\\u00EDg'\", null, \n                         null, \"'k\\\\u00FCl\\\\u00F6nben'\", \"'akkor'\", null, \n                         \"'-ig'\", \"'ciklus v\\\\u00E9ge'\", \"'el\\\\u00E1gaz\\\\u00E1s v\\\\u00E9ge'\", \n                         \"'f\\\\u00FCggv\\\\u00E9ny'\", \"'f\\\\u00FCggv\\\\u00E9ny v\\\\u00E9ge'\", \n                         null, \"'<-'\", null, \"'~'\", null, null, null, \"'vissza'\", \n                         null, \"'/\\\\'\", \"'\\\\/'\" ];\n\tstatic symbolicNames = [ null, null, null, null, null, null, null, null, \n                          null, null, null, null, null, null, null, null, \n                          null, null, null, \"OPERATOR\", \"COMPARISON\", \"CIMSZERINT\", \n                          \"AMIG\", \"CIKLUS\", \"HA\", \"KULONBEN\", \"AKKOR\", \"CSTART\", \n                          \"CEND\", \"CVEGE\", \"ELVEGE\", \"FUGGVENY\", \"FVEGE\", \n                          \"ASSIGN\", \"NYIL\", \"STRING\", \"NOT\", \"NUMBER\", \"BOOL\", \n                          \"IGAZ\", \"VISSZA\", \"HAMIS\", \"ES\", \"VAGY\", \"FUNCTION\", \n                          \"VARIABLE\", \"NL\", \"WS\" ];\n\tstatic ruleNames = [ \"T__0\", \"T__1\", \"T__2\", \"T__3\", \"T__4\", \"T__5\", \"T__6\", \n                      \"T__7\", \"T__8\", \"T__9\", \"T__10\", \"T__11\", \"T__12\", \n                      \"T__13\", \"T__14\", \"T__15\", \"T__16\", \"T__17\", \"OPERATOR\", \n                      \"COMPARISON\", \"CIMSZERINT\", \"AMIG\", \"CIKLUS\", \"HA\", \n                      \"KULONBEN\", \"AKKOR\", \"CSTART\", \"CEND\", \"CVEGE\", \"ELVEGE\", \n                      \"FUGGVENY\", \"FVEGE\", \"ASSIGN\", \"NYIL\", \"STRING\", \"NOT\", \n                      \"NUMBER\", \"BOOL\", \"IGAZ\", \"VISSZA\", \"HAMIS\", \"ES\", \n                      \"VAGY\", \"FUNCTION\", \"VARIABLE\", \"NL\", \"WS\" ];\n\n    constructor(input) {\n        super(input)\n        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());\n    }\n\n    get atn() {\n        return atn;\n    }\n}\n\nPseudoCodeLexer.EOF = antlr4.Token.EOF;\nPseudoCodeLexer.T__0 = 1;\nPseudoCodeLexer.T__1 = 2;\nPseudoCodeLexer.T__2 = 3;\nPseudoCodeLexer.T__3 = 4;\nPseudoCodeLexer.T__4 = 5;\nPseudoCodeLexer.T__5 = 6;\nPseudoCodeLexer.T__6 = 7;\nPseudoCodeLexer.T__7 = 8;\nPseudoCodeLexer.T__8 = 9;\nPseudoCodeLexer.T__9 = 10;\nPseudoCodeLexer.T__10 = 11;\nPseudoCodeLexer.T__11 = 12;\nPseudoCodeLexer.T__12 = 13;\nPseudoCodeLexer.T__13 = 14;\nPseudoCodeLexer.T__14 = 15;\nPseudoCodeLexer.T__15 = 16;\nPseudoCodeLexer.T__16 = 17;\nPseudoCodeLexer.T__17 = 18;\nPseudoCodeLexer.OPERATOR = 19;\nPseudoCodeLexer.COMPARISON = 20;\nPseudoCodeLexer.CIMSZERINT = 21;\nPseudoCodeLexer.AMIG = 22;\nPseudoCodeLexer.CIKLUS = 23;\nPseudoCodeLexer.HA = 24;\nPseudoCodeLexer.KULONBEN = 25;\nPseudoCodeLexer.AKKOR = 26;\nPseudoCodeLexer.CSTART = 27;\nPseudoCodeLexer.CEND = 28;\nPseudoCodeLexer.CVEGE = 29;\nPseudoCodeLexer.ELVEGE = 30;\nPseudoCodeLexer.FUGGVENY = 31;\nPseudoCodeLexer.FVEGE = 32;\nPseudoCodeLexer.ASSIGN = 33;\nPseudoCodeLexer.NYIL = 34;\nPseudoCodeLexer.STRING = 35;\nPseudoCodeLexer.NOT = 36;\nPseudoCodeLexer.NUMBER = 37;\nPseudoCodeLexer.BOOL = 38;\nPseudoCodeLexer.IGAZ = 39;\nPseudoCodeLexer.VISSZA = 40;\nPseudoCodeLexer.HAMIS = 41;\nPseudoCodeLexer.ES = 42;\nPseudoCodeLexer.VAGY = 43;\nPseudoCodeLexer.FUNCTION = 44;\nPseudoCodeLexer.VARIABLE = 45;\nPseudoCodeLexer.NL = 46;\nPseudoCodeLexer.WS = 47;\n\n\n\n", "// Generated from java-escape by ANTLR 4.11.1\n// jshint ignore: start\nimport antlr4 from 'antlr4';\n\n// This class defines a complete listener for a parse tree produced by PseudoCodeParser.\nexport default class PseudoCodeListener extends antlr4.tree.ParseTreeListener {\n\n\t// Enter a parse tree produced by PseudoCodeParser#program.\n\tenterProgram(ctx) {\n\t}\n\n\t// Exit a parse tree produced by PseudoCodeParser#program.\n\texitProgram(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by PseudoCodeParser#body.\n\tenterBody(ctx) {\n\t}\n\n\t// Exit a parse tree produced by PseudoCodeParser#body.\n\texitBody(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by PseudoCodeParser#statement.\n\tenterStatement(ctx) {\n\t}\n\n\t// Exit a parse tree produced by PseudoCodeParser#statement.\n\texitStatement(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by PseudoCodeParser#debug.\n\tenterDebug(ctx) {\n\t}\n\n\t// Exit a parse tree produced by PseudoCodeParser#debug.\n\texitDebug(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by PseudoCodeParser#debugPrintStatement.\n\tenterDebugPrintStatement(ctx) {\n\t}\n\n\t// Exit a parse tree produced by PseudoCodeParser#debugPrintStatement.\n\texitDebugPrintStatement(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by PseudoCodeParser#vars.\n\tenterVars(ctx) {\n\t}\n\n\t// Exit a parse tree produced by PseudoCodeParser#vars.\n\texitVars(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by PseudoCodeParser#simpleIfStatement.\n\tenterSimpleIfStatement(ctx) {\n\t}\n\n\t// Exit a parse tree produced by PseudoCodeParser#simpleIfStatement.\n\texitSimpleIfStatement(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by PseudoCodeParser#ifElseStatement.\n\tenterIfElseStatement(ctx) {\n\t}\n\n\t// Exit a parse tree produced by PseudoCodeParser#ifElseStatement.\n\texitIfElseStatement(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by PseudoCodeParser#ifElseIfStatement.\n\tenterIfElseIfStatement(ctx) {\n\t}\n\n\t// Exit a parse tree produced by PseudoCodeParser#ifElseIfStatement.\n\texitIfElseIfStatement(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by PseudoCodeParser#elseIfBranch.\n\tenterElseIfBranch(ctx) {\n\t}\n\n\t// Exit a parse tree produced by PseudoCodeParser#elseIfBranch.\n\texitElseIfBranch(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by PseudoCodeParser#elseBranch.\n\tenterElseBranch(ctx) {\n\t}\n\n\t// Exit a parse tree produced by PseudoCodeParser#elseBranch.\n\texitElseBranch(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by PseudoCodeParser#whileStatement.\n\tenterWhileStatement(ctx) {\n\t}\n\n\t// Exit a parse tree produced by PseudoCodeParser#whileStatement.\n\texitWhileStatement(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by PseudoCodeParser#doWhileStatement.\n\tenterDoWhileStatement(ctx) {\n\t}\n\n\t// Exit a parse tree produced by PseudoCodeParser#doWhileStatement.\n\texitDoWhileStatement(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by PseudoCodeParser#forStatement.\n\tenterForStatement(ctx) {\n\t}\n\n\t// Exit a parse tree produced by PseudoCodeParser#forStatement.\n\texitForStatement(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by PseudoCodeParser#returnStatement.\n\tenterReturnStatement(ctx) {\n\t}\n\n\t// Exit a parse tree produced by PseudoCodeParser#returnStatement.\n\texitReturnStatement(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by PseudoCodeParser#methodCallStatement.\n\tenterMethodCallStatement(ctx) {\n\t}\n\n\t// Exit a parse tree produced by PseudoCodeParser#methodCallStatement.\n\texitMethodCallStatement(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by PseudoCodeParser#functionDeclarationWithParameters.\n\tenterFunctionDeclarationWithParameters(ctx) {\n\t}\n\n\t// Exit a parse tree produced by PseudoCodeParser#functionDeclarationWithParameters.\n\texitFunctionDeclarationWithParameters(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by PseudoCodeParser#functionDeclarationWithoutParameters.\n\tenterFunctionDeclarationWithoutParameters(ctx) {\n\t}\n\n\t// Exit a parse tree produced by PseudoCodeParser#functionDeclarationWithoutParameters.\n\texitFunctionDeclarationWithoutParameters(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by PseudoCodeParser#parameterWithType.\n\tenterParameterWithType(ctx) {\n\t}\n\n\t// Exit a parse tree produced by PseudoCodeParser#parameterWithType.\n\texitParameterWithType(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by PseudoCodeParser#type.\n\tenterType(ctx) {\n\t}\n\n\t// Exit a parse tree produced by PseudoCodeParser#type.\n\texitType(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by PseudoCodeParser#arrayElementAssignmentStatement.\n\tenterArrayElementAssignmentStatement(ctx) {\n\t}\n\n\t// Exit a parse tree produced by PseudoCodeParser#arrayElementAssignmentStatement.\n\texitArrayElementAssignmentStatement(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by PseudoCodeParser#arrayAssignmentStatement.\n\tenterArrayAssignmentStatement(ctx) {\n\t}\n\n\t// Exit a parse tree produced by PseudoCodeParser#arrayAssignmentStatement.\n\texitArrayAssignmentStatement(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by PseudoCodeParser#assignmentStatement.\n\tenterAssignmentStatement(ctx) {\n\t}\n\n\t// Exit a parse tree produced by PseudoCodeParser#assignmentStatement.\n\texitAssignmentStatement(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by PseudoCodeParser#orExpression.\n\tenterOrExpression(ctx) {\n\t}\n\n\t// Exit a parse tree produced by PseudoCodeParser#orExpression.\n\texitOrExpression(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by PseudoCodeParser#valueExpression.\n\tenterValueExpression(ctx) {\n\t}\n\n\t// Exit a parse tree produced by PseudoCodeParser#valueExpression.\n\texitValueExpression(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by PseudoCodeParser#andExpression.\n\tenterAndExpression(ctx) {\n\t}\n\n\t// Exit a parse tree produced by PseudoCodeParser#andExpression.\n\texitAndExpression(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by PseudoCodeParser#functionCallExpression.\n\tenterFunctionCallExpression(ctx) {\n\t}\n\n\t// Exit a parse tree produced by PseudoCodeParser#functionCallExpression.\n\texitFunctionCallExpression(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by PseudoCodeParser#notExpression.\n\tenterNotExpression(ctx) {\n\t}\n\n\t// Exit a parse tree produced by PseudoCodeParser#notExpression.\n\texitNotExpression(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by PseudoCodeParser#comparisonExpression.\n\tenterComparisonExpression(ctx) {\n\t}\n\n\t// Exit a parse tree produced by PseudoCodeParser#comparisonExpression.\n\texitComparisonExpression(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by PseudoCodeParser#calculationExpression.\n\tenterCalculationExpression(ctx) {\n\t}\n\n\t// Exit a parse tree produced by PseudoCodeParser#calculationExpression.\n\texitCalculationExpression(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by PseudoCodeParser#functionCall.\n\tenterFunctionCall(ctx) {\n\t}\n\n\t// Exit a parse tree produced by PseudoCodeParser#functionCall.\n\texitFunctionCall(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by PseudoCodeParser#parameters.\n\tenterParameters(ctx) {\n\t}\n\n\t// Exit a parse tree produced by PseudoCodeParser#parameters.\n\texitParameters(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by PseudoCodeParser#functionName.\n\tenterFunctionName(ctx) {\n\t}\n\n\t// Exit a parse tree produced by PseudoCodeParser#functionName.\n\texitFunctionName(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by PseudoCodeParser#value.\n\tenterValue(ctx) {\n\t}\n\n\t// Exit a parse tree produced by PseudoCodeParser#value.\n\texitValue(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by PseudoCodeParser#atom.\n\tenterAtom(ctx) {\n\t}\n\n\t// Exit a parse tree produced by PseudoCodeParser#atom.\n\texitAtom(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by PseudoCodeParser#string.\n\tenterString(ctx) {\n\t}\n\n\t// Exit a parse tree produced by PseudoCodeParser#string.\n\texitString(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by PseudoCodeParser#number.\n\tenterNumber(ctx) {\n\t}\n\n\t// Exit a parse tree produced by PseudoCodeParser#number.\n\texitNumber(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by PseudoCodeParser#bool.\n\tenterBool(ctx) {\n\t}\n\n\t// Exit a parse tree produced by PseudoCodeParser#bool.\n\texitBool(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by PseudoCodeParser#arrayShorthand.\n\tenterArrayShorthand(ctx) {\n\t}\n\n\t// Exit a parse tree produced by PseudoCodeParser#arrayShorthand.\n\texitArrayShorthand(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by PseudoCodeParser#arrayIndex.\n\tenterArrayIndex(ctx) {\n\t}\n\n\t// Exit a parse tree produced by PseudoCodeParser#arrayIndex.\n\texitArrayIndex(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by PseudoCodeParser#variable.\n\tenterVariable(ctx) {\n\t}\n\n\t// Exit a parse tree produced by PseudoCodeParser#variable.\n\texitVariable(ctx) {\n\t}\n\n\n\n}", "// Generated from java-escape by ANTLR 4.11.1\n// jshint ignore: start\nimport antlr4 from 'antlr4';\n\n// This class defines a complete generic visitor for a parse tree produced by PseudoCodeParser.\n\nexport default class PseudoCodeVisitor extends antlr4.tree.ParseTreeVisitor {\n\n\t// Visit a parse tree produced by PseudoCodeParser#program.\n\tvisitProgram(ctx) {\n\t  return this.visitChildren(ctx);\n\t}\n\n\n\t// Visit a parse tree produced by PseudoCodeParser#body.\n\tvisitBody(ctx) {\n\t  return this.visitChildren(ctx);\n\t}\n\n\n\t// Visit a parse tree produced by PseudoCodeParser#statement.\n\tvisitStatement(ctx) {\n\t  return this.visitChildren(ctx);\n\t}\n\n\n\t// Visit a parse tree produced by PseudoCodeParser#debug.\n\tvisitDebug(ctx) {\n\t  return this.visitChildren(ctx);\n\t}\n\n\n\t// Visit a parse tree produced by PseudoCodeParser#debugPrintStatement.\n\tvisitDebugPrintStatement(ctx) {\n\t  return this.visitChildren(ctx);\n\t}\n\n\n\t// Visit a parse tree produced by PseudoCodeParser#vars.\n\tvisitVars(ctx) {\n\t  return this.visitChildren(ctx);\n\t}\n\n\n\t// Visit a parse tree produced by PseudoCodeParser#simpleIfStatement.\n\tvisitSimpleIfStatement(ctx) {\n\t  return this.visitChildren(ctx);\n\t}\n\n\n\t// Visit a parse tree produced by PseudoCodeParser#ifElseStatement.\n\tvisitIfElseStatement(ctx) {\n\t  return this.visitChildren(ctx);\n\t}\n\n\n\t// Visit a parse tree produced by PseudoCodeParser#ifElseIfStatement.\n\tvisitIfElseIfStatement(ctx) {\n\t  return this.visitChildren(ctx);\n\t}\n\n\n\t// Visit a parse tree produced by PseudoCodeParser#elseIfBranch.\n\tvisitElseIfBranch(ctx) {\n\t  return this.visitChildren(ctx);\n\t}\n\n\n\t// Visit a parse tree produced by PseudoCodeParser#elseBranch.\n\tvisitElseBranch(ctx) {\n\t  return this.visitChildren(ctx);\n\t}\n\n\n\t// Visit a parse tree produced by PseudoCodeParser#whileStatement.\n\tvisitWhileStatement(ctx) {\n\t  return this.visitChildren(ctx);\n\t}\n\n\n\t// Visit a parse tree produced by PseudoCodeParser#doWhileStatement.\n\tvisitDoWhileStatement(ctx) {\n\t  return this.visitChildren(ctx);\n\t}\n\n\n\t// Visit a parse tree produced by PseudoCodeParser#forStatement.\n\tvisitForStatement(ctx) {\n\t  return this.visitChildren(ctx);\n\t}\n\n\n\t// Visit a parse tree produced by PseudoCodeParser#returnStatement.\n\tvisitReturnStatement(ctx) {\n\t  return this.visitChildren(ctx);\n\t}\n\n\n\t// Visit a parse tree produced by PseudoCodeParser#methodCallStatement.\n\tvisitMethodCallStatement(ctx) {\n\t  return this.visitChildren(ctx);\n\t}\n\n\n\t// Visit a parse tree produced by PseudoCodeParser#functionDeclarationWithParameters.\n\tvisitFunctionDeclarationWithParameters(ctx) {\n\t  return this.visitChildren(ctx);\n\t}\n\n\n\t// Visit a parse tree produced by PseudoCodeParser#functionDeclarationWithoutParameters.\n\tvisitFunctionDeclarationWithoutParameters(ctx) {\n\t  return this.visitChildren(ctx);\n\t}\n\n\n\t// Visit a parse tree produced by PseudoCodeParser#parameterWithType.\n\tvisitParameterWithType(ctx) {\n\t  return this.visitChildren(ctx);\n\t}\n\n\n\t// Visit a parse tree produced by PseudoCodeParser#type.\n\tvisitType(ctx) {\n\t  return this.visitChildren(ctx);\n\t}\n\n\n\t// Visit a parse tree produced by PseudoCodeParser#arrayElementAssignmentStatement.\n\tvisitArrayElementAssignmentStatement(ctx) {\n\t  return this.visitChildren(ctx);\n\t}\n\n\n\t// Visit a parse tree produced by PseudoCodeParser#arrayAssignmentStatement.\n\tvisitArrayAssignmentStatement(ctx) {\n\t  return this.visitChildren(ctx);\n\t}\n\n\n\t// Visit a parse tree produced by PseudoCodeParser#assignmentStatement.\n\tvisitAssignmentStatement(ctx) {\n\t  return this.visitChildren(ctx);\n\t}\n\n\n\t// Visit a parse tree produced by PseudoCodeParser#orExpression.\n\tvisitOrExpression(ctx) {\n\t  return this.visitChildren(ctx);\n\t}\n\n\n\t// Visit a parse tree produced by PseudoCodeParser#valueExpression.\n\tvisitValueExpression(ctx) {\n\t  return this.visitChildren(ctx);\n\t}\n\n\n\t// Visit a parse tree produced by PseudoCodeParser#andExpression.\n\tvisitAndExpression(ctx) {\n\t  return this.visitChildren(ctx);\n\t}\n\n\n\t// Visit a parse tree produced by PseudoCodeParser#functionCallExpression.\n\tvisitFunctionCallExpression(ctx) {\n\t  return this.visitChildren(ctx);\n\t}\n\n\n\t// Visit a parse tree produced by PseudoCodeParser#notExpression.\n\tvisitNotExpression(ctx) {\n\t  return this.visitChildren(ctx);\n\t}\n\n\n\t// Visit a parse tree produced by PseudoCodeParser#comparisonExpression.\n\tvisitComparisonExpression(ctx) {\n\t  return this.visitChildren(ctx);\n\t}\n\n\n\t// Visit a parse tree produced by PseudoCodeParser#calculationExpression.\n\tvisitCalculationExpression(ctx) {\n\t  return this.visitChildren(ctx);\n\t}\n\n\n\t// Visit a parse tree produced by PseudoCodeParser#functionCall.\n\tvisitFunctionCall(ctx) {\n\t  return this.visitChildren(ctx);\n\t}\n\n\n\t// Visit a parse tree produced by PseudoCodeParser#parameters.\n\tvisitParameters(ctx) {\n\t  return this.visitChildren(ctx);\n\t}\n\n\n\t// Visit a parse tree produced by PseudoCodeParser#functionName.\n\tvisitFunctionName(ctx) {\n\t  return this.visitChildren(ctx);\n\t}\n\n\n\t// Visit a parse tree produced by PseudoCodeParser#value.\n\tvisitValue(ctx) {\n\t  return this.visitChildren(ctx);\n\t}\n\n\n\t// Visit a parse tree produced by PseudoCodeParser#atom.\n\tvisitAtom(ctx) {\n\t  return this.visitChildren(ctx);\n\t}\n\n\n\t// Visit a parse tree produced by PseudoCodeParser#string.\n\tvisitString(ctx) {\n\t  return this.visitChildren(ctx);\n\t}\n\n\n\t// Visit a parse tree produced by PseudoCodeParser#number.\n\tvisitNumber(ctx) {\n\t  return this.visitChildren(ctx);\n\t}\n\n\n\t// Visit a parse tree produced by PseudoCodeParser#bool.\n\tvisitBool(ctx) {\n\t  return this.visitChildren(ctx);\n\t}\n\n\n\t// Visit a parse tree produced by PseudoCodeParser#arrayShorthand.\n\tvisitArrayShorthand(ctx) {\n\t  return this.visitChildren(ctx);\n\t}\n\n\n\t// Visit a parse tree produced by PseudoCodeParser#arrayIndex.\n\tvisitArrayIndex(ctx) {\n\t  return this.visitChildren(ctx);\n\t}\n\n\n\t// Visit a parse tree produced by PseudoCodeParser#variable.\n\tvisitVariable(ctx) {\n\t  return this.visitChildren(ctx);\n\t}\n\n\n\n}", "// Generated from java-escape by ANTLR 4.11.1\n// jshint ignore: start\nimport antlr4 from 'antlr4';\nimport PseudoCodeListener from './PseudoCodeListener.js';\nimport PseudoCodeVisitor from './PseudoCodeVisitor.js';\n\nconst serializedATN = [4,1,47,389,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,\n4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,\n2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,\n20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,\n7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,1,0,3,0,66,8,0,1,0,1,0,4,0,\n70,8,0,11,0,12,0,71,1,1,3,1,75,8,1,1,1,1,1,4,1,79,8,1,11,1,12,1,80,1,2,1,\n2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,96,8,2,1,2,1,2,1,3,1,3,\n1,4,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,\n1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,4,6,135,8,6,\n11,6,12,6,136,1,6,1,6,1,6,3,6,142,8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,\n7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,\n1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,\n11,1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,\n1,14,1,14,3,14,201,8,14,1,14,5,14,204,8,14,10,14,12,14,207,9,14,1,14,1,14,\n1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,222,8,14,1,15,\n1,15,3,15,226,8,15,1,15,1,15,3,15,230,8,15,1,15,1,15,3,15,234,8,15,1,15,\n1,15,1,16,1,16,1,17,1,17,1,17,3,17,243,8,17,1,17,1,17,3,17,247,8,17,1,17,\n1,17,1,17,1,17,1,18,1,18,1,18,1,18,3,18,257,8,18,1,18,1,18,3,18,261,8,18,\n1,18,1,18,3,18,265,8,18,1,18,1,18,3,18,269,8,18,1,18,1,18,1,19,1,19,1,19,\n1,19,1,20,1,20,1,20,1,20,1,20,3,20,282,8,20,1,20,1,20,3,20,286,8,20,1,20,\n1,20,3,20,290,8,20,1,20,1,20,1,20,3,20,295,8,20,1,20,1,20,3,20,299,8,20,\n1,20,1,20,1,20,3,20,304,8,20,1,20,1,20,3,20,308,8,20,1,20,1,20,1,20,3,20,\n313,8,20,1,20,1,20,3,20,317,8,20,1,20,5,20,320,8,20,10,20,12,20,323,9,20,\n1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,3,22,333,8,22,1,22,5,22,336,8,22,\n10,22,12,22,339,9,22,1,22,1,22,3,22,343,8,22,1,23,1,23,1,24,1,24,1,24,3,\n24,350,8,24,1,25,1,25,1,25,1,25,3,25,356,8,25,1,26,1,26,1,27,1,27,1,28,1,\n28,1,29,1,29,1,29,1,29,3,29,368,8,29,1,29,5,29,371,8,29,10,29,12,29,374,\n9,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,4,30,383,8,30,11,30,12,30,384,1,\n31,1,31,1,31,0,1,40,32,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,\n36,38,40,42,44,46,48,50,52,54,56,58,60,62,0,1,1,0,9,14,414,0,65,1,0,0,0,\n2,74,1,0,0,0,4,95,1,0,0,0,6,99,1,0,0,0,8,101,1,0,0,0,10,105,1,0,0,0,12,141,\n1,0,0,0,14,143,1,0,0,0,16,153,1,0,0,0,18,157,1,0,0,0,20,166,1,0,0,0,22,173,\n1,0,0,0,24,186,1,0,0,0,26,190,1,0,0,0,28,221,1,0,0,0,30,225,1,0,0,0,32,237,\n1,0,0,0,34,239,1,0,0,0,36,252,1,0,0,0,38,272,1,0,0,0,40,281,1,0,0,0,42,324,\n1,0,0,0,44,342,1,0,0,0,46,344,1,0,0,0,48,349,1,0,0,0,50,355,1,0,0,0,52,357,\n1,0,0,0,54,359,1,0,0,0,56,361,1,0,0,0,58,363,1,0,0,0,60,377,1,0,0,0,62,386,\n1,0,0,0,64,66,5,47,0,0,65,64,1,0,0,0,65,66,1,0,0,0,66,69,1,0,0,0,67,70,5,\n46,0,0,68,70,3,4,2,0,69,67,1,0,0,0,69,68,1,0,0,0,70,71,1,0,0,0,71,69,1,0,\n0,0,71,72,1,0,0,0,72,1,1,0,0,0,73,75,5,47,0,0,74,73,1,0,0,0,74,75,1,0,0,\n0,75,78,1,0,0,0,76,79,3,4,2,0,77,79,5,46,0,0,78,76,1,0,0,0,78,77,1,0,0,0,\n79,80,1,0,0,0,80,78,1,0,0,0,80,81,1,0,0,0,81,3,1,0,0,0,82,96,3,10,5,0,83,\n96,3,26,13,0,84,96,3,12,6,0,85,96,3,18,9,0,86,96,3,20,10,0,87,96,3,22,11,\n0,88,96,3,34,17,0,89,96,3,36,18,0,90,96,3,38,19,0,91,96,3,24,12,0,92,96,\n3,28,14,0,93,96,3,8,4,0,94,96,3,6,3,0,95,82,1,0,0,0,95,83,1,0,0,0,95,84,\n1,0,0,0,95,85,1,0,0,0,95,86,1,0,0,0,95,87,1,0,0,0,95,88,1,0,0,0,95,89,1,\n0,0,0,95,90,1,0,0,0,95,91,1,0,0,0,95,92,1,0,0,0,95,93,1,0,0,0,95,94,1,0,\n0,0,96,97,1,0,0,0,97,98,5,46,0,0,98,5,1,0,0,0,99,100,5,1,0,0,100,7,1,0,0,\n0,101,102,5,2,0,0,102,103,5,47,0,0,103,104,3,40,20,0,104,9,1,0,0,0,105,106,\n5,3,0,0,106,11,1,0,0,0,107,108,5,24,0,0,108,109,5,47,0,0,109,110,3,40,20,\n0,110,111,5,47,0,0,111,112,5,26,0,0,112,113,5,46,0,0,113,114,3,2,1,0,114,\n115,5,30,0,0,115,142,1,0,0,0,116,117,5,24,0,0,117,118,5,47,0,0,118,119,3,\n40,20,0,119,120,5,47,0,0,120,121,5,26,0,0,121,122,5,46,0,0,122,123,3,2,1,\n0,123,124,3,16,8,0,124,125,5,30,0,0,125,142,1,0,0,0,126,127,5,24,0,0,127,\n128,5,47,0,0,128,129,3,40,20,0,129,130,5,47,0,0,130,131,5,26,0,0,131,132,\n5,46,0,0,132,134,3,2,1,0,133,135,3,14,7,0,134,133,1,0,0,0,135,136,1,0,0,\n0,136,134,1,0,0,0,136,137,1,0,0,0,137,138,1,0,0,0,138,139,3,16,8,0,139,140,\n5,30,0,0,140,142,1,0,0,0,141,107,1,0,0,0,141,116,1,0,0,0,141,126,1,0,0,0,\n142,13,1,0,0,0,143,144,5,25,0,0,144,145,5,47,0,0,145,146,5,24,0,0,146,147,\n5,47,0,0,147,148,3,40,20,0,148,149,5,47,0,0,149,150,5,26,0,0,150,151,5,46,\n0,0,151,152,3,2,1,0,152,15,1,0,0,0,153,154,5,25,0,0,154,155,5,46,0,0,155,\n156,3,2,1,0,156,17,1,0,0,0,157,158,5,23,0,0,158,159,5,47,0,0,159,160,5,22,\n0,0,160,161,5,47,0,0,161,162,3,40,20,0,162,163,5,46,0,0,163,164,3,2,1,0,\n164,165,5,29,0,0,165,19,1,0,0,0,166,167,5,23,0,0,167,168,5,46,0,0,168,169,\n3,2,1,0,169,170,5,22,0,0,170,171,5,47,0,0,171,172,3,40,20,0,172,21,1,0,0,\n0,173,174,5,23,0,0,174,175,5,47,0,0,175,176,3,62,31,0,176,177,5,33,0,0,177,\n178,3,40,20,0,178,179,5,27,0,0,179,180,5,47,0,0,180,181,3,40,20,0,181,182,\n5,28,0,0,182,183,5,46,0,0,183,184,3,2,1,0,184,185,5,29,0,0,185,23,1,0,0,\n0,186,187,5,40,0,0,187,188,5,47,0,0,188,189,3,40,20,0,189,25,1,0,0,0,190,\n191,3,46,23,0,191,192,3,44,22,0,192,27,1,0,0,0,193,194,5,31,0,0,194,195,\n5,47,0,0,195,196,3,46,23,0,196,197,5,4,0,0,197,205,3,30,15,0,198,200,5,5,\n0,0,199,201,5,47,0,0,200,199,1,0,0,0,200,201,1,0,0,0,201,202,1,0,0,0,202,\n204,3,30,15,0,203,198,1,0,0,0,204,207,1,0,0,0,205,203,1,0,0,0,205,206,1,\n0,0,0,206,208,1,0,0,0,207,205,1,0,0,0,208,209,5,6,0,0,209,210,5,46,0,0,210,\n211,3,2,1,0,211,212,5,32,0,0,212,222,1,0,0,0,213,214,5,31,0,0,214,215,5,\n47,0,0,215,216,3,46,23,0,216,217,5,7,0,0,217,218,5,46,0,0,218,219,3,2,1,\n0,219,220,5,32,0,0,220,222,1,0,0,0,221,193,1,0,0,0,221,213,1,0,0,0,222,29,\n1,0,0,0,223,224,5,21,0,0,224,226,5,47,0,0,225,223,1,0,0,0,225,226,1,0,0,\n0,226,227,1,0,0,0,227,229,3,62,31,0,228,230,5,47,0,0,229,228,1,0,0,0,229,\n230,1,0,0,0,230,231,1,0,0,0,231,233,5,8,0,0,232,234,5,47,0,0,233,232,1,0,\n0,0,233,234,1,0,0,0,234,235,1,0,0,0,235,236,3,32,16,0,236,31,1,0,0,0,237,\n238,7,0,0,0,238,33,1,0,0,0,239,240,3,62,31,0,240,242,5,15,0,0,241,243,5,\n47,0,0,242,241,1,0,0,0,242,243,1,0,0,0,243,244,1,0,0,0,244,246,3,40,20,0,\n245,247,5,47,0,0,246,245,1,0,0,0,246,247,1,0,0,0,247,248,1,0,0,0,248,249,\n5,16,0,0,249,250,5,33,0,0,250,251,3,40,20,0,251,35,1,0,0,0,252,253,3,62,\n31,0,253,254,5,33,0,0,254,256,5,17,0,0,255,257,5,47,0,0,256,255,1,0,0,0,\n256,257,1,0,0,0,257,258,1,0,0,0,258,260,3,32,16,0,259,261,5,47,0,0,260,259,\n1,0,0,0,260,261,1,0,0,0,261,262,1,0,0,0,262,264,5,18,0,0,263,265,5,47,0,\n0,264,263,1,0,0,0,264,265,1,0,0,0,265,266,1,0,0,0,266,268,3,40,20,0,267,\n269,5,47,0,0,268,267,1,0,0,0,268,269,1,0,0,0,269,270,1,0,0,0,270,271,5,6,\n0,0,271,37,1,0,0,0,272,273,3,62,31,0,273,274,5,33,0,0,274,275,3,40,20,0,\n275,39,1,0,0,0,276,277,6,20,-1,0,277,282,3,42,21,0,278,279,5,36,0,0,279,\n282,3,40,20,4,280,282,3,48,24,0,281,276,1,0,0,0,281,278,1,0,0,0,281,280,\n1,0,0,0,282,321,1,0,0,0,283,285,10,7,0,0,284,286,5,47,0,0,285,284,1,0,0,\n0,285,286,1,0,0,0,286,287,1,0,0,0,287,289,5,19,0,0,288,290,5,47,0,0,289,\n288,1,0,0,0,289,290,1,0,0,0,290,291,1,0,0,0,291,320,3,40,20,8,292,294,10,\n6,0,0,293,295,5,47,0,0,294,293,1,0,0,0,294,295,1,0,0,0,295,296,1,0,0,0,296,\n298,5,20,0,0,297,299,5,47,0,0,298,297,1,0,0,0,298,299,1,0,0,0,299,300,1,\n0,0,0,300,320,3,40,20,7,301,303,10,3,0,0,302,304,5,47,0,0,303,302,1,0,0,\n0,303,304,1,0,0,0,304,305,1,0,0,0,305,307,5,42,0,0,306,308,5,47,0,0,307,\n306,1,0,0,0,307,308,1,0,0,0,308,309,1,0,0,0,309,320,3,40,20,4,310,312,10,\n2,0,0,311,313,5,47,0,0,312,311,1,0,0,0,312,313,1,0,0,0,313,314,1,0,0,0,314,\n316,5,43,0,0,315,317,5,47,0,0,316,315,1,0,0,0,316,317,1,0,0,0,317,318,1,\n0,0,0,318,320,3,40,20,3,319,283,1,0,0,0,319,292,1,0,0,0,319,301,1,0,0,0,\n319,310,1,0,0,0,320,323,1,0,0,0,321,319,1,0,0,0,321,322,1,0,0,0,322,41,1,\n0,0,0,323,321,1,0,0,0,324,325,3,46,23,0,325,326,3,44,22,0,326,43,1,0,0,0,\n327,343,5,7,0,0,328,329,5,4,0,0,329,337,3,40,20,0,330,332,5,5,0,0,331,333,\n5,47,0,0,332,331,1,0,0,0,332,333,1,0,0,0,333,334,1,0,0,0,334,336,3,40,20,\n0,335,330,1,0,0,0,336,339,1,0,0,0,337,335,1,0,0,0,337,338,1,0,0,0,338,340,\n1,0,0,0,339,337,1,0,0,0,340,341,5,6,0,0,341,343,1,0,0,0,342,327,1,0,0,0,\n342,328,1,0,0,0,343,45,1,0,0,0,344,345,5,44,0,0,345,47,1,0,0,0,346,350,3,\n60,30,0,347,350,3,50,25,0,348,350,3,62,31,0,349,346,1,0,0,0,349,347,1,0,\n0,0,349,348,1,0,0,0,350,49,1,0,0,0,351,356,3,54,27,0,352,356,3,56,28,0,353,\n356,3,52,26,0,354,356,3,58,29,0,355,351,1,0,0,0,355,352,1,0,0,0,355,353,\n1,0,0,0,355,354,1,0,0,0,356,51,1,0,0,0,357,358,5,35,0,0,358,53,1,0,0,0,359,\n360,5,37,0,0,360,55,1,0,0,0,361,362,5,38,0,0,362,57,1,0,0,0,363,364,5,4,\n0,0,364,372,3,40,20,0,365,367,5,5,0,0,366,368,5,47,0,0,367,366,1,0,0,0,367,\n368,1,0,0,0,368,369,1,0,0,0,369,371,3,40,20,0,370,365,1,0,0,0,371,374,1,\n0,0,0,372,370,1,0,0,0,372,373,1,0,0,0,373,375,1,0,0,0,374,372,1,0,0,0,375,\n376,5,6,0,0,376,59,1,0,0,0,377,382,3,62,31,0,378,379,5,15,0,0,379,380,3,\n40,20,0,380,381,5,16,0,0,381,383,1,0,0,0,382,378,1,0,0,0,383,384,1,0,0,0,\n384,382,1,0,0,0,384,385,1,0,0,0,385,61,1,0,0,0,386,387,5,45,0,0,387,63,1,\n0,0,0,40,65,69,71,74,78,80,95,136,141,200,205,221,225,229,233,242,246,256,\n260,264,268,281,285,289,294,298,303,307,312,316,319,321,332,337,342,349,\n355,367,372,384];\n\n\nconst atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);\n\nconst decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );\n\nconst sharedContextCache = new antlr4.PredictionContextCache();\n\nexport default class PseudoCodeParser extends antlr4.Parser {\n\n    static grammarFileName = \"java-escape\";\n    static literalNames = [ null, \"'debug'\", \"'kiir'\", \"'v\\\\u00E1ltoz\\\\u00F3k'\", \n                            \"'('\", \"','\", \"')'\", \"'()'\", \"':'\", \"'eg\\\\u00E9sz'\", \n                            \"'logikai'\", \"'sz\\\\u00F6veg'\", \"'eg\\\\u00E9sz t\\\\u00F6mb'\", \n                            \"'logikai t\\\\u00F6mb'\", \"'sz\\\\u00F6veg t\\\\u00F6mb'\", \n                            \"'['\", \"']'\", \"'L\\\\u00E9trehoz['\", \"']('\", null, \n                            null, \"'c\\\\u00EDmszerint'\", \"'am\\\\u00EDg'\", \n                            null, null, \"'k\\\\u00FCl\\\\u00F6nben'\", \"'akkor'\", \n                            null, \"'-ig'\", \"'ciklus v\\\\u00E9ge'\", \"'el\\\\u00E1gaz\\\\u00E1s v\\\\u00E9ge'\", \n                            \"'f\\\\u00FCggv\\\\u00E9ny'\", \"'f\\\\u00FCggv\\\\u00E9ny v\\\\u00E9ge'\", \n                            null, \"'<-'\", null, \"'~'\", null, null, null, \n                            \"'vissza'\", null, \"'/\\\\'\", \"'\\\\/'\" ];\n    static symbolicNames = [ null, null, null, null, null, null, null, null, \n                             null, null, null, null, null, null, null, null, \n                             null, null, null, \"OPERATOR\", \"COMPARISON\", \n                             \"CIMSZERINT\", \"AMIG\", \"CIKLUS\", \"HA\", \"KULONBEN\", \n                             \"AKKOR\", \"CSTART\", \"CEND\", \"CVEGE\", \"ELVEGE\", \n                             \"FUGGVENY\", \"FVEGE\", \"ASSIGN\", \"NYIL\", \"STRING\", \n                             \"NOT\", \"NUMBER\", \"BOOL\", \"IGAZ\", \"VISSZA\", \n                             \"HAMIS\", \"ES\", \"VAGY\", \"FUNCTION\", \"VARIABLE\", \n                             \"NL\", \"WS\" ];\n    static ruleNames = [ \"program\", \"body\", \"statement\", \"debug\", \"debugPrintStatement\", \n                         \"vars\", \"ifStatement\", \"elseIfBranch\", \"elseBranch\", \n                         \"whileStatement\", \"doWhileStatement\", \"forStatement\", \n                         \"returnStatement\", \"methodCallStatement\", \"functionDeclarationStatement\", \n                         \"parameterWithType\", \"type\", \"arrayElementAssignmentStatement\", \n                         \"arrayAssignmentStatement\", \"assignmentStatement\", \n                         \"expression\", \"functionCall\", \"parameters\", \"functionName\", \n                         \"value\", \"atom\", \"string\", \"number\", \"bool\", \"arrayShorthand\", \n                         \"arrayIndex\", \"variable\" ];\n\n    constructor(input) {\n        super(input);\n        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);\n        this.ruleNames = PseudoCodeParser.ruleNames;\n        this.literalNames = PseudoCodeParser.literalNames;\n        this.symbolicNames = PseudoCodeParser.symbolicNames;\n    }\n\n    get atn() {\n        return atn;\n    }\n\n    sempred(localctx, ruleIndex, predIndex) {\n    \tswitch(ruleIndex) {\n    \tcase 20:\n    \t    \t\treturn this.expression_sempred(localctx, predIndex);\n        default:\n            throw \"No predicate with index:\" + ruleIndex;\n       }\n    }\n\n    expression_sempred(localctx, predIndex) {\n    \tswitch(predIndex) {\n    \t\tcase 0:\n    \t\t\treturn this.precpred(this._ctx, 7);\n    \t\tcase 1:\n    \t\t\treturn this.precpred(this._ctx, 6);\n    \t\tcase 2:\n    \t\t\treturn this.precpred(this._ctx, 3);\n    \t\tcase 3:\n    \t\t\treturn this.precpred(this._ctx, 2);\n    \t\tdefault:\n    \t\t\tthrow \"No predicate with index:\" + predIndex;\n    \t}\n    };\n\n\n\n\n\tprogram() {\n\t    let localctx = new ProgramContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 0, PseudoCodeParser.RULE_program);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 65;\n\t        this._errHandler.sync(this);\n\t        _la = this._input.LA(1);\n\t        if(_la===47) {\n\t            this.state = 64;\n\t            this.match(PseudoCodeParser.WS);\n\t        }\n\n\t        this.state = 69; \n\t        this._errHandler.sync(this);\n\t        _la = this._input.LA(1);\n\t        do {\n\t            this.state = 69;\n\t            this._errHandler.sync(this);\n\t            switch(this._input.LA(1)) {\n\t            case 46:\n\t                this.state = 67;\n\t                this.match(PseudoCodeParser.NL);\n\t                break;\n\t            case 1:\n\t            case 2:\n\t            case 3:\n\t            case 23:\n\t            case 24:\n\t            case 31:\n\t            case 40:\n\t            case 44:\n\t            case 45:\n\t                this.state = 68;\n\t                this.statement();\n\t                break;\n\t            default:\n\t                throw new antlr4.error.NoViableAltException(this);\n\t            }\n\t            this.state = 71; \n\t            this._errHandler.sync(this);\n\t            _la = this._input.LA(1);\n\t        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & 2172649486) !== 0) || ((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & 113) !== 0));\n\t    } catch (re) {\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\n\t\t        localctx.exception = re;\n\t\t        this._errHandler.reportError(this, re);\n\t\t        this._errHandler.recover(this, re);\n\t\t    } else {\n\t\t    \tthrow re;\n\t\t    }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t}\n\n\n\n\tbody() {\n\t    let localctx = new BodyContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 2, PseudoCodeParser.RULE_body);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 74;\n\t        this._errHandler.sync(this);\n\t        _la = this._input.LA(1);\n\t        if(_la===47) {\n\t            this.state = 73;\n\t            this.match(PseudoCodeParser.WS);\n\t        }\n\n\t        this.state = 78; \n\t        this._errHandler.sync(this);\n\t        _la = this._input.LA(1);\n\t        do {\n\t            this.state = 78;\n\t            this._errHandler.sync(this);\n\t            switch(this._input.LA(1)) {\n\t            case 1:\n\t            case 2:\n\t            case 3:\n\t            case 23:\n\t            case 24:\n\t            case 31:\n\t            case 40:\n\t            case 44:\n\t            case 45:\n\t                this.state = 76;\n\t                this.statement();\n\t                break;\n\t            case 46:\n\t                this.state = 77;\n\t                this.match(PseudoCodeParser.NL);\n\t                break;\n\t            default:\n\t                throw new antlr4.error.NoViableAltException(this);\n\t            }\n\t            this.state = 80; \n\t            this._errHandler.sync(this);\n\t            _la = this._input.LA(1);\n\t        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & 2172649486) !== 0) || ((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & 113) !== 0));\n\t    } catch (re) {\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\n\t\t        localctx.exception = re;\n\t\t        this._errHandler.reportError(this, re);\n\t\t        this._errHandler.recover(this, re);\n\t\t    } else {\n\t\t    \tthrow re;\n\t\t    }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t}\n\n\n\n\tstatement() {\n\t    let localctx = new StatementContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 4, PseudoCodeParser.RULE_statement);\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 95;\n\t        this._errHandler.sync(this);\n\t        var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);\n\t        switch(la_) {\n\t        case 1:\n\t            this.state = 82;\n\t            this.vars();\n\t            break;\n\n\t        case 2:\n\t            this.state = 83;\n\t            this.methodCallStatement();\n\t            break;\n\n\t        case 3:\n\t            this.state = 84;\n\t            this.ifStatement();\n\t            break;\n\n\t        case 4:\n\t            this.state = 85;\n\t            this.whileStatement();\n\t            break;\n\n\t        case 5:\n\t            this.state = 86;\n\t            this.doWhileStatement();\n\t            break;\n\n\t        case 6:\n\t            this.state = 87;\n\t            this.forStatement();\n\t            break;\n\n\t        case 7:\n\t            this.state = 88;\n\t            this.arrayElementAssignmentStatement();\n\t            break;\n\n\t        case 8:\n\t            this.state = 89;\n\t            this.arrayAssignmentStatement();\n\t            break;\n\n\t        case 9:\n\t            this.state = 90;\n\t            this.assignmentStatement();\n\t            break;\n\n\t        case 10:\n\t            this.state = 91;\n\t            this.returnStatement();\n\t            break;\n\n\t        case 11:\n\t            this.state = 92;\n\t            this.functionDeclarationStatement();\n\t            break;\n\n\t        case 12:\n\t            this.state = 93;\n\t            this.debugPrintStatement();\n\t            break;\n\n\t        case 13:\n\t            this.state = 94;\n\t            this.debug();\n\t            break;\n\n\t        }\n\t        this.state = 97;\n\t        this.match(PseudoCodeParser.NL);\n\t    } catch (re) {\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\n\t\t        localctx.exception = re;\n\t\t        this._errHandler.reportError(this, re);\n\t\t        this._errHandler.recover(this, re);\n\t\t    } else {\n\t\t    \tthrow re;\n\t\t    }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t}\n\n\n\n\tdebug() {\n\t    let localctx = new DebugContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 6, PseudoCodeParser.RULE_debug);\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 99;\n\t        this.match(PseudoCodeParser.T__0);\n\t    } catch (re) {\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\n\t\t        localctx.exception = re;\n\t\t        this._errHandler.reportError(this, re);\n\t\t        this._errHandler.recover(this, re);\n\t\t    } else {\n\t\t    \tthrow re;\n\t\t    }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t}\n\n\n\n\tdebugPrintStatement() {\n\t    let localctx = new DebugPrintStatementContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 8, PseudoCodeParser.RULE_debugPrintStatement);\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 101;\n\t        this.match(PseudoCodeParser.T__1);\n\t        this.state = 102;\n\t        this.match(PseudoCodeParser.WS);\n\t        this.state = 103;\n\t        this.expression(0);\n\t    } catch (re) {\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\n\t\t        localctx.exception = re;\n\t\t        this._errHandler.reportError(this, re);\n\t\t        this._errHandler.recover(this, re);\n\t\t    } else {\n\t\t    \tthrow re;\n\t\t    }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t}\n\n\n\n\tvars() {\n\t    let localctx = new VarsContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 10, PseudoCodeParser.RULE_vars);\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 105;\n\t        this.match(PseudoCodeParser.T__2);\n\t    } catch (re) {\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\n\t\t        localctx.exception = re;\n\t\t        this._errHandler.reportError(this, re);\n\t\t        this._errHandler.recover(this, re);\n\t\t    } else {\n\t\t    \tthrow re;\n\t\t    }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t}\n\n\n\n\tifStatement() {\n\t    let localctx = new IfStatementContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 12, PseudoCodeParser.RULE_ifStatement);\n\t    try {\n\t        this.state = 141;\n\t        this._errHandler.sync(this);\n\t        var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);\n\t        switch(la_) {\n\t        case 1:\n\t            localctx = new SimpleIfStatementContext(this, localctx);\n\t            this.enterOuterAlt(localctx, 1);\n\t            this.state = 107;\n\t            this.match(PseudoCodeParser.HA);\n\t            this.state = 108;\n\t            this.match(PseudoCodeParser.WS);\n\t            this.state = 109;\n\t            this.expression(0);\n\t            this.state = 110;\n\t            this.match(PseudoCodeParser.WS);\n\t            this.state = 111;\n\t            this.match(PseudoCodeParser.AKKOR);\n\t            this.state = 112;\n\t            this.match(PseudoCodeParser.NL);\n\t            this.state = 113;\n\t            this.body();\n\t            this.state = 114;\n\t            this.match(PseudoCodeParser.ELVEGE);\n\t            break;\n\n\t        case 2:\n\t            localctx = new IfElseStatementContext(this, localctx);\n\t            this.enterOuterAlt(localctx, 2);\n\t            this.state = 116;\n\t            this.match(PseudoCodeParser.HA);\n\t            this.state = 117;\n\t            this.match(PseudoCodeParser.WS);\n\t            this.state = 118;\n\t            this.expression(0);\n\t            this.state = 119;\n\t            this.match(PseudoCodeParser.WS);\n\t            this.state = 120;\n\t            this.match(PseudoCodeParser.AKKOR);\n\t            this.state = 121;\n\t            this.match(PseudoCodeParser.NL);\n\t            this.state = 122;\n\t            this.body();\n\t            this.state = 123;\n\t            this.elseBranch();\n\t            this.state = 124;\n\t            this.match(PseudoCodeParser.ELVEGE);\n\t            break;\n\n\t        case 3:\n\t            localctx = new IfElseIfStatementContext(this, localctx);\n\t            this.enterOuterAlt(localctx, 3);\n\t            this.state = 126;\n\t            this.match(PseudoCodeParser.HA);\n\t            this.state = 127;\n\t            this.match(PseudoCodeParser.WS);\n\t            this.state = 128;\n\t            this.expression(0);\n\t            this.state = 129;\n\t            this.match(PseudoCodeParser.WS);\n\t            this.state = 130;\n\t            this.match(PseudoCodeParser.AKKOR);\n\t            this.state = 131;\n\t            this.match(PseudoCodeParser.NL);\n\t            this.state = 132;\n\t            this.body();\n\t            this.state = 134; \n\t            this._errHandler.sync(this);\n\t            var _alt = 1;\n\t            do {\n\t            \tswitch (_alt) {\n\t            \tcase 1:\n\t            \t\tthis.state = 133;\n\t            \t\tthis.elseIfBranch();\n\t            \t\tbreak;\n\t            \tdefault:\n\t            \t\tthrow new antlr4.error.NoViableAltException(this);\n\t            \t}\n\t            \tthis.state = 136; \n\t            \tthis._errHandler.sync(this);\n\t            \t_alt = this._interp.adaptivePredict(this._input,7, this._ctx);\n\t            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );\n\t            this.state = 138;\n\t            this.elseBranch();\n\t            this.state = 139;\n\t            this.match(PseudoCodeParser.ELVEGE);\n\t            break;\n\n\t        }\n\t    } catch (re) {\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\n\t\t        localctx.exception = re;\n\t\t        this._errHandler.reportError(this, re);\n\t\t        this._errHandler.recover(this, re);\n\t\t    } else {\n\t\t    \tthrow re;\n\t\t    }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t}\n\n\n\n\telseIfBranch() {\n\t    let localctx = new ElseIfBranchContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 14, PseudoCodeParser.RULE_elseIfBranch);\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 143;\n\t        this.match(PseudoCodeParser.KULONBEN);\n\t        this.state = 144;\n\t        this.match(PseudoCodeParser.WS);\n\t        this.state = 145;\n\t        this.match(PseudoCodeParser.HA);\n\t        this.state = 146;\n\t        this.match(PseudoCodeParser.WS);\n\t        this.state = 147;\n\t        this.expression(0);\n\t        this.state = 148;\n\t        this.match(PseudoCodeParser.WS);\n\t        this.state = 149;\n\t        this.match(PseudoCodeParser.AKKOR);\n\t        this.state = 150;\n\t        this.match(PseudoCodeParser.NL);\n\t        this.state = 151;\n\t        this.body();\n\t    } catch (re) {\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\n\t\t        localctx.exception = re;\n\t\t        this._errHandler.reportError(this, re);\n\t\t        this._errHandler.recover(this, re);\n\t\t    } else {\n\t\t    \tthrow re;\n\t\t    }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t}\n\n\n\n\telseBranch() {\n\t    let localctx = new ElseBranchContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 16, PseudoCodeParser.RULE_elseBranch);\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 153;\n\t        this.match(PseudoCodeParser.KULONBEN);\n\t        this.state = 154;\n\t        this.match(PseudoCodeParser.NL);\n\t        this.state = 155;\n\t        this.body();\n\t    } catch (re) {\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\n\t\t        localctx.exception = re;\n\t\t        this._errHandler.reportError(this, re);\n\t\t        this._errHandler.recover(this, re);\n\t\t    } else {\n\t\t    \tthrow re;\n\t\t    }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t}\n\n\n\n\twhileStatement() {\n\t    let localctx = new WhileStatementContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 18, PseudoCodeParser.RULE_whileStatement);\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 157;\n\t        this.match(PseudoCodeParser.CIKLUS);\n\t        this.state = 158;\n\t        this.match(PseudoCodeParser.WS);\n\t        this.state = 159;\n\t        this.match(PseudoCodeParser.AMIG);\n\t        this.state = 160;\n\t        this.match(PseudoCodeParser.WS);\n\t        this.state = 161;\n\t        this.expression(0);\n\t        this.state = 162;\n\t        this.match(PseudoCodeParser.NL);\n\t        this.state = 163;\n\t        this.body();\n\t        this.state = 164;\n\t        this.match(PseudoCodeParser.CVEGE);\n\t    } catch (re) {\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\n\t\t        localctx.exception = re;\n\t\t        this._errHandler.reportError(this, re);\n\t\t        this._errHandler.recover(this, re);\n\t\t    } else {\n\t\t    \tthrow re;\n\t\t    }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t}\n\n\n\n\tdoWhileStatement() {\n\t    let localctx = new DoWhileStatementContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 20, PseudoCodeParser.RULE_doWhileStatement);\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 166;\n\t        this.match(PseudoCodeParser.CIKLUS);\n\t        this.state = 167;\n\t        this.match(PseudoCodeParser.NL);\n\t        this.state = 168;\n\t        this.body();\n\t        this.state = 169;\n\t        this.match(PseudoCodeParser.AMIG);\n\t        this.state = 170;\n\t        this.match(PseudoCodeParser.WS);\n\t        this.state = 171;\n\t        this.expression(0);\n\t    } catch (re) {\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\n\t\t        localctx.exception = re;\n\t\t        this._errHandler.reportError(this, re);\n\t\t        this._errHandler.recover(this, re);\n\t\t    } else {\n\t\t    \tthrow re;\n\t\t    }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t}\n\n\n\n\tforStatement() {\n\t    let localctx = new ForStatementContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 22, PseudoCodeParser.RULE_forStatement);\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 173;\n\t        this.match(PseudoCodeParser.CIKLUS);\n\t        this.state = 174;\n\t        this.match(PseudoCodeParser.WS);\n\t        this.state = 175;\n\t        this.variable();\n\t        this.state = 176;\n\t        this.match(PseudoCodeParser.ASSIGN);\n\t        this.state = 177;\n\t        this.expression(0);\n\t        this.state = 178;\n\t        this.match(PseudoCodeParser.CSTART);\n\t        this.state = 179;\n\t        this.match(PseudoCodeParser.WS);\n\t        this.state = 180;\n\t        this.expression(0);\n\t        this.state = 181;\n\t        this.match(PseudoCodeParser.CEND);\n\t        this.state = 182;\n\t        this.match(PseudoCodeParser.NL);\n\t        this.state = 183;\n\t        this.body();\n\t        this.state = 184;\n\t        this.match(PseudoCodeParser.CVEGE);\n\t    } catch (re) {\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\n\t\t        localctx.exception = re;\n\t\t        this._errHandler.reportError(this, re);\n\t\t        this._errHandler.recover(this, re);\n\t\t    } else {\n\t\t    \tthrow re;\n\t\t    }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t}\n\n\n\n\treturnStatement() {\n\t    let localctx = new ReturnStatementContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 24, PseudoCodeParser.RULE_returnStatement);\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 186;\n\t        this.match(PseudoCodeParser.VISSZA);\n\t        this.state = 187;\n\t        this.match(PseudoCodeParser.WS);\n\t        this.state = 188;\n\t        this.expression(0);\n\t    } catch (re) {\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\n\t\t        localctx.exception = re;\n\t\t        this._errHandler.reportError(this, re);\n\t\t        this._errHandler.recover(this, re);\n\t\t    } else {\n\t\t    \tthrow re;\n\t\t    }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t}\n\n\n\n\tmethodCallStatement() {\n\t    let localctx = new MethodCallStatementContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 26, PseudoCodeParser.RULE_methodCallStatement);\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 190;\n\t        this.functionName();\n\t        this.state = 191;\n\t        this.parameters();\n\t    } catch (re) {\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\n\t\t        localctx.exception = re;\n\t\t        this._errHandler.reportError(this, re);\n\t\t        this._errHandler.recover(this, re);\n\t\t    } else {\n\t\t    \tthrow re;\n\t\t    }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t}\n\n\n\n\tfunctionDeclarationStatement() {\n\t    let localctx = new FunctionDeclarationStatementContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 28, PseudoCodeParser.RULE_functionDeclarationStatement);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.state = 221;\n\t        this._errHandler.sync(this);\n\t        var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);\n\t        switch(la_) {\n\t        case 1:\n\t            localctx = new FunctionDeclarationWithParametersContext(this, localctx);\n\t            this.enterOuterAlt(localctx, 1);\n\t            this.state = 193;\n\t            this.match(PseudoCodeParser.FUGGVENY);\n\t            this.state = 194;\n\t            this.match(PseudoCodeParser.WS);\n\t            this.state = 195;\n\t            this.functionName();\n\t            this.state = 196;\n\t            this.match(PseudoCodeParser.T__3);\n\t            this.state = 197;\n\t            this.parameterWithType();\n\t            this.state = 205;\n\t            this._errHandler.sync(this);\n\t            _la = this._input.LA(1);\n\t            while(_la===5) {\n\t                this.state = 198;\n\t                this.match(PseudoCodeParser.T__4);\n\t                this.state = 200;\n\t                this._errHandler.sync(this);\n\t                _la = this._input.LA(1);\n\t                if(_la===47) {\n\t                    this.state = 199;\n\t                    this.match(PseudoCodeParser.WS);\n\t                }\n\n\t                this.state = 202;\n\t                this.parameterWithType();\n\t                this.state = 207;\n\t                this._errHandler.sync(this);\n\t                _la = this._input.LA(1);\n\t            }\n\t            this.state = 208;\n\t            this.match(PseudoCodeParser.T__5);\n\t            this.state = 209;\n\t            this.match(PseudoCodeParser.NL);\n\t            this.state = 210;\n\t            this.body();\n\t            this.state = 211;\n\t            this.match(PseudoCodeParser.FVEGE);\n\t            break;\n\n\t        case 2:\n\t            localctx = new FunctionDeclarationWithoutParametersContext(this, localctx);\n\t            this.enterOuterAlt(localctx, 2);\n\t            this.state = 213;\n\t            this.match(PseudoCodeParser.FUGGVENY);\n\t            this.state = 214;\n\t            this.match(PseudoCodeParser.WS);\n\t            this.state = 215;\n\t            this.functionName();\n\t            this.state = 216;\n\t            this.match(PseudoCodeParser.T__6);\n\t            this.state = 217;\n\t            this.match(PseudoCodeParser.NL);\n\t            this.state = 218;\n\t            this.body();\n\t            this.state = 219;\n\t            this.match(PseudoCodeParser.FVEGE);\n\t            break;\n\n\t        }\n\t    } catch (re) {\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\n\t\t        localctx.exception = re;\n\t\t        this._errHandler.reportError(this, re);\n\t\t        this._errHandler.recover(this, re);\n\t\t    } else {\n\t\t    \tthrow re;\n\t\t    }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t}\n\n\n\n\tparameterWithType() {\n\t    let localctx = new ParameterWithTypeContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 30, PseudoCodeParser.RULE_parameterWithType);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 225;\n\t        this._errHandler.sync(this);\n\t        _la = this._input.LA(1);\n\t        if(_la===21) {\n\t            this.state = 223;\n\t            this.match(PseudoCodeParser.CIMSZERINT);\n\t            this.state = 224;\n\t            this.match(PseudoCodeParser.WS);\n\t        }\n\n\t        this.state = 227;\n\t        this.variable();\n\t        this.state = 229;\n\t        this._errHandler.sync(this);\n\t        _la = this._input.LA(1);\n\t        if(_la===47) {\n\t            this.state = 228;\n\t            this.match(PseudoCodeParser.WS);\n\t        }\n\n\t        this.state = 231;\n\t        this.match(PseudoCodeParser.T__7);\n\t        this.state = 233;\n\t        this._errHandler.sync(this);\n\t        _la = this._input.LA(1);\n\t        if(_la===47) {\n\t            this.state = 232;\n\t            this.match(PseudoCodeParser.WS);\n\t        }\n\n\t        this.state = 235;\n\t        this.type();\n\t    } catch (re) {\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\n\t\t        localctx.exception = re;\n\t\t        this._errHandler.reportError(this, re);\n\t\t        this._errHandler.recover(this, re);\n\t\t    } else {\n\t\t    \tthrow re;\n\t\t    }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t}\n\n\n\n\ttype() {\n\t    let localctx = new TypeContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 32, PseudoCodeParser.RULE_type);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 237;\n\t        _la = this._input.LA(1);\n\t        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & 32256) !== 0))) {\n\t        this._errHandler.recoverInline(this);\n\t        }\n\t        else {\n\t        \tthis._errHandler.reportMatch(this);\n\t            this.consume();\n\t        }\n\t    } catch (re) {\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\n\t\t        localctx.exception = re;\n\t\t        this._errHandler.reportError(this, re);\n\t\t        this._errHandler.recover(this, re);\n\t\t    } else {\n\t\t    \tthrow re;\n\t\t    }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t}\n\n\n\n\tarrayElementAssignmentStatement() {\n\t    let localctx = new ArrayElementAssignmentStatementContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 34, PseudoCodeParser.RULE_arrayElementAssignmentStatement);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 239;\n\t        this.variable();\n\t        this.state = 240;\n\t        this.match(PseudoCodeParser.T__14);\n\t        this.state = 242;\n\t        this._errHandler.sync(this);\n\t        _la = this._input.LA(1);\n\t        if(_la===47) {\n\t            this.state = 241;\n\t            this.match(PseudoCodeParser.WS);\n\t        }\n\n\t        this.state = 244;\n\t        this.expression(0);\n\t        this.state = 246;\n\t        this._errHandler.sync(this);\n\t        _la = this._input.LA(1);\n\t        if(_la===47) {\n\t            this.state = 245;\n\t            this.match(PseudoCodeParser.WS);\n\t        }\n\n\t        this.state = 248;\n\t        this.match(PseudoCodeParser.T__15);\n\t        this.state = 249;\n\t        this.match(PseudoCodeParser.ASSIGN);\n\t        this.state = 250;\n\t        this.expression(0);\n\t    } catch (re) {\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\n\t\t        localctx.exception = re;\n\t\t        this._errHandler.reportError(this, re);\n\t\t        this._errHandler.recover(this, re);\n\t\t    } else {\n\t\t    \tthrow re;\n\t\t    }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t}\n\n\n\n\tarrayAssignmentStatement() {\n\t    let localctx = new ArrayAssignmentStatementContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 36, PseudoCodeParser.RULE_arrayAssignmentStatement);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 252;\n\t        this.variable();\n\t        this.state = 253;\n\t        this.match(PseudoCodeParser.ASSIGN);\n\t        this.state = 254;\n\t        this.match(PseudoCodeParser.T__16);\n\t        this.state = 256;\n\t        this._errHandler.sync(this);\n\t        _la = this._input.LA(1);\n\t        if(_la===47) {\n\t            this.state = 255;\n\t            this.match(PseudoCodeParser.WS);\n\t        }\n\n\t        this.state = 258;\n\t        this.type();\n\t        this.state = 260;\n\t        this._errHandler.sync(this);\n\t        _la = this._input.LA(1);\n\t        if(_la===47) {\n\t            this.state = 259;\n\t            this.match(PseudoCodeParser.WS);\n\t        }\n\n\t        this.state = 262;\n\t        this.match(PseudoCodeParser.T__17);\n\t        this.state = 264;\n\t        this._errHandler.sync(this);\n\t        _la = this._input.LA(1);\n\t        if(_la===47) {\n\t            this.state = 263;\n\t            this.match(PseudoCodeParser.WS);\n\t        }\n\n\t        this.state = 266;\n\t        this.expression(0);\n\t        this.state = 268;\n\t        this._errHandler.sync(this);\n\t        _la = this._input.LA(1);\n\t        if(_la===47) {\n\t            this.state = 267;\n\t            this.match(PseudoCodeParser.WS);\n\t        }\n\n\t        this.state = 270;\n\t        this.match(PseudoCodeParser.T__5);\n\t    } catch (re) {\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\n\t\t        localctx.exception = re;\n\t\t        this._errHandler.reportError(this, re);\n\t\t        this._errHandler.recover(this, re);\n\t\t    } else {\n\t\t    \tthrow re;\n\t\t    }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t}\n\n\n\n\tassignmentStatement() {\n\t    let localctx = new AssignmentStatementContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 38, PseudoCodeParser.RULE_assignmentStatement);\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 272;\n\t        this.variable();\n\t        this.state = 273;\n\t        this.match(PseudoCodeParser.ASSIGN);\n\t        this.state = 274;\n\t        this.expression(0);\n\t    } catch (re) {\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\n\t\t        localctx.exception = re;\n\t\t        this._errHandler.reportError(this, re);\n\t\t        this._errHandler.recover(this, re);\n\t\t    } else {\n\t\t    \tthrow re;\n\t\t    }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t}\n\n\n\texpression(_p) {\n\t\tif(_p===undefined) {\n\t\t    _p = 0;\n\t\t}\n\t    const _parentctx = this._ctx;\n\t    const _parentState = this.state;\n\t    let localctx = new ExpressionContext(this, this._ctx, _parentState);\n\t    let _prevctx = localctx;\n\t    const _startState = 40;\n\t    this.enterRecursionRule(localctx, 40, PseudoCodeParser.RULE_expression, _p);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 281;\n\t        this._errHandler.sync(this);\n\t        switch(this._input.LA(1)) {\n\t        case 44:\n\t            localctx = new FunctionCallExpressionContext(this, localctx);\n\t            this._ctx = localctx;\n\t            _prevctx = localctx;\n\n\t            this.state = 277;\n\t            this.functionCall();\n\t            break;\n\t        case 36:\n\t            localctx = new NotExpressionContext(this, localctx);\n\t            this._ctx = localctx;\n\t            _prevctx = localctx;\n\t            this.state = 278;\n\t            this.match(PseudoCodeParser.NOT);\n\t            this.state = 279;\n\t            this.expression(4);\n\t            break;\n\t        case 4:\n\t        case 35:\n\t        case 37:\n\t        case 38:\n\t        case 45:\n\t            localctx = new ValueExpressionContext(this, localctx);\n\t            this._ctx = localctx;\n\t            _prevctx = localctx;\n\t            this.state = 280;\n\t            this.value();\n\t            break;\n\t        default:\n\t            throw new antlr4.error.NoViableAltException(this);\n\t        }\n\t        this._ctx.stop = this._input.LT(-1);\n\t        this.state = 321;\n\t        this._errHandler.sync(this);\n\t        var _alt = this._interp.adaptivePredict(this._input,31,this._ctx)\n\t        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {\n\t            if(_alt===1) {\n\t                if(this._parseListeners!==null) {\n\t                    this.triggerExitRuleEvent();\n\t                }\n\t                _prevctx = localctx;\n\t                this.state = 319;\n\t                this._errHandler.sync(this);\n\t                var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);\n\t                switch(la_) {\n\t                case 1:\n\t                    localctx = new CalculationExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));\n\t                    this.pushNewRecursionContext(localctx, _startState, PseudoCodeParser.RULE_expression);\n\t                    this.state = 283;\n\t                    if (!( this.precpred(this._ctx, 7))) {\n\t                        throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 7)\");\n\t                    }\n\t                    this.state = 285;\n\t                    this._errHandler.sync(this);\n\t                    _la = this._input.LA(1);\n\t                    if(_la===47) {\n\t                        this.state = 284;\n\t                        this.match(PseudoCodeParser.WS);\n\t                    }\n\n\t                    this.state = 287;\n\t                    this.match(PseudoCodeParser.OPERATOR);\n\t                    this.state = 289;\n\t                    this._errHandler.sync(this);\n\t                    _la = this._input.LA(1);\n\t                    if(_la===47) {\n\t                        this.state = 288;\n\t                        this.match(PseudoCodeParser.WS);\n\t                    }\n\n\t                    this.state = 291;\n\t                    this.expression(8);\n\t                    break;\n\n\t                case 2:\n\t                    localctx = new ComparisonExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));\n\t                    this.pushNewRecursionContext(localctx, _startState, PseudoCodeParser.RULE_expression);\n\t                    this.state = 292;\n\t                    if (!( this.precpred(this._ctx, 6))) {\n\t                        throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 6)\");\n\t                    }\n\t                    this.state = 294;\n\t                    this._errHandler.sync(this);\n\t                    _la = this._input.LA(1);\n\t                    if(_la===47) {\n\t                        this.state = 293;\n\t                        this.match(PseudoCodeParser.WS);\n\t                    }\n\n\t                    this.state = 296;\n\t                    this.match(PseudoCodeParser.COMPARISON);\n\t                    this.state = 298;\n\t                    this._errHandler.sync(this);\n\t                    _la = this._input.LA(1);\n\t                    if(_la===47) {\n\t                        this.state = 297;\n\t                        this.match(PseudoCodeParser.WS);\n\t                    }\n\n\t                    this.state = 300;\n\t                    this.expression(7);\n\t                    break;\n\n\t                case 3:\n\t                    localctx = new AndExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));\n\t                    this.pushNewRecursionContext(localctx, _startState, PseudoCodeParser.RULE_expression);\n\t                    this.state = 301;\n\t                    if (!( this.precpred(this._ctx, 3))) {\n\t                        throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 3)\");\n\t                    }\n\t                    this.state = 303;\n\t                    this._errHandler.sync(this);\n\t                    _la = this._input.LA(1);\n\t                    if(_la===47) {\n\t                        this.state = 302;\n\t                        this.match(PseudoCodeParser.WS);\n\t                    }\n\n\t                    this.state = 305;\n\t                    this.match(PseudoCodeParser.ES);\n\t                    this.state = 307;\n\t                    this._errHandler.sync(this);\n\t                    _la = this._input.LA(1);\n\t                    if(_la===47) {\n\t                        this.state = 306;\n\t                        this.match(PseudoCodeParser.WS);\n\t                    }\n\n\t                    this.state = 309;\n\t                    this.expression(4);\n\t                    break;\n\n\t                case 4:\n\t                    localctx = new OrExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));\n\t                    this.pushNewRecursionContext(localctx, _startState, PseudoCodeParser.RULE_expression);\n\t                    this.state = 310;\n\t                    if (!( this.precpred(this._ctx, 2))) {\n\t                        throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 2)\");\n\t                    }\n\t                    this.state = 312;\n\t                    this._errHandler.sync(this);\n\t                    _la = this._input.LA(1);\n\t                    if(_la===47) {\n\t                        this.state = 311;\n\t                        this.match(PseudoCodeParser.WS);\n\t                    }\n\n\t                    this.state = 314;\n\t                    this.match(PseudoCodeParser.VAGY);\n\t                    this.state = 316;\n\t                    this._errHandler.sync(this);\n\t                    _la = this._input.LA(1);\n\t                    if(_la===47) {\n\t                        this.state = 315;\n\t                        this.match(PseudoCodeParser.WS);\n\t                    }\n\n\t                    this.state = 318;\n\t                    this.expression(3);\n\t                    break;\n\n\t                } \n\t            }\n\t            this.state = 323;\n\t            this._errHandler.sync(this);\n\t            _alt = this._interp.adaptivePredict(this._input,31,this._ctx);\n\t        }\n\n\t    } catch( error) {\n\t        if(error instanceof antlr4.error.RecognitionException) {\n\t\t        localctx.exception = error;\n\t\t        this._errHandler.reportError(this, error);\n\t\t        this._errHandler.recover(this, error);\n\t\t    } else {\n\t\t    \tthrow error;\n\t\t    }\n\t    } finally {\n\t        this.unrollRecursionContexts(_parentctx)\n\t    }\n\t    return localctx;\n\t}\n\n\n\n\tfunctionCall() {\n\t    let localctx = new FunctionCallContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 42, PseudoCodeParser.RULE_functionCall);\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 324;\n\t        this.functionName();\n\t        this.state = 325;\n\t        this.parameters();\n\t    } catch (re) {\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\n\t\t        localctx.exception = re;\n\t\t        this._errHandler.reportError(this, re);\n\t\t        this._errHandler.recover(this, re);\n\t\t    } else {\n\t\t    \tthrow re;\n\t\t    }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t}\n\n\n\n\tparameters() {\n\t    let localctx = new ParametersContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 44, PseudoCodeParser.RULE_parameters);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.state = 342;\n\t        this._errHandler.sync(this);\n\t        switch(this._input.LA(1)) {\n\t        case 7:\n\t            this.enterOuterAlt(localctx, 1);\n\t            this.state = 327;\n\t            this.match(PseudoCodeParser.T__6);\n\t            break;\n\t        case 4:\n\t            this.enterOuterAlt(localctx, 2);\n\t            this.state = 328;\n\t            this.match(PseudoCodeParser.T__3);\n\t            this.state = 329;\n\t            this.expression(0);\n\t            this.state = 337;\n\t            this._errHandler.sync(this);\n\t            _la = this._input.LA(1);\n\t            while(_la===5) {\n\t                this.state = 330;\n\t                this.match(PseudoCodeParser.T__4);\n\t                this.state = 332;\n\t                this._errHandler.sync(this);\n\t                _la = this._input.LA(1);\n\t                if(_la===47) {\n\t                    this.state = 331;\n\t                    this.match(PseudoCodeParser.WS);\n\t                }\n\n\t                this.state = 334;\n\t                this.expression(0);\n\t                this.state = 339;\n\t                this._errHandler.sync(this);\n\t                _la = this._input.LA(1);\n\t            }\n\t            this.state = 340;\n\t            this.match(PseudoCodeParser.T__5);\n\t            break;\n\t        default:\n\t            throw new antlr4.error.NoViableAltException(this);\n\t        }\n\t    } catch (re) {\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\n\t\t        localctx.exception = re;\n\t\t        this._errHandler.reportError(this, re);\n\t\t        this._errHandler.recover(this, re);\n\t\t    } else {\n\t\t    \tthrow re;\n\t\t    }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t}\n\n\n\n\tfunctionName() {\n\t    let localctx = new FunctionNameContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 46, PseudoCodeParser.RULE_functionName);\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 344;\n\t        this.match(PseudoCodeParser.FUNCTION);\n\t    } catch (re) {\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\n\t\t        localctx.exception = re;\n\t\t        this._errHandler.reportError(this, re);\n\t\t        this._errHandler.recover(this, re);\n\t\t    } else {\n\t\t    \tthrow re;\n\t\t    }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t}\n\n\n\n\tvalue() {\n\t    let localctx = new ValueContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 48, PseudoCodeParser.RULE_value);\n\t    try {\n\t        this.state = 349;\n\t        this._errHandler.sync(this);\n\t        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);\n\t        switch(la_) {\n\t        case 1:\n\t            this.enterOuterAlt(localctx, 1);\n\t            this.state = 346;\n\t            this.arrayIndex();\n\t            break;\n\n\t        case 2:\n\t            this.enterOuterAlt(localctx, 2);\n\t            this.state = 347;\n\t            this.atom();\n\t            break;\n\n\t        case 3:\n\t            this.enterOuterAlt(localctx, 3);\n\t            this.state = 348;\n\t            this.variable();\n\t            break;\n\n\t        }\n\t    } catch (re) {\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\n\t\t        localctx.exception = re;\n\t\t        this._errHandler.reportError(this, re);\n\t\t        this._errHandler.recover(this, re);\n\t\t    } else {\n\t\t    \tthrow re;\n\t\t    }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t}\n\n\n\n\tatom() {\n\t    let localctx = new AtomContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 50, PseudoCodeParser.RULE_atom);\n\t    try {\n\t        this.state = 355;\n\t        this._errHandler.sync(this);\n\t        switch(this._input.LA(1)) {\n\t        case 37:\n\t            this.enterOuterAlt(localctx, 1);\n\t            this.state = 351;\n\t            this.number();\n\t            break;\n\t        case 38:\n\t            this.enterOuterAlt(localctx, 2);\n\t            this.state = 352;\n\t            this.bool();\n\t            break;\n\t        case 35:\n\t            this.enterOuterAlt(localctx, 3);\n\t            this.state = 353;\n\t            this.string();\n\t            break;\n\t        case 4:\n\t            this.enterOuterAlt(localctx, 4);\n\t            this.state = 354;\n\t            this.arrayShorthand();\n\t            break;\n\t        default:\n\t            throw new antlr4.error.NoViableAltException(this);\n\t        }\n\t    } catch (re) {\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\n\t\t        localctx.exception = re;\n\t\t        this._errHandler.reportError(this, re);\n\t\t        this._errHandler.recover(this, re);\n\t\t    } else {\n\t\t    \tthrow re;\n\t\t    }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t}\n\n\n\n\tstring() {\n\t    let localctx = new StringContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 52, PseudoCodeParser.RULE_string);\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 357;\n\t        this.match(PseudoCodeParser.STRING);\n\t    } catch (re) {\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\n\t\t        localctx.exception = re;\n\t\t        this._errHandler.reportError(this, re);\n\t\t        this._errHandler.recover(this, re);\n\t\t    } else {\n\t\t    \tthrow re;\n\t\t    }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t}\n\n\n\n\tnumber() {\n\t    let localctx = new NumberContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 54, PseudoCodeParser.RULE_number);\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 359;\n\t        this.match(PseudoCodeParser.NUMBER);\n\t    } catch (re) {\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\n\t\t        localctx.exception = re;\n\t\t        this._errHandler.reportError(this, re);\n\t\t        this._errHandler.recover(this, re);\n\t\t    } else {\n\t\t    \tthrow re;\n\t\t    }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t}\n\n\n\n\tbool() {\n\t    let localctx = new BoolContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 56, PseudoCodeParser.RULE_bool);\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 361;\n\t        this.match(PseudoCodeParser.BOOL);\n\t    } catch (re) {\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\n\t\t        localctx.exception = re;\n\t\t        this._errHandler.reportError(this, re);\n\t\t        this._errHandler.recover(this, re);\n\t\t    } else {\n\t\t    \tthrow re;\n\t\t    }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t}\n\n\n\n\tarrayShorthand() {\n\t    let localctx = new ArrayShorthandContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 58, PseudoCodeParser.RULE_arrayShorthand);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 363;\n\t        this.match(PseudoCodeParser.T__3);\n\t        this.state = 364;\n\t        this.expression(0);\n\t        this.state = 372;\n\t        this._errHandler.sync(this);\n\t        _la = this._input.LA(1);\n\t        while(_la===5) {\n\t            this.state = 365;\n\t            this.match(PseudoCodeParser.T__4);\n\t            this.state = 367;\n\t            this._errHandler.sync(this);\n\t            _la = this._input.LA(1);\n\t            if(_la===47) {\n\t                this.state = 366;\n\t                this.match(PseudoCodeParser.WS);\n\t            }\n\n\t            this.state = 369;\n\t            this.expression(0);\n\t            this.state = 374;\n\t            this._errHandler.sync(this);\n\t            _la = this._input.LA(1);\n\t        }\n\t        this.state = 375;\n\t        this.match(PseudoCodeParser.T__5);\n\t    } catch (re) {\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\n\t\t        localctx.exception = re;\n\t\t        this._errHandler.reportError(this, re);\n\t\t        this._errHandler.recover(this, re);\n\t\t    } else {\n\t\t    \tthrow re;\n\t\t    }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t}\n\n\n\n\tarrayIndex() {\n\t    let localctx = new ArrayIndexContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 60, PseudoCodeParser.RULE_arrayIndex);\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 377;\n\t        this.variable();\n\t        this.state = 382; \n\t        this._errHandler.sync(this);\n\t        var _alt = 1;\n\t        do {\n\t        \tswitch (_alt) {\n\t        \tcase 1:\n\t        \t\tthis.state = 378;\n\t        \t\tthis.match(PseudoCodeParser.T__14);\n\t        \t\tthis.state = 379;\n\t        \t\tthis.expression(0);\n\t        \t\tthis.state = 380;\n\t        \t\tthis.match(PseudoCodeParser.T__15);\n\t        \t\tbreak;\n\t        \tdefault:\n\t        \t\tthrow new antlr4.error.NoViableAltException(this);\n\t        \t}\n\t        \tthis.state = 384; \n\t        \tthis._errHandler.sync(this);\n\t        \t_alt = this._interp.adaptivePredict(this._input,39, this._ctx);\n\t        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );\n\t    } catch (re) {\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\n\t\t        localctx.exception = re;\n\t\t        this._errHandler.reportError(this, re);\n\t\t        this._errHandler.recover(this, re);\n\t\t    } else {\n\t\t    \tthrow re;\n\t\t    }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t}\n\n\n\n\tvariable() {\n\t    let localctx = new VariableContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 62, PseudoCodeParser.RULE_variable);\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 386;\n\t        this.match(PseudoCodeParser.VARIABLE);\n\t    } catch (re) {\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\n\t\t        localctx.exception = re;\n\t\t        this._errHandler.reportError(this, re);\n\t\t        this._errHandler.recover(this, re);\n\t\t    } else {\n\t\t    \tthrow re;\n\t\t    }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t}\n\n\n}\n\nPseudoCodeParser.EOF = antlr4.Token.EOF;\nPseudoCodeParser.T__0 = 1;\nPseudoCodeParser.T__1 = 2;\nPseudoCodeParser.T__2 = 3;\nPseudoCodeParser.T__3 = 4;\nPseudoCodeParser.T__4 = 5;\nPseudoCodeParser.T__5 = 6;\nPseudoCodeParser.T__6 = 7;\nPseudoCodeParser.T__7 = 8;\nPseudoCodeParser.T__8 = 9;\nPseudoCodeParser.T__9 = 10;\nPseudoCodeParser.T__10 = 11;\nPseudoCodeParser.T__11 = 12;\nPseudoCodeParser.T__12 = 13;\nPseudoCodeParser.T__13 = 14;\nPseudoCodeParser.T__14 = 15;\nPseudoCodeParser.T__15 = 16;\nPseudoCodeParser.T__16 = 17;\nPseudoCodeParser.T__17 = 18;\nPseudoCodeParser.OPERATOR = 19;\nPseudoCodeParser.COMPARISON = 20;\nPseudoCodeParser.CIMSZERINT = 21;\nPseudoCodeParser.AMIG = 22;\nPseudoCodeParser.CIKLUS = 23;\nPseudoCodeParser.HA = 24;\nPseudoCodeParser.KULONBEN = 25;\nPseudoCodeParser.AKKOR = 26;\nPseudoCodeParser.CSTART = 27;\nPseudoCodeParser.CEND = 28;\nPseudoCodeParser.CVEGE = 29;\nPseudoCodeParser.ELVEGE = 30;\nPseudoCodeParser.FUGGVENY = 31;\nPseudoCodeParser.FVEGE = 32;\nPseudoCodeParser.ASSIGN = 33;\nPseudoCodeParser.NYIL = 34;\nPseudoCodeParser.STRING = 35;\nPseudoCodeParser.NOT = 36;\nPseudoCodeParser.NUMBER = 37;\nPseudoCodeParser.BOOL = 38;\nPseudoCodeParser.IGAZ = 39;\nPseudoCodeParser.VISSZA = 40;\nPseudoCodeParser.HAMIS = 41;\nPseudoCodeParser.ES = 42;\nPseudoCodeParser.VAGY = 43;\nPseudoCodeParser.FUNCTION = 44;\nPseudoCodeParser.VARIABLE = 45;\nPseudoCodeParser.NL = 46;\nPseudoCodeParser.WS = 47;\n\nPseudoCodeParser.RULE_program = 0;\nPseudoCodeParser.RULE_body = 1;\nPseudoCodeParser.RULE_statement = 2;\nPseudoCodeParser.RULE_debug = 3;\nPseudoCodeParser.RULE_debugPrintStatement = 4;\nPseudoCodeParser.RULE_vars = 5;\nPseudoCodeParser.RULE_ifStatement = 6;\nPseudoCodeParser.RULE_elseIfBranch = 7;\nPseudoCodeParser.RULE_elseBranch = 8;\nPseudoCodeParser.RULE_whileStatement = 9;\nPseudoCodeParser.RULE_doWhileStatement = 10;\nPseudoCodeParser.RULE_forStatement = 11;\nPseudoCodeParser.RULE_returnStatement = 12;\nPseudoCodeParser.RULE_methodCallStatement = 13;\nPseudoCodeParser.RULE_functionDeclarationStatement = 14;\nPseudoCodeParser.RULE_parameterWithType = 15;\nPseudoCodeParser.RULE_type = 16;\nPseudoCodeParser.RULE_arrayElementAssignmentStatement = 17;\nPseudoCodeParser.RULE_arrayAssignmentStatement = 18;\nPseudoCodeParser.RULE_assignmentStatement = 19;\nPseudoCodeParser.RULE_expression = 20;\nPseudoCodeParser.RULE_functionCall = 21;\nPseudoCodeParser.RULE_parameters = 22;\nPseudoCodeParser.RULE_functionName = 23;\nPseudoCodeParser.RULE_value = 24;\nPseudoCodeParser.RULE_atom = 25;\nPseudoCodeParser.RULE_string = 26;\nPseudoCodeParser.RULE_number = 27;\nPseudoCodeParser.RULE_bool = 28;\nPseudoCodeParser.RULE_arrayShorthand = 29;\nPseudoCodeParser.RULE_arrayIndex = 30;\nPseudoCodeParser.RULE_variable = 31;\n\nclass ProgramContext extends antlr4.ParserRuleContext {\n\n    constructor(parser, parent, invokingState) {\n        if(parent===undefined) {\n            parent = null;\n        }\n        if(invokingState===undefined || invokingState===null) {\n            invokingState = -1;\n        }\n        super(parent, invokingState);\n        this.parser = parser;\n        this.ruleIndex = PseudoCodeParser.RULE_program;\n    }\n\n\tWS() {\n\t    return this.getToken(PseudoCodeParser.WS, 0);\n\t};\n\n\tNL = function(i) {\n\t\tif(i===undefined) {\n\t\t\ti = null;\n\t\t}\n\t    if(i===null) {\n\t        return this.getTokens(PseudoCodeParser.NL);\n\t    } else {\n\t        return this.getToken(PseudoCodeParser.NL, i);\n\t    }\n\t};\n\n\n\tstatement = function(i) {\n\t    if(i===undefined) {\n\t        i = null;\n\t    }\n\t    if(i===null) {\n\t        return this.getTypedRuleContexts(StatementContext);\n\t    } else {\n\t        return this.getTypedRuleContext(StatementContext,i);\n\t    }\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.enterProgram(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.exitProgram(this);\n\t\t}\n\t}\n\n\taccept(visitor) {\n\t    if ( visitor instanceof PseudoCodeVisitor ) {\n\t        return visitor.visitProgram(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t}\n\n\n}\n\n\n\nclass BodyContext extends antlr4.ParserRuleContext {\n\n    constructor(parser, parent, invokingState) {\n        if(parent===undefined) {\n            parent = null;\n        }\n        if(invokingState===undefined || invokingState===null) {\n            invokingState = -1;\n        }\n        super(parent, invokingState);\n        this.parser = parser;\n        this.ruleIndex = PseudoCodeParser.RULE_body;\n    }\n\n\tWS() {\n\t    return this.getToken(PseudoCodeParser.WS, 0);\n\t};\n\n\tstatement = function(i) {\n\t    if(i===undefined) {\n\t        i = null;\n\t    }\n\t    if(i===null) {\n\t        return this.getTypedRuleContexts(StatementContext);\n\t    } else {\n\t        return this.getTypedRuleContext(StatementContext,i);\n\t    }\n\t};\n\n\tNL = function(i) {\n\t\tif(i===undefined) {\n\t\t\ti = null;\n\t\t}\n\t    if(i===null) {\n\t        return this.getTokens(PseudoCodeParser.NL);\n\t    } else {\n\t        return this.getToken(PseudoCodeParser.NL, i);\n\t    }\n\t};\n\n\n\tenterRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.enterBody(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.exitBody(this);\n\t\t}\n\t}\n\n\taccept(visitor) {\n\t    if ( visitor instanceof PseudoCodeVisitor ) {\n\t        return visitor.visitBody(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t}\n\n\n}\n\n\n\nclass StatementContext extends antlr4.ParserRuleContext {\n\n    constructor(parser, parent, invokingState) {\n        if(parent===undefined) {\n            parent = null;\n        }\n        if(invokingState===undefined || invokingState===null) {\n            invokingState = -1;\n        }\n        super(parent, invokingState);\n        this.parser = parser;\n        this.ruleIndex = PseudoCodeParser.RULE_statement;\n    }\n\n\tNL() {\n\t    return this.getToken(PseudoCodeParser.NL, 0);\n\t};\n\n\tvars() {\n\t    return this.getTypedRuleContext(VarsContext,0);\n\t};\n\n\tmethodCallStatement() {\n\t    return this.getTypedRuleContext(MethodCallStatementContext,0);\n\t};\n\n\tifStatement() {\n\t    return this.getTypedRuleContext(IfStatementContext,0);\n\t};\n\n\twhileStatement() {\n\t    return this.getTypedRuleContext(WhileStatementContext,0);\n\t};\n\n\tdoWhileStatement() {\n\t    return this.getTypedRuleContext(DoWhileStatementContext,0);\n\t};\n\n\tforStatement() {\n\t    return this.getTypedRuleContext(ForStatementContext,0);\n\t};\n\n\tarrayElementAssignmentStatement() {\n\t    return this.getTypedRuleContext(ArrayElementAssignmentStatementContext,0);\n\t};\n\n\tarrayAssignmentStatement() {\n\t    return this.getTypedRuleContext(ArrayAssignmentStatementContext,0);\n\t};\n\n\tassignmentStatement() {\n\t    return this.getTypedRuleContext(AssignmentStatementContext,0);\n\t};\n\n\treturnStatement() {\n\t    return this.getTypedRuleContext(ReturnStatementContext,0);\n\t};\n\n\tfunctionDeclarationStatement() {\n\t    return this.getTypedRuleContext(FunctionDeclarationStatementContext,0);\n\t};\n\n\tdebugPrintStatement() {\n\t    return this.getTypedRuleContext(DebugPrintStatementContext,0);\n\t};\n\n\tdebug() {\n\t    return this.getTypedRuleContext(DebugContext,0);\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.enterStatement(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.exitStatement(this);\n\t\t}\n\t}\n\n\taccept(visitor) {\n\t    if ( visitor instanceof PseudoCodeVisitor ) {\n\t        return visitor.visitStatement(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t}\n\n\n}\n\n\n\nclass DebugContext extends antlr4.ParserRuleContext {\n\n    constructor(parser, parent, invokingState) {\n        if(parent===undefined) {\n            parent = null;\n        }\n        if(invokingState===undefined || invokingState===null) {\n            invokingState = -1;\n        }\n        super(parent, invokingState);\n        this.parser = parser;\n        this.ruleIndex = PseudoCodeParser.RULE_debug;\n    }\n\n\n\tenterRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.enterDebug(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.exitDebug(this);\n\t\t}\n\t}\n\n\taccept(visitor) {\n\t    if ( visitor instanceof PseudoCodeVisitor ) {\n\t        return visitor.visitDebug(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t}\n\n\n}\n\n\n\nclass DebugPrintStatementContext extends antlr4.ParserRuleContext {\n\n    constructor(parser, parent, invokingState) {\n        if(parent===undefined) {\n            parent = null;\n        }\n        if(invokingState===undefined || invokingState===null) {\n            invokingState = -1;\n        }\n        super(parent, invokingState);\n        this.parser = parser;\n        this.ruleIndex = PseudoCodeParser.RULE_debugPrintStatement;\n    }\n\n\tWS() {\n\t    return this.getToken(PseudoCodeParser.WS, 0);\n\t};\n\n\texpression() {\n\t    return this.getTypedRuleContext(ExpressionContext,0);\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.enterDebugPrintStatement(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.exitDebugPrintStatement(this);\n\t\t}\n\t}\n\n\taccept(visitor) {\n\t    if ( visitor instanceof PseudoCodeVisitor ) {\n\t        return visitor.visitDebugPrintStatement(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t}\n\n\n}\n\n\n\nclass VarsContext extends antlr4.ParserRuleContext {\n\n    constructor(parser, parent, invokingState) {\n        if(parent===undefined) {\n            parent = null;\n        }\n        if(invokingState===undefined || invokingState===null) {\n            invokingState = -1;\n        }\n        super(parent, invokingState);\n        this.parser = parser;\n        this.ruleIndex = PseudoCodeParser.RULE_vars;\n    }\n\n\n\tenterRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.enterVars(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.exitVars(this);\n\t\t}\n\t}\n\n\taccept(visitor) {\n\t    if ( visitor instanceof PseudoCodeVisitor ) {\n\t        return visitor.visitVars(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t}\n\n\n}\n\n\n\nclass IfStatementContext extends antlr4.ParserRuleContext {\n\n    constructor(parser, parent, invokingState) {\n        if(parent===undefined) {\n            parent = null;\n        }\n        if(invokingState===undefined || invokingState===null) {\n            invokingState = -1;\n        }\n        super(parent, invokingState);\n        this.parser = parser;\n        this.ruleIndex = PseudoCodeParser.RULE_ifStatement;\n    }\n\n\n\t \n\t\tcopyFrom(ctx) {\n\t\t\tsuper.copyFrom(ctx);\n\t\t}\n\n}\n\n\nclass SimpleIfStatementContext extends IfStatementContext {\n\n    constructor(parser, ctx) {\n        super(parser);\n        super.copyFrom(ctx);\n    }\n\n\tHA() {\n\t    return this.getToken(PseudoCodeParser.HA, 0);\n\t};\n\n\tWS = function(i) {\n\t\tif(i===undefined) {\n\t\t\ti = null;\n\t\t}\n\t    if(i===null) {\n\t        return this.getTokens(PseudoCodeParser.WS);\n\t    } else {\n\t        return this.getToken(PseudoCodeParser.WS, i);\n\t    }\n\t};\n\n\n\texpression() {\n\t    return this.getTypedRuleContext(ExpressionContext,0);\n\t};\n\n\tAKKOR() {\n\t    return this.getToken(PseudoCodeParser.AKKOR, 0);\n\t};\n\n\tNL() {\n\t    return this.getToken(PseudoCodeParser.NL, 0);\n\t};\n\n\tbody() {\n\t    return this.getTypedRuleContext(BodyContext,0);\n\t};\n\n\tELVEGE() {\n\t    return this.getToken(PseudoCodeParser.ELVEGE, 0);\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.enterSimpleIfStatement(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.exitSimpleIfStatement(this);\n\t\t}\n\t}\n\n\taccept(visitor) {\n\t    if ( visitor instanceof PseudoCodeVisitor ) {\n\t        return visitor.visitSimpleIfStatement(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t}\n\n\n}\n\nPseudoCodeParser.SimpleIfStatementContext = SimpleIfStatementContext;\n\nclass IfElseStatementContext extends IfStatementContext {\n\n    constructor(parser, ctx) {\n        super(parser);\n        super.copyFrom(ctx);\n    }\n\n\tHA() {\n\t    return this.getToken(PseudoCodeParser.HA, 0);\n\t};\n\n\tWS = function(i) {\n\t\tif(i===undefined) {\n\t\t\ti = null;\n\t\t}\n\t    if(i===null) {\n\t        return this.getTokens(PseudoCodeParser.WS);\n\t    } else {\n\t        return this.getToken(PseudoCodeParser.WS, i);\n\t    }\n\t};\n\n\n\texpression() {\n\t    return this.getTypedRuleContext(ExpressionContext,0);\n\t};\n\n\tAKKOR() {\n\t    return this.getToken(PseudoCodeParser.AKKOR, 0);\n\t};\n\n\tNL() {\n\t    return this.getToken(PseudoCodeParser.NL, 0);\n\t};\n\n\tbody() {\n\t    return this.getTypedRuleContext(BodyContext,0);\n\t};\n\n\telseBranch() {\n\t    return this.getTypedRuleContext(ElseBranchContext,0);\n\t};\n\n\tELVEGE() {\n\t    return this.getToken(PseudoCodeParser.ELVEGE, 0);\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.enterIfElseStatement(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.exitIfElseStatement(this);\n\t\t}\n\t}\n\n\taccept(visitor) {\n\t    if ( visitor instanceof PseudoCodeVisitor ) {\n\t        return visitor.visitIfElseStatement(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t}\n\n\n}\n\nPseudoCodeParser.IfElseStatementContext = IfElseStatementContext;\n\nclass IfElseIfStatementContext extends IfStatementContext {\n\n    constructor(parser, ctx) {\n        super(parser);\n        super.copyFrom(ctx);\n    }\n\n\tHA() {\n\t    return this.getToken(PseudoCodeParser.HA, 0);\n\t};\n\n\tWS = function(i) {\n\t\tif(i===undefined) {\n\t\t\ti = null;\n\t\t}\n\t    if(i===null) {\n\t        return this.getTokens(PseudoCodeParser.WS);\n\t    } else {\n\t        return this.getToken(PseudoCodeParser.WS, i);\n\t    }\n\t};\n\n\n\texpression() {\n\t    return this.getTypedRuleContext(ExpressionContext,0);\n\t};\n\n\tAKKOR() {\n\t    return this.getToken(PseudoCodeParser.AKKOR, 0);\n\t};\n\n\tNL() {\n\t    return this.getToken(PseudoCodeParser.NL, 0);\n\t};\n\n\tbody() {\n\t    return this.getTypedRuleContext(BodyContext,0);\n\t};\n\n\telseBranch() {\n\t    return this.getTypedRuleContext(ElseBranchContext,0);\n\t};\n\n\tELVEGE() {\n\t    return this.getToken(PseudoCodeParser.ELVEGE, 0);\n\t};\n\n\telseIfBranch = function(i) {\n\t    if(i===undefined) {\n\t        i = null;\n\t    }\n\t    if(i===null) {\n\t        return this.getTypedRuleContexts(ElseIfBranchContext);\n\t    } else {\n\t        return this.getTypedRuleContext(ElseIfBranchContext,i);\n\t    }\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.enterIfElseIfStatement(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.exitIfElseIfStatement(this);\n\t\t}\n\t}\n\n\taccept(visitor) {\n\t    if ( visitor instanceof PseudoCodeVisitor ) {\n\t        return visitor.visitIfElseIfStatement(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t}\n\n\n}\n\nPseudoCodeParser.IfElseIfStatementContext = IfElseIfStatementContext;\n\nclass ElseIfBranchContext extends antlr4.ParserRuleContext {\n\n    constructor(parser, parent, invokingState) {\n        if(parent===undefined) {\n            parent = null;\n        }\n        if(invokingState===undefined || invokingState===null) {\n            invokingState = -1;\n        }\n        super(parent, invokingState);\n        this.parser = parser;\n        this.ruleIndex = PseudoCodeParser.RULE_elseIfBranch;\n    }\n\n\tKULONBEN() {\n\t    return this.getToken(PseudoCodeParser.KULONBEN, 0);\n\t};\n\n\tWS = function(i) {\n\t\tif(i===undefined) {\n\t\t\ti = null;\n\t\t}\n\t    if(i===null) {\n\t        return this.getTokens(PseudoCodeParser.WS);\n\t    } else {\n\t        return this.getToken(PseudoCodeParser.WS, i);\n\t    }\n\t};\n\n\n\tHA() {\n\t    return this.getToken(PseudoCodeParser.HA, 0);\n\t};\n\n\texpression() {\n\t    return this.getTypedRuleContext(ExpressionContext,0);\n\t};\n\n\tAKKOR() {\n\t    return this.getToken(PseudoCodeParser.AKKOR, 0);\n\t};\n\n\tNL() {\n\t    return this.getToken(PseudoCodeParser.NL, 0);\n\t};\n\n\tbody() {\n\t    return this.getTypedRuleContext(BodyContext,0);\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.enterElseIfBranch(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.exitElseIfBranch(this);\n\t\t}\n\t}\n\n\taccept(visitor) {\n\t    if ( visitor instanceof PseudoCodeVisitor ) {\n\t        return visitor.visitElseIfBranch(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t}\n\n\n}\n\n\n\nclass ElseBranchContext extends antlr4.ParserRuleContext {\n\n    constructor(parser, parent, invokingState) {\n        if(parent===undefined) {\n            parent = null;\n        }\n        if(invokingState===undefined || invokingState===null) {\n            invokingState = -1;\n        }\n        super(parent, invokingState);\n        this.parser = parser;\n        this.ruleIndex = PseudoCodeParser.RULE_elseBranch;\n    }\n\n\tKULONBEN() {\n\t    return this.getToken(PseudoCodeParser.KULONBEN, 0);\n\t};\n\n\tNL() {\n\t    return this.getToken(PseudoCodeParser.NL, 0);\n\t};\n\n\tbody() {\n\t    return this.getTypedRuleContext(BodyContext,0);\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.enterElseBranch(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.exitElseBranch(this);\n\t\t}\n\t}\n\n\taccept(visitor) {\n\t    if ( visitor instanceof PseudoCodeVisitor ) {\n\t        return visitor.visitElseBranch(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t}\n\n\n}\n\n\n\nclass WhileStatementContext extends antlr4.ParserRuleContext {\n\n    constructor(parser, parent, invokingState) {\n        if(parent===undefined) {\n            parent = null;\n        }\n        if(invokingState===undefined || invokingState===null) {\n            invokingState = -1;\n        }\n        super(parent, invokingState);\n        this.parser = parser;\n        this.ruleIndex = PseudoCodeParser.RULE_whileStatement;\n    }\n\n\tCIKLUS() {\n\t    return this.getToken(PseudoCodeParser.CIKLUS, 0);\n\t};\n\n\tWS = function(i) {\n\t\tif(i===undefined) {\n\t\t\ti = null;\n\t\t}\n\t    if(i===null) {\n\t        return this.getTokens(PseudoCodeParser.WS);\n\t    } else {\n\t        return this.getToken(PseudoCodeParser.WS, i);\n\t    }\n\t};\n\n\n\tAMIG() {\n\t    return this.getToken(PseudoCodeParser.AMIG, 0);\n\t};\n\n\texpression() {\n\t    return this.getTypedRuleContext(ExpressionContext,0);\n\t};\n\n\tNL() {\n\t    return this.getToken(PseudoCodeParser.NL, 0);\n\t};\n\n\tbody() {\n\t    return this.getTypedRuleContext(BodyContext,0);\n\t};\n\n\tCVEGE() {\n\t    return this.getToken(PseudoCodeParser.CVEGE, 0);\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.enterWhileStatement(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.exitWhileStatement(this);\n\t\t}\n\t}\n\n\taccept(visitor) {\n\t    if ( visitor instanceof PseudoCodeVisitor ) {\n\t        return visitor.visitWhileStatement(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t}\n\n\n}\n\n\n\nclass DoWhileStatementContext extends antlr4.ParserRuleContext {\n\n    constructor(parser, parent, invokingState) {\n        if(parent===undefined) {\n            parent = null;\n        }\n        if(invokingState===undefined || invokingState===null) {\n            invokingState = -1;\n        }\n        super(parent, invokingState);\n        this.parser = parser;\n        this.ruleIndex = PseudoCodeParser.RULE_doWhileStatement;\n    }\n\n\tCIKLUS() {\n\t    return this.getToken(PseudoCodeParser.CIKLUS, 0);\n\t};\n\n\tNL() {\n\t    return this.getToken(PseudoCodeParser.NL, 0);\n\t};\n\n\tbody() {\n\t    return this.getTypedRuleContext(BodyContext,0);\n\t};\n\n\tAMIG() {\n\t    return this.getToken(PseudoCodeParser.AMIG, 0);\n\t};\n\n\tWS() {\n\t    return this.getToken(PseudoCodeParser.WS, 0);\n\t};\n\n\texpression() {\n\t    return this.getTypedRuleContext(ExpressionContext,0);\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.enterDoWhileStatement(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.exitDoWhileStatement(this);\n\t\t}\n\t}\n\n\taccept(visitor) {\n\t    if ( visitor instanceof PseudoCodeVisitor ) {\n\t        return visitor.visitDoWhileStatement(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t}\n\n\n}\n\n\n\nclass ForStatementContext extends antlr4.ParserRuleContext {\n\n    constructor(parser, parent, invokingState) {\n        if(parent===undefined) {\n            parent = null;\n        }\n        if(invokingState===undefined || invokingState===null) {\n            invokingState = -1;\n        }\n        super(parent, invokingState);\n        this.parser = parser;\n        this.ruleIndex = PseudoCodeParser.RULE_forStatement;\n    }\n\n\tCIKLUS() {\n\t    return this.getToken(PseudoCodeParser.CIKLUS, 0);\n\t};\n\n\tWS = function(i) {\n\t\tif(i===undefined) {\n\t\t\ti = null;\n\t\t}\n\t    if(i===null) {\n\t        return this.getTokens(PseudoCodeParser.WS);\n\t    } else {\n\t        return this.getToken(PseudoCodeParser.WS, i);\n\t    }\n\t};\n\n\n\tvariable() {\n\t    return this.getTypedRuleContext(VariableContext,0);\n\t};\n\n\tASSIGN() {\n\t    return this.getToken(PseudoCodeParser.ASSIGN, 0);\n\t};\n\n\texpression = function(i) {\n\t    if(i===undefined) {\n\t        i = null;\n\t    }\n\t    if(i===null) {\n\t        return this.getTypedRuleContexts(ExpressionContext);\n\t    } else {\n\t        return this.getTypedRuleContext(ExpressionContext,i);\n\t    }\n\t};\n\n\tCSTART() {\n\t    return this.getToken(PseudoCodeParser.CSTART, 0);\n\t};\n\n\tCEND() {\n\t    return this.getToken(PseudoCodeParser.CEND, 0);\n\t};\n\n\tNL() {\n\t    return this.getToken(PseudoCodeParser.NL, 0);\n\t};\n\n\tbody() {\n\t    return this.getTypedRuleContext(BodyContext,0);\n\t};\n\n\tCVEGE() {\n\t    return this.getToken(PseudoCodeParser.CVEGE, 0);\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.enterForStatement(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.exitForStatement(this);\n\t\t}\n\t}\n\n\taccept(visitor) {\n\t    if ( visitor instanceof PseudoCodeVisitor ) {\n\t        return visitor.visitForStatement(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t}\n\n\n}\n\n\n\nclass ReturnStatementContext extends antlr4.ParserRuleContext {\n\n    constructor(parser, parent, invokingState) {\n        if(parent===undefined) {\n            parent = null;\n        }\n        if(invokingState===undefined || invokingState===null) {\n            invokingState = -1;\n        }\n        super(parent, invokingState);\n        this.parser = parser;\n        this.ruleIndex = PseudoCodeParser.RULE_returnStatement;\n    }\n\n\tVISSZA() {\n\t    return this.getToken(PseudoCodeParser.VISSZA, 0);\n\t};\n\n\tWS() {\n\t    return this.getToken(PseudoCodeParser.WS, 0);\n\t};\n\n\texpression() {\n\t    return this.getTypedRuleContext(ExpressionContext,0);\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.enterReturnStatement(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.exitReturnStatement(this);\n\t\t}\n\t}\n\n\taccept(visitor) {\n\t    if ( visitor instanceof PseudoCodeVisitor ) {\n\t        return visitor.visitReturnStatement(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t}\n\n\n}\n\n\n\nclass MethodCallStatementContext extends antlr4.ParserRuleContext {\n\n    constructor(parser, parent, invokingState) {\n        if(parent===undefined) {\n            parent = null;\n        }\n        if(invokingState===undefined || invokingState===null) {\n            invokingState = -1;\n        }\n        super(parent, invokingState);\n        this.parser = parser;\n        this.ruleIndex = PseudoCodeParser.RULE_methodCallStatement;\n    }\n\n\tfunctionName() {\n\t    return this.getTypedRuleContext(FunctionNameContext,0);\n\t};\n\n\tparameters() {\n\t    return this.getTypedRuleContext(ParametersContext,0);\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.enterMethodCallStatement(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.exitMethodCallStatement(this);\n\t\t}\n\t}\n\n\taccept(visitor) {\n\t    if ( visitor instanceof PseudoCodeVisitor ) {\n\t        return visitor.visitMethodCallStatement(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t}\n\n\n}\n\n\n\nclass FunctionDeclarationStatementContext extends antlr4.ParserRuleContext {\n\n    constructor(parser, parent, invokingState) {\n        if(parent===undefined) {\n            parent = null;\n        }\n        if(invokingState===undefined || invokingState===null) {\n            invokingState = -1;\n        }\n        super(parent, invokingState);\n        this.parser = parser;\n        this.ruleIndex = PseudoCodeParser.RULE_functionDeclarationStatement;\n    }\n\n\n\t \n\t\tcopyFrom(ctx) {\n\t\t\tsuper.copyFrom(ctx);\n\t\t}\n\n}\n\n\nclass FunctionDeclarationWithParametersContext extends FunctionDeclarationStatementContext {\n\n    constructor(parser, ctx) {\n        super(parser);\n        super.copyFrom(ctx);\n    }\n\n\tFUGGVENY() {\n\t    return this.getToken(PseudoCodeParser.FUGGVENY, 0);\n\t};\n\n\tWS = function(i) {\n\t\tif(i===undefined) {\n\t\t\ti = null;\n\t\t}\n\t    if(i===null) {\n\t        return this.getTokens(PseudoCodeParser.WS);\n\t    } else {\n\t        return this.getToken(PseudoCodeParser.WS, i);\n\t    }\n\t};\n\n\n\tfunctionName() {\n\t    return this.getTypedRuleContext(FunctionNameContext,0);\n\t};\n\n\tparameterWithType = function(i) {\n\t    if(i===undefined) {\n\t        i = null;\n\t    }\n\t    if(i===null) {\n\t        return this.getTypedRuleContexts(ParameterWithTypeContext);\n\t    } else {\n\t        return this.getTypedRuleContext(ParameterWithTypeContext,i);\n\t    }\n\t};\n\n\tNL() {\n\t    return this.getToken(PseudoCodeParser.NL, 0);\n\t};\n\n\tbody() {\n\t    return this.getTypedRuleContext(BodyContext,0);\n\t};\n\n\tFVEGE() {\n\t    return this.getToken(PseudoCodeParser.FVEGE, 0);\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.enterFunctionDeclarationWithParameters(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.exitFunctionDeclarationWithParameters(this);\n\t\t}\n\t}\n\n\taccept(visitor) {\n\t    if ( visitor instanceof PseudoCodeVisitor ) {\n\t        return visitor.visitFunctionDeclarationWithParameters(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t}\n\n\n}\n\nPseudoCodeParser.FunctionDeclarationWithParametersContext = FunctionDeclarationWithParametersContext;\n\nclass FunctionDeclarationWithoutParametersContext extends FunctionDeclarationStatementContext {\n\n    constructor(parser, ctx) {\n        super(parser);\n        super.copyFrom(ctx);\n    }\n\n\tFUGGVENY() {\n\t    return this.getToken(PseudoCodeParser.FUGGVENY, 0);\n\t};\n\n\tWS() {\n\t    return this.getToken(PseudoCodeParser.WS, 0);\n\t};\n\n\tfunctionName() {\n\t    return this.getTypedRuleContext(FunctionNameContext,0);\n\t};\n\n\tNL() {\n\t    return this.getToken(PseudoCodeParser.NL, 0);\n\t};\n\n\tbody() {\n\t    return this.getTypedRuleContext(BodyContext,0);\n\t};\n\n\tFVEGE() {\n\t    return this.getToken(PseudoCodeParser.FVEGE, 0);\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.enterFunctionDeclarationWithoutParameters(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.exitFunctionDeclarationWithoutParameters(this);\n\t\t}\n\t}\n\n\taccept(visitor) {\n\t    if ( visitor instanceof PseudoCodeVisitor ) {\n\t        return visitor.visitFunctionDeclarationWithoutParameters(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t}\n\n\n}\n\nPseudoCodeParser.FunctionDeclarationWithoutParametersContext = FunctionDeclarationWithoutParametersContext;\n\nclass ParameterWithTypeContext extends antlr4.ParserRuleContext {\n\n    constructor(parser, parent, invokingState) {\n        if(parent===undefined) {\n            parent = null;\n        }\n        if(invokingState===undefined || invokingState===null) {\n            invokingState = -1;\n        }\n        super(parent, invokingState);\n        this.parser = parser;\n        this.ruleIndex = PseudoCodeParser.RULE_parameterWithType;\n    }\n\n\tvariable() {\n\t    return this.getTypedRuleContext(VariableContext,0);\n\t};\n\n\ttype() {\n\t    return this.getTypedRuleContext(TypeContext,0);\n\t};\n\n\tCIMSZERINT() {\n\t    return this.getToken(PseudoCodeParser.CIMSZERINT, 0);\n\t};\n\n\tWS = function(i) {\n\t\tif(i===undefined) {\n\t\t\ti = null;\n\t\t}\n\t    if(i===null) {\n\t        return this.getTokens(PseudoCodeParser.WS);\n\t    } else {\n\t        return this.getToken(PseudoCodeParser.WS, i);\n\t    }\n\t};\n\n\n\tenterRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.enterParameterWithType(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.exitParameterWithType(this);\n\t\t}\n\t}\n\n\taccept(visitor) {\n\t    if ( visitor instanceof PseudoCodeVisitor ) {\n\t        return visitor.visitParameterWithType(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t}\n\n\n}\n\n\n\nclass TypeContext extends antlr4.ParserRuleContext {\n\n    constructor(parser, parent, invokingState) {\n        if(parent===undefined) {\n            parent = null;\n        }\n        if(invokingState===undefined || invokingState===null) {\n            invokingState = -1;\n        }\n        super(parent, invokingState);\n        this.parser = parser;\n        this.ruleIndex = PseudoCodeParser.RULE_type;\n    }\n\n\n\tenterRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.enterType(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.exitType(this);\n\t\t}\n\t}\n\n\taccept(visitor) {\n\t    if ( visitor instanceof PseudoCodeVisitor ) {\n\t        return visitor.visitType(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t}\n\n\n}\n\n\n\nclass ArrayElementAssignmentStatementContext extends antlr4.ParserRuleContext {\n\n    constructor(parser, parent, invokingState) {\n        if(parent===undefined) {\n            parent = null;\n        }\n        if(invokingState===undefined || invokingState===null) {\n            invokingState = -1;\n        }\n        super(parent, invokingState);\n        this.parser = parser;\n        this.ruleIndex = PseudoCodeParser.RULE_arrayElementAssignmentStatement;\n    }\n\n\tvariable() {\n\t    return this.getTypedRuleContext(VariableContext,0);\n\t};\n\n\texpression = function(i) {\n\t    if(i===undefined) {\n\t        i = null;\n\t    }\n\t    if(i===null) {\n\t        return this.getTypedRuleContexts(ExpressionContext);\n\t    } else {\n\t        return this.getTypedRuleContext(ExpressionContext,i);\n\t    }\n\t};\n\n\tASSIGN() {\n\t    return this.getToken(PseudoCodeParser.ASSIGN, 0);\n\t};\n\n\tWS = function(i) {\n\t\tif(i===undefined) {\n\t\t\ti = null;\n\t\t}\n\t    if(i===null) {\n\t        return this.getTokens(PseudoCodeParser.WS);\n\t    } else {\n\t        return this.getToken(PseudoCodeParser.WS, i);\n\t    }\n\t};\n\n\n\tenterRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.enterArrayElementAssignmentStatement(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.exitArrayElementAssignmentStatement(this);\n\t\t}\n\t}\n\n\taccept(visitor) {\n\t    if ( visitor instanceof PseudoCodeVisitor ) {\n\t        return visitor.visitArrayElementAssignmentStatement(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t}\n\n\n}\n\n\n\nclass ArrayAssignmentStatementContext extends antlr4.ParserRuleContext {\n\n    constructor(parser, parent, invokingState) {\n        if(parent===undefined) {\n            parent = null;\n        }\n        if(invokingState===undefined || invokingState===null) {\n            invokingState = -1;\n        }\n        super(parent, invokingState);\n        this.parser = parser;\n        this.ruleIndex = PseudoCodeParser.RULE_arrayAssignmentStatement;\n    }\n\n\tvariable() {\n\t    return this.getTypedRuleContext(VariableContext,0);\n\t};\n\n\tASSIGN() {\n\t    return this.getToken(PseudoCodeParser.ASSIGN, 0);\n\t};\n\n\ttype() {\n\t    return this.getTypedRuleContext(TypeContext,0);\n\t};\n\n\texpression() {\n\t    return this.getTypedRuleContext(ExpressionContext,0);\n\t};\n\n\tWS = function(i) {\n\t\tif(i===undefined) {\n\t\t\ti = null;\n\t\t}\n\t    if(i===null) {\n\t        return this.getTokens(PseudoCodeParser.WS);\n\t    } else {\n\t        return this.getToken(PseudoCodeParser.WS, i);\n\t    }\n\t};\n\n\n\tenterRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.enterArrayAssignmentStatement(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.exitArrayAssignmentStatement(this);\n\t\t}\n\t}\n\n\taccept(visitor) {\n\t    if ( visitor instanceof PseudoCodeVisitor ) {\n\t        return visitor.visitArrayAssignmentStatement(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t}\n\n\n}\n\n\n\nclass AssignmentStatementContext extends antlr4.ParserRuleContext {\n\n    constructor(parser, parent, invokingState) {\n        if(parent===undefined) {\n            parent = null;\n        }\n        if(invokingState===undefined || invokingState===null) {\n            invokingState = -1;\n        }\n        super(parent, invokingState);\n        this.parser = parser;\n        this.ruleIndex = PseudoCodeParser.RULE_assignmentStatement;\n    }\n\n\tvariable() {\n\t    return this.getTypedRuleContext(VariableContext,0);\n\t};\n\n\tASSIGN() {\n\t    return this.getToken(PseudoCodeParser.ASSIGN, 0);\n\t};\n\n\texpression() {\n\t    return this.getTypedRuleContext(ExpressionContext,0);\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.enterAssignmentStatement(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.exitAssignmentStatement(this);\n\t\t}\n\t}\n\n\taccept(visitor) {\n\t    if ( visitor instanceof PseudoCodeVisitor ) {\n\t        return visitor.visitAssignmentStatement(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t}\n\n\n}\n\n\n\nclass ExpressionContext extends antlr4.ParserRuleContext {\n\n    constructor(parser, parent, invokingState) {\n        if(parent===undefined) {\n            parent = null;\n        }\n        if(invokingState===undefined || invokingState===null) {\n            invokingState = -1;\n        }\n        super(parent, invokingState);\n        this.parser = parser;\n        this.ruleIndex = PseudoCodeParser.RULE_expression;\n    }\n\n\n\t \n\t\tcopyFrom(ctx) {\n\t\t\tsuper.copyFrom(ctx);\n\t\t}\n\n}\n\n\nclass OrExpressionContext extends ExpressionContext {\n\n    constructor(parser, ctx) {\n        super(parser);\n        super.copyFrom(ctx);\n    }\n\n\texpression = function(i) {\n\t    if(i===undefined) {\n\t        i = null;\n\t    }\n\t    if(i===null) {\n\t        return this.getTypedRuleContexts(ExpressionContext);\n\t    } else {\n\t        return this.getTypedRuleContext(ExpressionContext,i);\n\t    }\n\t};\n\n\tVAGY() {\n\t    return this.getToken(PseudoCodeParser.VAGY, 0);\n\t};\n\n\tWS = function(i) {\n\t\tif(i===undefined) {\n\t\t\ti = null;\n\t\t}\n\t    if(i===null) {\n\t        return this.getTokens(PseudoCodeParser.WS);\n\t    } else {\n\t        return this.getToken(PseudoCodeParser.WS, i);\n\t    }\n\t};\n\n\n\tenterRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.enterOrExpression(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.exitOrExpression(this);\n\t\t}\n\t}\n\n\taccept(visitor) {\n\t    if ( visitor instanceof PseudoCodeVisitor ) {\n\t        return visitor.visitOrExpression(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t}\n\n\n}\n\nPseudoCodeParser.OrExpressionContext = OrExpressionContext;\n\nclass ValueExpressionContext extends ExpressionContext {\n\n    constructor(parser, ctx) {\n        super(parser);\n        super.copyFrom(ctx);\n    }\n\n\tvalue() {\n\t    return this.getTypedRuleContext(ValueContext,0);\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.enterValueExpression(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.exitValueExpression(this);\n\t\t}\n\t}\n\n\taccept(visitor) {\n\t    if ( visitor instanceof PseudoCodeVisitor ) {\n\t        return visitor.visitValueExpression(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t}\n\n\n}\n\nPseudoCodeParser.ValueExpressionContext = ValueExpressionContext;\n\nclass AndExpressionContext extends ExpressionContext {\n\n    constructor(parser, ctx) {\n        super(parser);\n        super.copyFrom(ctx);\n    }\n\n\texpression = function(i) {\n\t    if(i===undefined) {\n\t        i = null;\n\t    }\n\t    if(i===null) {\n\t        return this.getTypedRuleContexts(ExpressionContext);\n\t    } else {\n\t        return this.getTypedRuleContext(ExpressionContext,i);\n\t    }\n\t};\n\n\tES() {\n\t    return this.getToken(PseudoCodeParser.ES, 0);\n\t};\n\n\tWS = function(i) {\n\t\tif(i===undefined) {\n\t\t\ti = null;\n\t\t}\n\t    if(i===null) {\n\t        return this.getTokens(PseudoCodeParser.WS);\n\t    } else {\n\t        return this.getToken(PseudoCodeParser.WS, i);\n\t    }\n\t};\n\n\n\tenterRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.enterAndExpression(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.exitAndExpression(this);\n\t\t}\n\t}\n\n\taccept(visitor) {\n\t    if ( visitor instanceof PseudoCodeVisitor ) {\n\t        return visitor.visitAndExpression(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t}\n\n\n}\n\nPseudoCodeParser.AndExpressionContext = AndExpressionContext;\n\nclass FunctionCallExpressionContext extends ExpressionContext {\n\n    constructor(parser, ctx) {\n        super(parser);\n        super.copyFrom(ctx);\n    }\n\n\tfunctionCall() {\n\t    return this.getTypedRuleContext(FunctionCallContext,0);\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.enterFunctionCallExpression(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.exitFunctionCallExpression(this);\n\t\t}\n\t}\n\n\taccept(visitor) {\n\t    if ( visitor instanceof PseudoCodeVisitor ) {\n\t        return visitor.visitFunctionCallExpression(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t}\n\n\n}\n\nPseudoCodeParser.FunctionCallExpressionContext = FunctionCallExpressionContext;\n\nclass NotExpressionContext extends ExpressionContext {\n\n    constructor(parser, ctx) {\n        super(parser);\n        super.copyFrom(ctx);\n    }\n\n\tNOT() {\n\t    return this.getToken(PseudoCodeParser.NOT, 0);\n\t};\n\n\texpression() {\n\t    return this.getTypedRuleContext(ExpressionContext,0);\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.enterNotExpression(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.exitNotExpression(this);\n\t\t}\n\t}\n\n\taccept(visitor) {\n\t    if ( visitor instanceof PseudoCodeVisitor ) {\n\t        return visitor.visitNotExpression(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t}\n\n\n}\n\nPseudoCodeParser.NotExpressionContext = NotExpressionContext;\n\nclass ComparisonExpressionContext extends ExpressionContext {\n\n    constructor(parser, ctx) {\n        super(parser);\n        super.copyFrom(ctx);\n    }\n\n\texpression = function(i) {\n\t    if(i===undefined) {\n\t        i = null;\n\t    }\n\t    if(i===null) {\n\t        return this.getTypedRuleContexts(ExpressionContext);\n\t    } else {\n\t        return this.getTypedRuleContext(ExpressionContext,i);\n\t    }\n\t};\n\n\tCOMPARISON() {\n\t    return this.getToken(PseudoCodeParser.COMPARISON, 0);\n\t};\n\n\tWS = function(i) {\n\t\tif(i===undefined) {\n\t\t\ti = null;\n\t\t}\n\t    if(i===null) {\n\t        return this.getTokens(PseudoCodeParser.WS);\n\t    } else {\n\t        return this.getToken(PseudoCodeParser.WS, i);\n\t    }\n\t};\n\n\n\tenterRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.enterComparisonExpression(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.exitComparisonExpression(this);\n\t\t}\n\t}\n\n\taccept(visitor) {\n\t    if ( visitor instanceof PseudoCodeVisitor ) {\n\t        return visitor.visitComparisonExpression(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t}\n\n\n}\n\nPseudoCodeParser.ComparisonExpressionContext = ComparisonExpressionContext;\n\nclass CalculationExpressionContext extends ExpressionContext {\n\n    constructor(parser, ctx) {\n        super(parser);\n        super.copyFrom(ctx);\n    }\n\n\texpression = function(i) {\n\t    if(i===undefined) {\n\t        i = null;\n\t    }\n\t    if(i===null) {\n\t        return this.getTypedRuleContexts(ExpressionContext);\n\t    } else {\n\t        return this.getTypedRuleContext(ExpressionContext,i);\n\t    }\n\t};\n\n\tOPERATOR() {\n\t    return this.getToken(PseudoCodeParser.OPERATOR, 0);\n\t};\n\n\tWS = function(i) {\n\t\tif(i===undefined) {\n\t\t\ti = null;\n\t\t}\n\t    if(i===null) {\n\t        return this.getTokens(PseudoCodeParser.WS);\n\t    } else {\n\t        return this.getToken(PseudoCodeParser.WS, i);\n\t    }\n\t};\n\n\n\tenterRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.enterCalculationExpression(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.exitCalculationExpression(this);\n\t\t}\n\t}\n\n\taccept(visitor) {\n\t    if ( visitor instanceof PseudoCodeVisitor ) {\n\t        return visitor.visitCalculationExpression(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t}\n\n\n}\n\nPseudoCodeParser.CalculationExpressionContext = CalculationExpressionContext;\n\nclass FunctionCallContext extends antlr4.ParserRuleContext {\n\n    constructor(parser, parent, invokingState) {\n        if(parent===undefined) {\n            parent = null;\n        }\n        if(invokingState===undefined || invokingState===null) {\n            invokingState = -1;\n        }\n        super(parent, invokingState);\n        this.parser = parser;\n        this.ruleIndex = PseudoCodeParser.RULE_functionCall;\n    }\n\n\tfunctionName() {\n\t    return this.getTypedRuleContext(FunctionNameContext,0);\n\t};\n\n\tparameters() {\n\t    return this.getTypedRuleContext(ParametersContext,0);\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.enterFunctionCall(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.exitFunctionCall(this);\n\t\t}\n\t}\n\n\taccept(visitor) {\n\t    if ( visitor instanceof PseudoCodeVisitor ) {\n\t        return visitor.visitFunctionCall(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t}\n\n\n}\n\n\n\nclass ParametersContext extends antlr4.ParserRuleContext {\n\n    constructor(parser, parent, invokingState) {\n        if(parent===undefined) {\n            parent = null;\n        }\n        if(invokingState===undefined || invokingState===null) {\n            invokingState = -1;\n        }\n        super(parent, invokingState);\n        this.parser = parser;\n        this.ruleIndex = PseudoCodeParser.RULE_parameters;\n    }\n\n\texpression = function(i) {\n\t    if(i===undefined) {\n\t        i = null;\n\t    }\n\t    if(i===null) {\n\t        return this.getTypedRuleContexts(ExpressionContext);\n\t    } else {\n\t        return this.getTypedRuleContext(ExpressionContext,i);\n\t    }\n\t};\n\n\tWS = function(i) {\n\t\tif(i===undefined) {\n\t\t\ti = null;\n\t\t}\n\t    if(i===null) {\n\t        return this.getTokens(PseudoCodeParser.WS);\n\t    } else {\n\t        return this.getToken(PseudoCodeParser.WS, i);\n\t    }\n\t};\n\n\n\tenterRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.enterParameters(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.exitParameters(this);\n\t\t}\n\t}\n\n\taccept(visitor) {\n\t    if ( visitor instanceof PseudoCodeVisitor ) {\n\t        return visitor.visitParameters(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t}\n\n\n}\n\n\n\nclass FunctionNameContext extends antlr4.ParserRuleContext {\n\n    constructor(parser, parent, invokingState) {\n        if(parent===undefined) {\n            parent = null;\n        }\n        if(invokingState===undefined || invokingState===null) {\n            invokingState = -1;\n        }\n        super(parent, invokingState);\n        this.parser = parser;\n        this.ruleIndex = PseudoCodeParser.RULE_functionName;\n    }\n\n\tFUNCTION() {\n\t    return this.getToken(PseudoCodeParser.FUNCTION, 0);\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.enterFunctionName(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.exitFunctionName(this);\n\t\t}\n\t}\n\n\taccept(visitor) {\n\t    if ( visitor instanceof PseudoCodeVisitor ) {\n\t        return visitor.visitFunctionName(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t}\n\n\n}\n\n\n\nclass ValueContext extends antlr4.ParserRuleContext {\n\n    constructor(parser, parent, invokingState) {\n        if(parent===undefined) {\n            parent = null;\n        }\n        if(invokingState===undefined || invokingState===null) {\n            invokingState = -1;\n        }\n        super(parent, invokingState);\n        this.parser = parser;\n        this.ruleIndex = PseudoCodeParser.RULE_value;\n    }\n\n\tarrayIndex() {\n\t    return this.getTypedRuleContext(ArrayIndexContext,0);\n\t};\n\n\tatom() {\n\t    return this.getTypedRuleContext(AtomContext,0);\n\t};\n\n\tvariable() {\n\t    return this.getTypedRuleContext(VariableContext,0);\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.enterValue(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.exitValue(this);\n\t\t}\n\t}\n\n\taccept(visitor) {\n\t    if ( visitor instanceof PseudoCodeVisitor ) {\n\t        return visitor.visitValue(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t}\n\n\n}\n\n\n\nclass AtomContext extends antlr4.ParserRuleContext {\n\n    constructor(parser, parent, invokingState) {\n        if(parent===undefined) {\n            parent = null;\n        }\n        if(invokingState===undefined || invokingState===null) {\n            invokingState = -1;\n        }\n        super(parent, invokingState);\n        this.parser = parser;\n        this.ruleIndex = PseudoCodeParser.RULE_atom;\n    }\n\n\tnumber() {\n\t    return this.getTypedRuleContext(NumberContext,0);\n\t};\n\n\tbool() {\n\t    return this.getTypedRuleContext(BoolContext,0);\n\t};\n\n\tstring() {\n\t    return this.getTypedRuleContext(StringContext,0);\n\t};\n\n\tarrayShorthand() {\n\t    return this.getTypedRuleContext(ArrayShorthandContext,0);\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.enterAtom(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.exitAtom(this);\n\t\t}\n\t}\n\n\taccept(visitor) {\n\t    if ( visitor instanceof PseudoCodeVisitor ) {\n\t        return visitor.visitAtom(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t}\n\n\n}\n\n\n\nclass StringContext extends antlr4.ParserRuleContext {\n\n    constructor(parser, parent, invokingState) {\n        if(parent===undefined) {\n            parent = null;\n        }\n        if(invokingState===undefined || invokingState===null) {\n            invokingState = -1;\n        }\n        super(parent, invokingState);\n        this.parser = parser;\n        this.ruleIndex = PseudoCodeParser.RULE_string;\n    }\n\n\tSTRING() {\n\t    return this.getToken(PseudoCodeParser.STRING, 0);\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.enterString(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.exitString(this);\n\t\t}\n\t}\n\n\taccept(visitor) {\n\t    if ( visitor instanceof PseudoCodeVisitor ) {\n\t        return visitor.visitString(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t}\n\n\n}\n\n\n\nclass NumberContext extends antlr4.ParserRuleContext {\n\n    constructor(parser, parent, invokingState) {\n        if(parent===undefined) {\n            parent = null;\n        }\n        if(invokingState===undefined || invokingState===null) {\n            invokingState = -1;\n        }\n        super(parent, invokingState);\n        this.parser = parser;\n        this.ruleIndex = PseudoCodeParser.RULE_number;\n    }\n\n\tNUMBER() {\n\t    return this.getToken(PseudoCodeParser.NUMBER, 0);\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.enterNumber(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.exitNumber(this);\n\t\t}\n\t}\n\n\taccept(visitor) {\n\t    if ( visitor instanceof PseudoCodeVisitor ) {\n\t        return visitor.visitNumber(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t}\n\n\n}\n\n\n\nclass BoolContext extends antlr4.ParserRuleContext {\n\n    constructor(parser, parent, invokingState) {\n        if(parent===undefined) {\n            parent = null;\n        }\n        if(invokingState===undefined || invokingState===null) {\n            invokingState = -1;\n        }\n        super(parent, invokingState);\n        this.parser = parser;\n        this.ruleIndex = PseudoCodeParser.RULE_bool;\n    }\n\n\tBOOL() {\n\t    return this.getToken(PseudoCodeParser.BOOL, 0);\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.enterBool(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.exitBool(this);\n\t\t}\n\t}\n\n\taccept(visitor) {\n\t    if ( visitor instanceof PseudoCodeVisitor ) {\n\t        return visitor.visitBool(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t}\n\n\n}\n\n\n\nclass ArrayShorthandContext extends antlr4.ParserRuleContext {\n\n    constructor(parser, parent, invokingState) {\n        if(parent===undefined) {\n            parent = null;\n        }\n        if(invokingState===undefined || invokingState===null) {\n            invokingState = -1;\n        }\n        super(parent, invokingState);\n        this.parser = parser;\n        this.ruleIndex = PseudoCodeParser.RULE_arrayShorthand;\n    }\n\n\texpression = function(i) {\n\t    if(i===undefined) {\n\t        i = null;\n\t    }\n\t    if(i===null) {\n\t        return this.getTypedRuleContexts(ExpressionContext);\n\t    } else {\n\t        return this.getTypedRuleContext(ExpressionContext,i);\n\t    }\n\t};\n\n\tWS = function(i) {\n\t\tif(i===undefined) {\n\t\t\ti = null;\n\t\t}\n\t    if(i===null) {\n\t        return this.getTokens(PseudoCodeParser.WS);\n\t    } else {\n\t        return this.getToken(PseudoCodeParser.WS, i);\n\t    }\n\t};\n\n\n\tenterRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.enterArrayShorthand(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.exitArrayShorthand(this);\n\t\t}\n\t}\n\n\taccept(visitor) {\n\t    if ( visitor instanceof PseudoCodeVisitor ) {\n\t        return visitor.visitArrayShorthand(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t}\n\n\n}\n\n\n\nclass ArrayIndexContext extends antlr4.ParserRuleContext {\n\n    constructor(parser, parent, invokingState) {\n        if(parent===undefined) {\n            parent = null;\n        }\n        if(invokingState===undefined || invokingState===null) {\n            invokingState = -1;\n        }\n        super(parent, invokingState);\n        this.parser = parser;\n        this.ruleIndex = PseudoCodeParser.RULE_arrayIndex;\n    }\n\n\tvariable() {\n\t    return this.getTypedRuleContext(VariableContext,0);\n\t};\n\n\texpression = function(i) {\n\t    if(i===undefined) {\n\t        i = null;\n\t    }\n\t    if(i===null) {\n\t        return this.getTypedRuleContexts(ExpressionContext);\n\t    } else {\n\t        return this.getTypedRuleContext(ExpressionContext,i);\n\t    }\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.enterArrayIndex(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.exitArrayIndex(this);\n\t\t}\n\t}\n\n\taccept(visitor) {\n\t    if ( visitor instanceof PseudoCodeVisitor ) {\n\t        return visitor.visitArrayIndex(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t}\n\n\n}\n\n\n\nclass VariableContext extends antlr4.ParserRuleContext {\n\n    constructor(parser, parent, invokingState) {\n        if(parent===undefined) {\n            parent = null;\n        }\n        if(invokingState===undefined || invokingState===null) {\n            invokingState = -1;\n        }\n        super(parent, invokingState);\n        this.parser = parser;\n        this.ruleIndex = PseudoCodeParser.RULE_variable;\n    }\n\n\tVARIABLE() {\n\t    return this.getToken(PseudoCodeParser.VARIABLE, 0);\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.enterVariable(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof PseudoCodeListener ) {\n\t        listener.exitVariable(this);\n\t\t}\n\t}\n\n\taccept(visitor) {\n\t    if ( visitor instanceof PseudoCodeVisitor ) {\n\t        return visitor.visitVariable(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t}\n\n\n}\n\n\n\n\nPseudoCodeParser.ProgramContext = ProgramContext; \nPseudoCodeParser.BodyContext = BodyContext; \nPseudoCodeParser.StatementContext = StatementContext; \nPseudoCodeParser.DebugContext = DebugContext; \nPseudoCodeParser.DebugPrintStatementContext = DebugPrintStatementContext; \nPseudoCodeParser.VarsContext = VarsContext; \nPseudoCodeParser.IfStatementContext = IfStatementContext; \nPseudoCodeParser.ElseIfBranchContext = ElseIfBranchContext; \nPseudoCodeParser.ElseBranchContext = ElseBranchContext; \nPseudoCodeParser.WhileStatementContext = WhileStatementContext; \nPseudoCodeParser.DoWhileStatementContext = DoWhileStatementContext; \nPseudoCodeParser.ForStatementContext = ForStatementContext; \nPseudoCodeParser.ReturnStatementContext = ReturnStatementContext; \nPseudoCodeParser.MethodCallStatementContext = MethodCallStatementContext; \nPseudoCodeParser.FunctionDeclarationStatementContext = FunctionDeclarationStatementContext; \nPseudoCodeParser.ParameterWithTypeContext = ParameterWithTypeContext; \nPseudoCodeParser.TypeContext = TypeContext; \nPseudoCodeParser.ArrayElementAssignmentStatementContext = ArrayElementAssignmentStatementContext; \nPseudoCodeParser.ArrayAssignmentStatementContext = ArrayAssignmentStatementContext; \nPseudoCodeParser.AssignmentStatementContext = AssignmentStatementContext; \nPseudoCodeParser.ExpressionContext = ExpressionContext; \nPseudoCodeParser.FunctionCallContext = FunctionCallContext; \nPseudoCodeParser.ParametersContext = ParametersContext; \nPseudoCodeParser.FunctionNameContext = FunctionNameContext; \nPseudoCodeParser.ValueContext = ValueContext; \nPseudoCodeParser.AtomContext = AtomContext; \nPseudoCodeParser.StringContext = StringContext; \nPseudoCodeParser.NumberContext = NumberContext; \nPseudoCodeParser.BoolContext = BoolContext; \nPseudoCodeParser.ArrayShorthandContext = ArrayShorthandContext; \nPseudoCodeParser.ArrayIndexContext = ArrayIndexContext; \nPseudoCodeParser.VariableContext = VariableContext; \n", "export const TYPES = Object.freeze({\n  number: \"sz\u00E1m\",\n  string: \"sz\u00F6veg\",\n  boolean: \"logikai\",\n  array: \"t\u00F6mb\",\n  reference: \"referencia\"\n})\n\nexport class Value {\n  #_value = null;\n  #_type = null;\n\n  constructor(v, t) {\n    this.#_value = v;\n    this.#_type = t;\n  }\n\n  set(value, type) {\n    if (this.#_type === TYPES.reference) {\n      this.#_value.set(value, type)\n    } else {\n      this.#_value = value;\n      this.#_type = type;\n    }\n  }\n\n  get value() {\n    if (this.#_type === TYPES.reference) {\n      return this.#_value.value\n    } else {\n      return this.#_value\n    }\n  }\n\n  get type() {\n    return this.#_type;\n  }\n\n  clone() {\n    return new Value(this.#_value, this.#_type)\n  }\n\n  safe_get(expected_type) {\n    if (this.#_type !== expected_type && this.#_type !== null) {\n      throw new Error(`'${expected_type}' t\u00EDpust v\u00E1rtunk, de a v\u00E1ltoz\u00F3 '${this.#_type}' t\u00EDpus\u00FA volt!`);\n    }\n\n    return this.value\n  }\n}\n\n/*\n\nget\nset\n\ncreate_reference\n\nenterBasicScope\nleaveBasicScope\n\nenterFunctionScope\nleaveFunctionScope\n\nprintStack\n\n*/\n\nexport class Stack {\n  #scopeBounds = []\n\n  get scopeBounds() {\n    return this.#scopeBounds\n  }\n\n  /** @type {Array<Value>} */\n  variables = []\n\n  /** @type {Map<string, Array<{name: string, reference: boolean, type: string}>>} */\n  parameterTypes = null;\n\n  /**\n   * Initializes a new Stack instance.\n   * @param {Map<string, Array<{name: string, reference: boolean, type: string}>>} parameterTypes - A map of all parameters assigned to their functions's names.\n   */\n  constructor(parameterTypes) {\n    this.parameterTypes = parameterTypes\n  }\n\n  /**\n   * Finds a value on the stack, respecting function bounds.\n   * @param {string} key - Key of the variable we want to access.\n   * @returns {Value | null} - The variable or null, if not found.\n   */\n  get(key) {\n    for (let i = this.variables.length - 1; i >= 0; i--) {\n      if (this.#scopeBounds.findLast((bound) => bound.isFunctionScope && bound.length == i + 1)) {\n        return null;\n      }\n\n      if (this.variables[i].key == key) {\n        return this.variables[i].value;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets variable to the given value and type.\n   * @param {string} key - Key of the variable we want to set.\n   * @param {any} value - The value of the variable.\n   */\n  set(key, value) {\n    const existing_var = this.get(key);\n\n    if (existing_var) {\n      existing_var.set(value.value, value.type)\n    } else {\n      this.variables.push({\n        key: key,\n        value: value\n      })\n    }\n  }\n\n  create_reference(key, variable) {\n    this.set(key, variable, TYPES.reference);\n  }\n\n  enterBasicScope(isFunc = false) {\n    this.#scopeBounds.push({\n      length: this.variables.length,\n      isFunctionScope: isFunc\n    })\n  }\n\n  leaveBasicScope() {\n    const current_bound = this.#scopeBounds.pop()\n    const length_diff = this.variables.length - current_bound.length;\n    this.variables.splice(this.variables.length - length_diff, length_diff)\n  }\n\n  enterFunctionScope(functionName, parameters) {\n    this.enterBasicScope(true)\n\n    const parameterTypes = this.parameterTypes.get(functionName);\n\n    parameters.forEach((parameter, index) => {\n      const current_type = parameterTypes[index]\n\n      if (current_type.reference) {\n        this.create_reference(current_type.name, parameter)\n      } else {\n        this.set(current_type.name, parameter, current_type.type)\n      }\n    })\n  }\n\n  leaveFunctionScope() {\n    this.leaveBasicScope()\n  }\n}\n\n/*\nlet s = new Stack()\ns.set(\"x\", \"teszt\", TYPES.string);\n\ns.enterBasicScope(false)\n\ns.set(\"y\", \"teszt\", TYPES.string);\n\ns.enterBasicScope(false)\ns.set(\"z\", \"teszt\", TYPES.string);\ns.set(\"d\", \"teszt\", TYPES.string);\n\ns.set(\"x\", \"tesztes\", TYPES.string);\n\nlet x = s.get(\"x\")\ns.enterFunctionScope()\n\ns.create_reference(\"val\", x)\n\ns.set(\"val\", \"teszte\", TYPES.string);\n\ns.leaveFunctionScope()\n\ns.leaveBasicScope()\n\ns.set(\"d\", \"teszt\", TYPES.string);\n\nconsole.log(s.get(\"x\")?.value)\nconsole.log(s)\ns.leaveBasicScope()\n*/\n\nclass OldStack {\n  head = null;\n  previousHeads = [];\n  paramnNames = null;\n\n  constructor(pNames) { this.paramnNames = pNames; }\n\n  #find(key, start = null) {\n    let current = start ?? this.head;\n\n    while (current != null) {\n      // Megn\u00E9zz\u00FCk, hogy egy f\u00FCggv\u00E9ny scope-hat\u00E1r\u00E1n vagyunk-e \u00E9s ha igen akkor megszak\u00EDtjuk a keres\u00E9st.\n      const prevHead = this.previousHeads.findLast(([elem, isFunc]) => elem == current && isFunc)\n      if (prevHead) {\n        console.log(prevHead[0])\n        return null;\n      }\n\n      if (current.key == key) {\n        return current;\n      }\n\n\n      current = current.next;\n    }\n\n    return null;\n  }\n\n  #extract(stackValue) {\n    if (Array.isArray(stackValue?.value)) {\n      return stackValue;\n    }\n\n    if (typeof stackValue?.value !== \"object\") {\n      return stackValue;\n    } else {\n      return this.#extract(stackValue.value)\n    }\n  }\n\n  get(key, start = null) {\n    const value = this.#find(key, start)\n\n    if (value === null) {\n      return null;\n    }\n\n    return this.#extract(value)?.value\n  }\n\n\n  set(key, val, forced = false) {\n    if (forced) {\n      const value = new StackValue(key, val, this.head);\n      this.head = value;\n    } else {\n      const svalue = this.#find(key)\n\n      if (svalue) {\n        this.#extract(svalue).value = val\n      } else {\n        const value = new StackValue(key, val, this.head);\n        this.head = value;\n      }\n    }\n  }\n\n  create_reference(key, variable, start = null) {\n    const value = this.#find(variable, start)\n\n    this.set(key, value, true)\n  }\n\n  enterBasicScope(isFunc = false) { this.previousHeads.push([this.head, isFunc]); }\n  leaveBasicScope() { this.head = this.previousHeads.pop()[0]; }\n\n  enterFunctionScope(funcName, parameters) {\n    this.enterBasicScope(true)\n\n    const paramNames = this.paramnNames.get(funcName);\n    parameters.forEach((parameter, index) => {\n      const currentParamName = paramNames[index]\n\n      if (currentParamName.reference) {\n        this.create_reference(currentParamName.name, parameter, this.previousHeads[Math.max(this.previousHeads.length - 1, 0)])\n      } else {\n        this.set(currentParamName.name, parameter, true)\n      }\n    })\n  }\n\n  leaveFunctionScope() {\n    this.leaveBasicScope()\n  }\n\n  printStack() {\n    let current = this.head;\n\n    console.log(\"VEREM KEZDETE\");\n    while (current != null) {\n      console.log(current.key, \" - \", current.value);\n      if (this.previousHeads.includes(current)) { console.log(\"\u00FAj scope\") }\n      current = current.next;\n    }\n    console.log(\"VEREM V\u00C9GE\");\n  }\n}\n\nclass OlderStack {\n  constructor(parameters) {\n    this.previousHead = [];\n    this.head = null;\n    this.paramNames = parameters;\n  }\n\n  newFrame() {\n    this.previousHead.push(this.head);\n  }\n\n  newFunctionFrame(functionName, parameters) {\n    this.newFrame();\n\n    const paramNames = this.paramNames.get(functionName);\n    parameters.forEach((param, idx) => {\n      // Ha nem referencia, akkor \u00FAj v\u00E1ltoz\u00F3k\u00E9nt adjuk hozz\u00E1, ha az, akkor visszont csak lek\u00E9rj\u00FCk az \u00E9rt\u00E9k\u00E9t kor\u00E1bbr\u00F3l.\n      if (!paramNames[idx].reference) {\n        this.force_set(paramNames[idx].name, param);\n      }\n    });\n  }\n\n  dropFrame() {\n    this.head = this.previousHead.pop();\n  }\n\n  find(key) {\n    let current = this.head;\n\n    while (current != null) {\n      if (current.key == key) {\n        return current;\n      }\n\n      current = current.next;\n    }\n\n    return null;\n  }\n\n  get(key) {\n    const elem = this.find(key);\n\n    if (elem) {\n      return elem.value;\n    } else {\n      return null;\n    }\n  }\n\n  force_set(key, value) {\n    const val = new StackValue(key, value, this.head);\n    this.head = val;\n  }\n\n  set(key, value) {\n    const previous = this.find(key);\n\n    if (previous !== null) {\n      previous.value = value;\n    } else {\n      const val = new StackValue(key, value, this.head);\n      this.head = val;\n    }\n  }\n\n  printStack() {\n    let current = this.head;\n\n    console.log(\"VEREM KEZDETE\");\n    while (current != null) {\n      console.log(current.key, \" - \", current.value);\n      current = current.next;\n    }\n    console.log(\"VEREM V\u00C9GE\");\n  }\n}\n\n/*\nconst s = new Stack()\ns.set(\"h\", 123)\ns.set(\"x\", 456)\ns.create_reference(\"hx\", \"h\")\n\nconsole.log(s.get(\"hx\"))\ns.set(\"hx\", 333)\nconsole.log(s.get(\"h\"))\n*/", "import PseudoCodeVisitor from \"./libs/PseudoCodeVisitor.js\";\nimport { Stack, Value, TYPES } from \"./Stack.js\";\n\nexport class LinearGenerator extends PseudoCodeVisitor {\n    output = {\n        code: [],\n        parameterTypes: new Map()\n    }\n\n    createOp(opcode, payload = null) {\n        this.output.code.push({\n            opcode,\n            payload\n        })\n    }\n\n    /**\n     * Creates a list of opcodes based on input and appends it to the resulting code.\n     * @param {Array<[string, string?, string?]>} ops - The list of opcodes and payloads\n     */\n    _assemble(ctx, ops) {\n        ops.forEach(([opcode, payload, arg]) => {\n            switch (opcode) {\n                case \"VISIT\":\n                    this.visit(ctx[payload](Number(arg)))\n                    break;\n                default:\n                    this.createOp(opcode, payload);\n                    break;\n            }\n        })\n    }\n\n    assemble(ctx, input) {\n        const ops = input.split(\"\\n\").map(line => line.trim().split(\" \")).filter(x => x[0] != \"\")\n        this._assemble(ctx, ops)\n    }\n\n    constructor() {\n        super()\n    }\n\n    /*\n    visitProgram(ctx) {\n        super.visitChildren(ctx)\n\n        // console.log(this.output)\n    }*/\n\n    visitReturnStatement(ctx) {\n        this.visit(ctx.expression())\n        this.createOp(\"ret\")\n    }\n\n    visitFunctionCall(ctx) {\n        const fName = ctx.functionName().getText();\n\n        this.visit(ctx.parameters())\n\n        this.createOp(\"functionCall\", fName)\n    }\n\n    visitParameterWithType(ctx) {\n        return {\n            name: ctx.variable().getText(),\n            reference: ctx.CIMSZERINT() !== null,\n            type: ctx.type().getText()\n        };\n    }\n\n    visitFunctionDeclarationWithParameters(ctx) {\n        const fName = ctx.functionName().getText();\n        const params = ctx.parameterWithType().map(p => this.visit(p))\n\n        this.output.parameterTypes.set(fName, params);\n\n        this.createOp(\"functionDef\", fName)\n\n        this.visit(ctx.body())\n\n        this.createOp(\"functionEnd\", fName);\n    }\n\n    visitFunctionDeclarationWithoutParameters(ctx) {\n        const fName = ctx.functionName().getText();\n\n        this.createOp(\"functionDef\", fName);\n\n        this.visit(ctx.body())\n\n        this.createOp(\"functionEnd\", fName);\n    }\n\n    visitDebugPrintStatement(ctx) {\n        // this.visit(ctx.expression())\n        // this.createOp(\"print\")\n\n        this.assemble(ctx, `\n            VISIT expression\n            print\n        `)\n    }\n\n    visitSimpleIfStatement(ctx) {\n        /*\n        this.visit(ctx.expression())\n\n        this.createOp(\"if\")\n\n        this.visit(ctx.body())\n\n        this.createOp(\"endIf\")\n        */\n\n        this.assemble(ctx, [\n            [\"VISIT\", \"expression\"],\n            [\"if\"],\n            [\"VISIT\", \"body\"],\n            [\"endIf\"]\n        ])\n    }\n\n    visitIfElseStatement(ctx) {\n        this.visit(ctx.expression())\n\n        this.createOp(\"if\")\n\n        this.visit(ctx.body())\n\n        this.createOp(\"jmp\", \"endIf\")\n\n        this.visit(ctx.elseBranch())\n\n        this.createOp(\"endIf\")\n    }\n\n    visitElseBranch(ctx) {\n        this.createOp(\"else\")\n\n        this.visit(ctx.body())\n    }\n\n    visitIfElseIfStatement(ctx) {\n        this.visit(ctx.expression())\n\n        this.createOp(\"if\")\n\n        this.visit(ctx.body())\n\n        this.createOp(\"jmp\", \"endIf\")\n\n        const elIfBranches = ctx.elseIfBranch();\n\n        elIfBranches.forEach(branch => {\n            this.visit(branch);\n        })\n\n        this.visit(ctx.elseBranch())\n\n        this.createOp(\"endIf\")\n    }\n\n    visitElseIfBranch(ctx) {\n        this.visit(ctx.expression())\n\n        this.createOp(\"elIf\")\n\n        this.visit(ctx.body())\n\n        this.createOp(\"jmp\", \"endIf\")\n    }\n\n    depth = 0;\n    visitWhileStatement(ctx) {\n        this.createOp(\"whilePrep\", ++this.depth)\n\n        this.visit(ctx.expression());\n\n        this.createOp(\"while\", this.depth)\n\n        this.visit(ctx.body())\n\n        this.createOp(\"loop\", this.depth--)\n    }\n\n    visitForStatement(ctx) {\n        const varname = ctx.variable().getText();\n\n        this.createOp(\"for\")\n\n        // let varname = exp(0)\n        this.visit(ctx.expression(0))\n        this.createOp(\"assign\", varname)\n\n        // while (varname <= exp(1))\n        this.createOp(\"whilePrep\", ++this.depth);\n        this.createOp(\"pushVar\", varname)\n        this.visit(ctx.expression(1))\n        this.createOp(\"compare\", \"<=\")\n        this.createOp(\"while\", this.depth)\n        // {\n\n        // statements...\n        this.visit(ctx.body())\n\n        // varname = varname + 1\n        this.createOp(\"push\", 1)\n        this.createOp(\"pushVar\", varname)\n        this.createOp(\"calculate\", \"+\")\n        this.createOp(\"assign\", varname)\n\n        // }\n        this.createOp(\"loop\", this.depth--)\n\n        this.createOp(\"forEnd\")\n    }\n\n    visitComparisonExpression(ctx) {\n        const comparer = ctx.COMPARISON().getText();\n\n        this.visit(ctx.expression(0))\n        this.visit(ctx.expression(1))\n\n        this.createOp(\"compare\", comparer)\n    }\n\n    visitCalculationExpression(ctx) {\n        const operator = ctx.OPERATOR().getText()\n\n        this.visit(ctx.expression(0))\n        this.visit(ctx.expression(1))\n\n        this.createOp(\"calculate\", operator)\n    }\n\n    visitArrayIndex(ctx) {\n        // indexes\n        const exps = ctx.expression();\n        exps.forEach(exp => { this.visit(exp) })\n\n        // array\n        const varname = ctx.variable().getText()\n        this.createOp(\"pushVar\", varname)\n\n        // index into array\n        this.createOp(\"index\", exps.length)\n    }\n\n    visitArrayShorthand(ctx) {\n        let exps = ctx.expression();\n        exps.forEach(exp => { this.visit(exp) })\n        this.createOp(\"array\", exps.length)\n    }\n\n    visitVariable(ctx) {\n        const varname = ctx.getText()\n        this.createOp(\"pushVar\", varname)\n    }\n\n    visitAssignmentStatement(ctx) {\n        const varname = ctx.variable().getText()\n\n        this.visit(ctx.expression())\n        this.createOp(\"assign\", varname)\n    }\n\n    visitNumber(ctx) {\n        const num = Number(ctx.getText())\n        this.createOp(\"push\", num)\n    }\n\n    visitBool(ctx) {\n        const bool = ctx.getText().toLowerCase() == \"igaz\";\n        this.createOp(\"push\", bool)\n    }\n\n    visitString(ctx) {\n        const str = String(ctx.getText().replaceAll(\"\\\"\", \"\"))\n        this.createOp(\"push\", str)\n    }\n}\n\nexport class LinearExecutor {\n    ip = 0;\n\n    ipStack = []\n\n    /** @type {Array<{opcode: String}>} - Contains the opcodes of the program. */\n    instructions = []\n\n    /** @type {Array<Value>} - Contains the immediate values. */\n    stack = []\n\n    /*\n    /** @type {Map<string, string | number | boolean>}\n    variables = new Map();\n    */\n\n    variables = new Stack()\n\n    /** @type {Map<string, Array<{name: string, reference: boolean, type: string}>>} */\n    parameterTypes = null;\n\n    /**\n     * Initializes a new execution context.\n     * @param {Array<{opcode: String}>} instructions The list of instructions to execute.\n     */\n    constructor(environment, outputFunc = console.log) {\n        this.instructions = environment.code\n        this.parameterTypes = environment.parameterTypes\n        this.outputFunc = outputFunc\n    }\n\n    currentOpcode() {\n        return this.instructions[this.ip].opcode\n    }\n\n    currentPayload() {\n        return this.instructions[this.ip].payload\n    }\n\n    #skip(opcodes, payload, direction, full = false) {\n        if (full) {\n            this.ip = 0;\n        }\n\n        const checkPayload = () => (payload == null) ? false : (this.currentPayload() != payload);\n        const checkOpcode = (Array.isArray(opcodes))\n            ? () => !opcodes.includes(this.currentOpcode())\n            : () => this.currentOpcode() != opcodes;\n\n        while (checkOpcode() || checkPayload()) {\n            this.ip += direction;\n        }\n    }\n\n    fullSeek(opcode, payload) {\n        this.#skip(opcode, payload, 1, true)\n    }\n\n    skipTo(opcodes, payload) {\n        this.#skip(opcodes, payload, 1)\n    }\n\n    skipBack(opcodes, payload) {\n        this.#skip(opcodes, payload, -1)\n    }\n\n    execute(instruction) {\n        const { opcode, payload } = instruction;\n\n        // console.log(instruction.opcode)\n        switch (opcode) {\n            case \"print\":\n                {\n                    const value = this.stack.pop()\n                    this.outputFunc(value?.value)\n                }\n                break;\n\n            case \"push\":\n                this.stack.push(new Value(payload, null))\n                break;\n\n            case \"compare\":\n                {\n                    const exp2 = this.stack.pop().safe_get(TYPES.number)\n                    const exp1 = this.stack.pop().safe_get(TYPES.number)\n\n                    this.stack.push(new Value((() => {\n                        switch (payload) {\n                            case \"=\": return exp1 === exp2\n                            case \"=/=\": return exp1 !== exp2\n                            case \">\": return exp1 > exp2\n                            case \"<\": return exp1 < exp2\n                            case \">=\": return exp1 >= exp2\n                            case \"<=\": return exp1 <= exp2\n                            default: return false\n                        }\n                    })(), TYPES.boolean))\n                }\n                break;\n\n            case \"calculate\":\n                {\n                    const exp2 = this.stack.pop().safe_get(TYPES.number)\n                    const exp1 = this.stack.pop().safe_get(TYPES.number)\n\n                    this.stack.push(new Value((() => {\n                        switch (payload) {\n                            case \"+\": return exp1 + exp2;\n                            case \"-\": return exp1 - exp2;\n                            case \"*\": return exp1 * exp2;\n                            case \"/\": return exp1 / exp2;\n                            case \"mod\": return exp1 % exp2;\n                            default: return 0;\n                        }\n                    })(), TYPES.number))\n                }\n                break;\n\n            case \"index\":\n                {\n                    let array = this.stack.pop()\n                    let indices = []\n\n                    for (let i = 0; i < payload; i++) {\n                        indices.push(this.stack.pop().safe_get(TYPES.number) - 1)\n                    }\n                    indices.reverse()\n\n                    let val = indices.reduce((prev, index) => { return prev.safe_get(TYPES.array)[index] }, array)\n                    this.stack.push(val.clone())\n                }\n                break;\n\n            case \"array\":\n                let arr = []\n\n                for (let i = 0; i < payload; i++) {\n                    arr.push(this.stack.pop())\n                }\n\n                arr.reverse()\n\n                this.stack.push(new Value(arr, TYPES.array))\n                break;\n\n            case \"jmp\":\n                this.skipTo([payload])\n                this.ip--;\n                break;\n\n            case \"if\":\n            case \"elIf\":\n                const isIf = opcode == \"if\";\n                const enter = this.stack.pop().safe_get(TYPES.boolean)\n\n                if (!enter) {\n                    // To handle elIf\n                    if (!isIf) {\n                        this.ip++\n                    }\n\n                    this.skipTo([\"else\", \"elIf\", \"endIf\"])\n\n                    if (isIf && this.instructions[this.ip].opcode == \"elIf\") {\n                        this.skipBack([\"jmp\"])\n                    }\n                }\n\n                this.variables.enterBasicScope()\n                break;\n\n            case \"else\":\n                this.skipTo([\"endIf\"])\n                break;\n\n            case \"endIf\":\n                this.variables.leaveBasicScope()\n                break;\n\n            case \"while\":\n                const should = this.stack.pop().safe_get(TYPES.boolean)\n\n                if (!should) {\n                    this.skipTo(\"loop\", payload)\n                }\n                break;\n\n            case \"loop\":\n                this.skipBack(\"whilePrep\", payload);\n                break;\n\n            case \"for\":\n                this.variables.enterBasicScope()\n                break;\n\n            case \"forEnd\":\n                this.variables.leaveBasicScope()\n                break;\n\n            case \"functionDef\":\n                this.skipTo(\"functionEnd\", payload)\n                break;\n\n            case \"ret\":\n            case \"functionEnd\":\n                this.ip = this.ipStack.pop()\n                this.variables.leaveBasicScope()\n                break;\n\n            case \"functionCall\":\n                this.ipStack.push(this.ip)\n\n                this.variables.enterBasicScope(true)\n\n                const parameters = this.parameterTypes.get(payload).reverse();\n\n                for (let paramType of parameters) {\n                    this.variables.set(paramType.name, this.stack.pop())\n                }\n\n                this.fullSeek(\"functionDef\", payload);\n                break;\n\n            case \"assign\":\n                const val = this.stack.pop()\n                this.variables.set(payload, val.clone());\n                break;\n\n            case \"pushVar\":\n                this.stack.push(this.variables.get(payload))\n                break;\n\n        }\n    }\n\n    step() {\n        if (this.ip < this.instructions.length) {\n            const current_instruction = this.instructions[this.ip];\n            this.execute(current_instruction)\n            this.ip++;\n        }\n    }\n\n    run() {\n        while (this.ip < this.instructions.length) {\n            this.step()\n        }\n    }\n\n    reset() {\n        this.variables = []\n        this.stack = []\n        this.ip = 0;\n    }\n}", "//import prompt_sync from \"prompt-sync\";\n\n//console.log(tree.toStringTree(parser.ruleNames));\nexport class DebugPrompt {\n  constructor(stack, params) {\n    this.step = false;\n    this.enabled = true;\n    //this.input = prompt_sync({ sigint: true });\n    this.stack = stack;\n    this.params = params;\n  }\n\n  prompt() {\n    if (!this.enabled)\n      return;\n\n    let loop = true;\n\n    while (loop) {\n      //let inp = this.input(\"-- (l: l\u00E9ptet\u00E9s ki/be, s: verem ki\u00EDr\u00E1sa, x: debug kikapcsol\u00E1sa, enter: folytat\u00E1s) --\");\n      let inp = \"x\"\n      switch (inp) {\n        case \"l\":\n          this.step = !this.step;\n          if (this.step) {\n            console.log(\"L\u00E9ptet\u00E9s: BE\");\n          } else {\n            console.log(\"L\u00E9ptet\u00E9s: KI\");\n          }\n          break;\n        case \"s\":\n          this.stack.printStack();\n          break;\n        case \"x\":\n          this.enabled = false;\n          loop = false;\n          break;\n        case \"p\":\n          for (let [k, v] of this.params.entries()) {\n            console.log(k, \"=>\", v);\n          }\n          break;\n        case \"\":\n          loop = false;\n      }\n    }\n  }\n}\n", "import PseudoCodeVisitor from \"./libs/PseudoCodeVisitor.js\";\nimport { DebugPrompt } from \"./DebugPrompt.js\";\nimport { TYPES, Value, Stack } from \"./Stack.js\";\n\nexport class PseudoVisitor extends PseudoCodeVisitor {\n  constructor(outputFunc, varOutput) {\n    super();\n\n    this.functions = new Map();\n    this.paramNames = new Map();\n    this.variableStack = new Stack(this.paramNames);\n    this.debugger = new DebugPrompt(this.variableStack, this.paramNames);\n\n    this.outputFunc = outputFunc ?? console.log;\n    this.variableOutput = varOutput ?? console.log;\n  }\n\n  visitDebug(ctx) {\n    this.debugger.prompt();\n  }\n\n  visitVars(ctx) {\n    this.variableOutput(this.variableStack.variables, this.variableStack.scopeBounds);\n  }\n\n  visitDebugPrintStatement(ctx) {\n    let exp = this.visit(ctx.expression());\n\n    let output = \"\"\n    const extract = (exp) => {\n      if (exp === null) {\n        output += \"[Nem l\u00E9tezik]\"\n      } else if (exp.type !== TYPES.array) {\n        output += exp.value\n      } else {\n        output += \"[\"\n        exp.value.forEach((val, idx) => {\n          extract(val)\n\n          if (idx != exp.value.length - 1) {\n            output += \", \"\n          }\n        })\n        output += \"]\"\n      }\n    }\n\n    extract(exp)\n    this.outputFunc(output)\n  }\n\n  visitStatement(ctx) {\n    return this.visit(ctx.getChild(0));\n  }\n\n  visitBody(ctx) {\n    const statements = ctx.statement();\n\n    if (statements !== null) {\n      this.variableStack.enterBasicScope()\n\n      for (let statement of statements) {\n        const value = this.visit(statement);\n\n        if (value !== null && value !== undefined) {\n          this.variableStack.leaveBasicScope()\n          return value;\n        }\n      }\n\n      this.variableStack.leaveBasicScope()\n    }\n\n    return null;\n  }\n\n  visitSimpleIfStatement(ctx) {\n    const exp = ctx.expression();\n    const predicate = this.visit(exp);\n\n    if (predicate.type !== TYPES.boolean) {\n      throw new Error(\"Nem boolean if-ben!\");\n    }\n\n    if (predicate.value) {\n      return this.visit(ctx.body());\n    }\n  }\n\n  visitIfElseStatement(ctx) {\n    const exp = ctx.expression();\n    const predicate = this.visit(exp);\n\n    if (predicate.type !== TYPES.boolean) {\n      throw new Error(\"Nem boolean if-ben!\");\n    }\n\n    if (predicate.value) {\n      return this.visit(ctx.body());\n    }\n    else {\n      return this.visit(ctx.elseBranch());\n    }\n  }\n\n  visitIfElseIfStatement(ctx) {\n    const exp = ctx.expression();\n    const predicate = this.visit(exp);\n\n    if (predicate.type !== TYPES.boolean) {\n      throw new Error(\"Nem boolean if-ben!\");\n    }\n\n    if (predicate.value) {\n      return this.visit(ctx.body());\n    }\n    else {\n      const elifBranches = ctx.elseIfBranch();\n\n      for (let elifBranch of elifBranches) {\n        const altPred = this.visit(elifBranch.expression());\n\n        if (altPred.type !== TYPES.boolean) {\n          throw new Error(\"Nem boolean elif \u00E1gban!\");\n        }\n\n        if (altPred.value) {\n          return this.visit(elifBranch.body());\n        }\n      }\n\n      return this.visit(ctx.elseBranch());\n    }\n  }\n\n  visitElseBranch(ctx) {\n    return this.visit(ctx.body());\n  }\n\n  visitForStatement(ctx) {\n    const body = ctx.body()\n    const varname = ctx.variable().getText();\n    const start = this.visit(ctx.expression(0)).safe_get(TYPES.number);\n    const end = this.visit(ctx.expression(1)).safe_get(TYPES.number);\n\n    this.variableStack.enterBasicScope()\n\n    this.variableStack.set(varname, new Value(start, TYPES.number));\n\n    while (true) {\n      const iterator = this.variableStack.get(varname);\n\n      if (iterator.value > end) {\n        break;\n      }\n\n      const value = this.visitBody(body);\n\n      if (value) {\n        this.variableStack.leaveBasicScope()\n        return value;\n      }\n\n      iterator.set(iterator.value + 1, iterator.type);\n    }\n\n    this.variableStack.leaveBasicScope()\n  }\n\n  visitWhileStatement(ctx) {\n    const exp = ctx.expression();\n    const body = ctx.body();\n\n    while (true) {\n      const pred = this.visit(exp).safe_get(TYPES.boolean)\n\n      if (pred == false) {\n        return null;\n      }\n\n      const value = this.visit(body);\n\n      if (value) {\n        return value;\n      }\n    }\n  }\n\n  visitDoWhileStatement(ctx) {\n    const exp = ctx.expression();\n    const body = ctx.body();\n\n    while (true) {\n      const value = this.visit(body);\n\n      if (value) {\n        return value;\n      }\n\n      const predicate = this.visit(exp).safe_get(TYPES.boolean)\n      if (predicate == false) {\n        return null;\n      }\n    }\n  }\n\n  visitMethodCallStatement(ctx) {\n    let _ = this.visitFunctionCall(ctx);\n    return null;\n  }\n\n  visitFunctionDeclarationWithParameters(ctx) {\n    const parameters = ctx.parameterWithType().map(param => this.visit(param));\n    const funcName = ctx.functionName().getText();\n    const funcBody = ctx.body(0);\n\n    this.functions.set(funcName, funcBody);\n    this.paramNames.set(funcName, parameters);\n  }\n\n  visitParameterWithType(ctx) {\n    return { name: ctx.variable().getText(), reference: ctx.CIMSZERINT() !== null, type: ctx.type().getText() };\n  }\n\n  visitFunctionDeclarationWithoutParameters(ctx) {\n    const funcName = ctx.functionName().getText();\n    const funcBody = ctx.body(0);\n\n    this.functions.set(funcName, funcBody);\n  }\n\n  visitFunctionCallExpression(ctx) {\n    return this.visitFunctionCall(ctx.functionCall(0));\n  }\n\n  visitFunctionCall(ctx) {\n    const funcName = ctx.functionName().getText();\n    const funcBody = this.functions.get(funcName);\n\n    const parameters = ctx.parameters().expression().map(param => this.visit(param));\n\n    if (funcBody) {\n      this.variableStack.enterFunctionScope(funcName, parameters);\n      const value = this.visitBody(funcBody);\n      this.variableStack.leaveFunctionScope();\n      return value;\n    } else {\n      this.outputFunc(\"Nincs ilyen fgv: \" + funcName);\n    }\n  }\n\n  visitReturnStatement(ctx) {\n    return this.visit(ctx.expression(0));\n  }\n\n  visitVariable(ctx) {\n    const varname = ctx.getText();\n    return this.variableStack.get(varname);\n  }\n\n  visitArrayElementAssignmentStatement(ctx) {\n    const variable = this.visitVariable(ctx.variable());\n    const index = this.visit(ctx.expression(0)).safe_get(TYPES.number) - 1; // Pszeudok\u00F3d 1-t\u0151l kezdi.\n    const value = this.visit(ctx.expression(1));\n\n    variable.value[index] = value;\n  }\n\n  visitArrayAssignmentStatement(ctx) {\n    const varname = ctx.variable().getText();\n    const typeName = ctx.type().getText();\n    const length = this.visit(ctx.expression()).safe_get(TYPES.number)\n\n    const defaultValue = (() => {\n      switch (typeName) {\n        case \"eg\u00E9sz\": return [Number(), TYPES.number];\n        case \"sz\u00F6veg\": return [String(), TYPES.string];\n        case \"logikai\": return [Boolean(), TYPES.boolean];\n      }\n    })()\n\n\n    this.variableStack.set(\n      varname,\n      new Value(\n        Array.from(\n          Array(length),\n          () => new Value(...defaultValue)),\n        TYPES.array))\n  }\n\n  visitAssignmentStatement(ctx) {\n    const varname = ctx.variable().getText();\n    const value = this.visit(ctx.expression());\n\n    this.variableStack.set(varname, value.clone());\n  }\n\n  visitOrExpression(ctx) {\n    return this.visit(ctx.expression(0)) || this.visit(ctx.expression(1));\n  }\n\n  visitAndExpression(ctx) {\n    return this.visit(ctx.expression(0)) && this.visit(ctx.expression(1));\n  }\n\n  visitValueExpression(ctx) {\n    return this.visitValue(ctx.getChild(0));\n  }\n\n  visitArrayIndex(ctx) {\n    let current_variable = this.visit(ctx.variable()).safe_get(TYPES.array)\n\n    let expressions = ctx.expression()\n\n    for (let i = 0; i < expressions.length - 1; i++) {\n      let exp = expressions[i]\n      const index = this.visit(exp).safe_get(TYPES.number) - 1\n      current_variable = current_variable[index].safe_get(TYPES.array);\n    }\n\n    let index = this.visit(expressions[expressions.length - 1]).safe_get(TYPES.number) - 1\n\n    return current_variable[index];\n  }\n\n  visitValue(ctx) {\n    return this.visit(ctx.getChild(0));\n  }\n\n  visitAtom(ctx) {\n    return this.visit(ctx.getChild(0));\n  }\n\n  visitArrayShorthand(ctx) {\n    return new Value([...ctx.expression()].map((exp) => this.visit(exp)), TYPES.array)\n  }\n\n  visitBool(ctx) {\n    return new Value(ctx.getText().toLowerCase() == \"igaz\", TYPES.boolean);\n  }\n\n  visitNumber(ctx) {\n    return new Value(Number(ctx.getText()), TYPES.number);\n  }\n\n  visitString(ctx) {\n    return new Value(String(ctx.getText().replaceAll(\"\\\"\", \"\")), TYPES.string);\n  }\n\n  visitComparisonExpression(ctx) {\n    const comparer = ctx.COMPARISON().getText();\n\n    const exp1_raw = this.visit(ctx.expression(0));\n    const exp2_raw = this.visit(ctx.expression(1));\n\n    if (exp1_raw.type !== TYPES.number) {\n      throw new Error(\"1. v\u00E1ltoz\u00F3 t\u00EDpusa nem sz\u00E1m!\");\n    }\n\n    if (exp2_raw.type !== TYPES.number) {\n      throw new Error(\"2. v\u00E1ltoz\u00F3 t\u00EDpusa nem sz\u00E1m!\");\n    }\n\n    const exp1 = exp1_raw.value;\n    const exp2 = exp2_raw.value;\n\n    const value = (() => {\n      switch (comparer) {\n        case \"<\":\n          return exp1 < exp2;\n        case \">\":\n          return exp1 > exp2;\n        case \"<=\":\n          return exp1 <= exp2;\n        case \">=\":\n          return exp1 >= exp2;\n        case \"=\":\n          return exp1 === exp2;\n        case \"=/=\":\n          return exp1 !== exp2;\n        default:\n          throw new Error(\"Illegal operator found in comparison.\");\n      }\n    })()\n\n    return new Value(value, TYPES.boolean);\n  }\n\n  visitCalculationExpression(ctx) {\n    const op = ctx.OPERATOR().getText();\n\n    const exp1_raw = this.visit(ctx.expression(0));\n    const exp2_raw = this.visit(ctx.expression(1));\n\n    if (exp1_raw.type !== TYPES.number || exp2_raw.type !== TYPES.number) {\n      throw new Error(\"A v\u00E1ltoz\u00F3 t\u00EDpusa nem sz\u00E1m!\");\n    }\n\n    const exp1 = exp1_raw.value;\n    const exp2 = exp2_raw.value;\n\n    const result = (() => {\n      switch (op) {\n        case \"+\":\n          return exp1 + exp2;\n        case \"-\":\n          return exp1 - exp2;\n        case \"*\":\n          return exp1 * exp2;\n        case \"/\":\n          return exp1 / exp2;\n        case \"mod\":\n          return exp1 % exp2;\n        default:\n          throw new Error(\"Illegal operator found in calculation.\");\n      }\n    })()\n\n    return new Value(result, TYPES.number);\n  }\n\n  visitTerminal(ctx) {\n    if (this.debugger.step)\n      this.debugger.prompt();\n    return super.visitTerminal(ctx);\n  }\n}\n", "import antlr4 from \"antlr4\";\nimport PseudoCodeLexer from \"./libs/PseudoCodeLexer.js\";\nimport PseudoCodeParser from \"./libs/PseudoCodeParser.js\";\nimport { LinearExecutor, LinearGenerator } from \"./LinearGenerator.js\";\n\nimport { PseudoVisitor } from \"./PseudoVisitor.js\";\n\nconst binput = `\nha igaz akkor\nkiir \"1. El\u00E1g j\u00F3\"\nel\u00E1gaz\u00E1s v\u00E9ge\n\nha hamis akkor\ndummy\nk\u00FCl\u00F6nben\nkiir \"2. El\u00E1g j\u00F3\"\nel\u00E1gaz\u00E1s v\u00E9ge\n\nha hamis akkor\ndummy\nk\u00FCl\u00F6nben ha hamis akkor\ndummy\nk\u00FCl\u00F6nben\nkiir \"3. El\u00E1g j\u00F3\"\nel\u00E1gaz\u00E1s v\u00E9ge\n\nha hamis akkor\ndummy\nk\u00FCl\u00F6nben ha igaz akkor\nkiir \"4. El\u00E1g j\u00F3\"\nk\u00FCl\u00F6nben\ndummy\nel\u00E1gaz\u00E1s v\u00E9ge\n\nx <- 5\n\nha x = x akkor\nkiir \"If j\u00F3\"\nk\u00FCl\u00F6nben\nkiir \"If rossz\"\nel\u00E1gaz\u00E1s v\u00E9ge\n\nciklus i <- 1-t\u0151l x*2-ig\nkiir i * 2\nciklus v\u00E9ge\n\nx <- 1\nciklus am\u00EDg x < 5\nx <- x + 1\nciklus v\u00E9ge\n\nha x = 5 akkor\nkiir \"While j\u00F3\"\nk\u00FCl\u00F6nben\nkiir \"While hib\u00E1s\"\nkiir x\nel\u00E1gaz\u00E1s v\u00E9ge\n\nx <- 1\nciklus\nx <- x + 1\nam\u00EDg x < 5\nkiir x\n\nha x = 5 akkor\nkiir \"Do While 1. j\u00F3\"\nk\u00FCl\u00F6nben\nkiir \"Do While 1. hib\u00E1s\"\nkiir x\nel\u00E1gaz\u00E1s v\u00E9ge\n\nf\u00FCggv\u00E9ny Paramnelkul()\n vissza 5\nf\u00FCggv\u00E9ny v\u00E9ge\n\nf\u00FCggv\u00E9ny Egyparameter(x : eg\u00E9sz)\n vissza x * 2\nf\u00FCggv\u00E9ny v\u00E9ge\n\nf\u00FCggv\u00E9ny Ketparameter(x : eg\u00E9sz, y : logikai)\n ha y akkor\nvissza x + 3\n k\u00FCl\u00F6nben\nvissza x - 3\n el\u00E1gaz\u00E1s v\u00E9ge\nf\u00FCggv\u00E9ny v\u00E9ge\n\nkiir Paramnelkul()\nkiir Egyparameter(5)\nkiir Ketparameter(3, igaz)\n\nf\u00FCggv\u00E9ny Faktorialis(x : eg\u00E9sz)\ndebug\n  ha x <= 1 akkor\n    vissza x\n  k\u00FCl\u00F6nben\n    vissza x * Faktorialis(x - 1)\n  el\u00E1gaz\u00E1s v\u00E9ge\nf\u00FCggv\u00E9ny v\u00E9ge\n\nkiir Faktorialis(5)\n\n`;\n\nconst ainput = `\nf\u00FCggv\u00E9ny LNKO(m : eg\u00E9sz, n : eg\u00E9sz)\n  r <- m mod n\n  \n  ciklus am\u00EDg r =/= 0\n    m <- n\n    n <- r\n    r <- m mod n  \n  ciklus v\u00E9ge\n\n  vissza n\nf\u00FCggv\u00E9ny v\u00E9ge\n\nkiir LNKO(15, 33)\n`\n\nexport { LinearExecutor } from \"./LinearGenerator.js\";\n\nexport function createProgram(input) {\n  const chars = new antlr4.InputStream(input + \"\\n\");\n  const lexer = new PseudoCodeLexer(chars);\n  const tokens = new antlr4.CommonTokenStream(lexer);\n  const parser = new PseudoCodeParser(tokens);\n  const tree = parser.program();\n\n  const generator = new LinearGenerator()\n  generator.visit(tree)\n\n  return generator.output\n}\n\nexport function runLinear(input, outputFunc) {\n  const chars = new antlr4.InputStream(input + \"\\n\");\n  const lexer = new PseudoCodeLexer(chars);\n  const tokens = new antlr4.CommonTokenStream(lexer);\n  const parser = new PseudoCodeParser(tokens);\n  const tree = parser.program();\n\n  const generator = new LinearGenerator()\n  generator.visit(tree)\n\n  const executor = new LinearExecutor(generator.output, outputFunc)\n  executor.run()\n}\n\nexport function runText(input, errorFunc, outputFunc, varOutput) {\n  const chars = new antlr4.InputStream(input + \"\\n\");\n  const lexer = new PseudoCodeLexer(chars);\n\n  lexer.removeErrorListeners();\n  lexer.addErrorListener({ syntaxError: errorFunc });\n\n  const tokens = new antlr4.CommonTokenStream(lexer);\n  const parser = new PseudoCodeParser(tokens);\n\n  parser.removeErrorListeners();\n  parser.addErrorListener({ syntaxError: errorFunc });\n\n  const tree = parser.program();\n\n  const visitor = new PseudoVisitor(outputFunc, varOutput);\n  const generator = new LinearGenerator()\n\n  //outputFunc(tree.toStringTree(parser.ruleNames))\n\n  //outputFunc(\"VISITOR:\")\n  visitor.visit(tree);\n\n  /*\n  generator.visit(tree)\n\n  const executor = new LinearExecutor(generator.output, outputFunc)\n\n  outputFunc(\"EXECUTOR:\")\n  executor.run()\n  */\n}\n\n\nconsole.log(\"Hello!\")"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;;;ACKA,OAAO,UAAU,OAAO,OAAO,UAAU,QAAQ,KAAK,MAAM,KAAK,OAAO,IAAI,KAAK,IAAI,GAAG,EAAE,CAAC;AAE3F,OAAO,UAAU,WAAW,WAAY;AACpC,QAAM,MAAM,KAAK,SAAS;AAC1B,MAAI,KAAK;AAET,QAAM,YAAY,IAAI,SAAS;AAC/B,QAAM,QAAQ,IAAI,SAAS;AAC3B,MAAI,KAAK,OAAO,UAAU;AAC1B,QAAM,KAAK;AACX,QAAM,KAAK;AACX,MAAI,IAAI;AAER,SAAO,IAAI,OAAO;AACd,SACM,IAAI,WAAW,CAAC,IAAI,OACpB,IAAI,WAAW,EAAE,CAAC,IAAI,QAAS,KAC/B,IAAI,WAAW,EAAE,CAAC,IAAI,QAAS,MAC/B,IAAI,WAAW,EAAE,CAAC,IAAI,QAAS;AACrC,MAAE;AAEF,UAAS,KAAK,SAAU,QAAU,OAAO,MAAM,KAAM,UAAW,MAAQ;AACxE,SAAM,MAAM,KAAO,OAAO;AAC1B,UAAS,KAAK,SAAU,QAAU,OAAO,MAAM,KAAM,UAAW,MAAQ;AAExE,UAAM;AACN,SAAM,MAAM,KAAO,OAAO;AAC1B,WAAU,KAAK,SAAU,OAAS,OAAO,MAAM,IAAK,UAAW,MAAQ;AACvE,UAAQ,MAAM,SAAU,WAAc,QAAQ,MAAM,QAAU,UAAW;AAAA,EAC7E;AAEA,OAAK;AAEL,UAAQ,WAAW;AAAA,IACf,KAAK;AACD,aAAO,IAAI,WAAW,IAAI,CAAC,IAAI,QAAS;AAAA,IAE5C,KAAK;AACD,aAAO,IAAI,WAAW,IAAI,CAAC,IAAI,QAAS;AAAA,IAE5C,KAAK;AACD,YAAO,IAAI,WAAW,CAAC,IAAI;AAC3B,YAAQ,KAAK,SAAU,QAAU,OAAO,MAAM,KAAM,UAAW,MAAO;AACtE,WAAM,MAAM,KAAO,OAAO;AAC1B,YAAQ,KAAK,SAAU,QAAU,OAAO,MAAM,KAAM,UAAW,MAAO;AACtE,YAAM;AAAA,EACd;AAEA,QAAM,IAAI;AAEV,QAAM,OAAO;AACb,QAAQ,KAAK,SAAU,gBAAkB,OAAO,MAAM,aAAc,UAAW,MAAO;AACtF,QAAM,OAAO;AACb,QAAS,KAAK,SAAU,gBAAkB,OAAO,MAAM,aAAc,UAAW,MAAQ;AACxF,QAAM,OAAO;AAEb,SAAO,OAAO;AAClB;;;ACzDA,IAAI,CAAC,OAAO,UAAU,aAAa;AAClC,GAAC,WAAW;AACX;AACA,QAAI,iBAAkB,WAAW;AAEhC,UAAI;AACJ,UAAI;AACH,cAAM,SAAS,CAAC;AAChB,cAAM,kBAAkB,OAAO;AAC/B,iBAAS,gBAAgB,QAAQ,QAAQ,MAAM,KAAK;AAAA,MACrD,SAAQ,OAAN;AAAA,MAEF;AACA,aAAO;AAAA,IACR,EAAE;AACF,UAAM,cAAc,SAAS,UAAU;AACtC,UAAI,QAAQ,MAAM;AACjB,cAAM,UAAU;AAAA,MACjB;AACA,YAAM,SAAS,OAAO,IAAI;AAC1B,YAAM,OAAO,OAAO;AAEpB,UAAI,QAAQ,WAAW,OAAO,QAAQ,IAAI;AAC1C,UAAI,UAAU,OAAO;AACpB,gBAAQ;AAAA,MACT;AAEA,UAAI,QAAQ,KAAK,SAAS,MAAM;AAC/B,eAAO;AAAA,MACR;AAEA,YAAM,QAAQ,OAAO,WAAW,KAAK;AACrC,UAAI;AACJ,UACC,SAAS,SAAU,SAAS,SAC5B,OAAO,QAAQ,GACd;AACD,iBAAS,OAAO,WAAW,QAAQ,CAAC;AACpC,YAAI,UAAU,SAAU,UAAU,OAAQ;AAEzC,kBAAQ,QAAQ,SAAU,OAAQ,SAAS,QAAS;AAAA,QACrD;AAAA,MACD;AACA,aAAO;AAAA,IACR;AACA,QAAI,gBAAgB;AACnB,qBAAe,OAAO,WAAW,eAAe;AAAA,QAC/C,SAAS;AAAA,QACT,gBAAgB;AAAA,QAChB,YAAY;AAAA,MACb,CAAC;AAAA,IACF,OAAO;AACN,aAAO,UAAU,cAAc;AAAA,IAChC;AAAA,EACD,GAAE;AACH;;;ACvDA,IAAI,CAAC,OAAO,eAAe;AAC1B,GAAC,WAAW;AACX,UAAM,iBAAkB,WAAW;AAElC,UAAI;AACJ,UAAI;AACH,cAAM,SAAS,CAAC;AAChB,cAAM,kBAAkB,OAAO;AAC/B,iBAAS,gBAAgB,QAAQ,QAAQ,MAAM,KAAK;AAAA,MACrD,SAAQ,OAAN;AAAA,MAEF;AACA,aAAO;AAAA,IACR,EAAE;AACF,UAAM,qBAAqB,OAAO;AAClC,UAAM,QAAQ,KAAK;AACnB,UAAM,gBAAgB,SAAS,GAAG;AACjC,YAAM,WAAW;AACjB,YAAM,YAAY,CAAC;AACnB,UAAI;AACJ,UAAI;AACJ,UAAI,QAAQ;AACZ,YAAM,SAAS,UAAU;AACzB,UAAI,CAAC,QAAQ;AACZ,eAAO;AAAA,MACR;AACA,UAAI,SAAS;AACb,aAAO,EAAE,QAAQ,QAAQ;AACxB,YAAI,YAAY,OAAO,UAAU,MAAM;AACvC,YACC,CAAC,SAAS,SAAS,KACnB,YAAY,KACZ,YAAY,WACZ,MAAM,SAAS,MAAM,WACpB;AACD,gBAAM,WAAW,yBAAyB,SAAS;AAAA,QACpD;AACA,YAAI,aAAa,OAAQ;AACxB,oBAAU,KAAK,SAAS;AAAA,QACzB,OAAO;AAEN,uBAAa;AACb,2BAAiB,aAAa,MAAM;AACpC,yBAAgB,YAAY,OAAS;AACrC,oBAAU,KAAK,eAAe,YAAY;AAAA,QAC3C;AACA,YAAI,QAAQ,MAAM,UAAU,UAAU,SAAS,UAAU;AACxD,oBAAU,mBAAmB,MAAM,MAAM,SAAS;AAClD,oBAAU,SAAS;AAAA,QACpB;AAAA,MACD;AACA,aAAO;AAAA,IACR;AACA,QAAI,gBAAgB;AACnB,qBAAe,QAAQ,iBAAiB;AAAA,QACvC,SAAS;AAAA,QACT,gBAAgB;AAAA,QAChB,YAAY;AAAA,MACb,CAAC;AAAA,IACF,OAAO;AACN,aAAO,gBAAgB;AAAA,IACxB;AAAA,EACD,GAAE;AACH;;;AC1DA,IAAqB,QAArB,MAA2B;AAAA,EAC1B,cAAc;AACb,SAAK,SAAS;AACd,SAAK,OAAO;AACZ,SAAK,UAAU;AACf,SAAK,QAAQ;AACb,SAAK,OAAO;AACZ,SAAK,aAAa;AAClB,SAAK,OAAO;AACZ,SAAK,SAAS;AACd,SAAK,QAAQ;AAAA,EACd;AAAA,EAEA,iBAAiB;AAChB,WAAO,KAAK,OAAO;AAAA,EACpB;AAAA,EAEA,iBAAiB;AAChB,WAAO,KAAK,OAAO;AAAA,EACpB;AAAA,EAEA,IAAI,OAAM;AACT,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,IAAI,KAAK,MAAM;AACd,SAAK,QAAQ;AAAA,EACd;AACD;AAEA,MAAM,eAAe;AAMrB,MAAM,UAAU;AAEhB,MAAM,sBAAsB;AAE5B,MAAM,MAAM;AAOZ,MAAM,kBAAkB;AAMxB,MAAM,iBAAiB;;;AC3DR,SAAR,YAA6B,GAAG,GAAG;AACtC,MAAI,CAAC,MAAM,QAAQ,CAAC,KAAK,CAAC,MAAM,QAAQ,CAAC;AACrC,WAAO;AACX,MAAI,MAAM;AACN,WAAO;AACX,MAAI,EAAE,WAAW,EAAE;AACf,WAAO;AACX,WAAS,IAAI,GAAG,IAAI,EAAE,QAAQ,KAAK;AAC/B,QAAI,EAAE,OAAO,EAAE;AACX;AACJ,QAAI,CAAC,EAAE,GAAG,UAAU,CAAC,EAAE,GAAG,OAAO,EAAE,EAAE;AACjC,aAAO;AAAA,EACf;AACA,SAAO;AACX;;;ACdA,IAAqB,WAArB,MAA8B;AAAA,EAE1B,cAAc;AACV,SAAK,QAAQ;AACb,SAAK,OAAO;AAAA,EAChB;AAAA,EAEA,SAAS;AACL,aAAQ,IAAE,GAAE,IAAE,UAAU,QAAO,KAAK;AAChC,YAAM,QAAQ,UAAU;AACxB,UAAI,SAAS;AACT;AACJ,UAAG,MAAM,QAAQ,KAAK;AAClB,aAAK,OAAO,MAAM,MAAM,KAAK;AAAA,WAC5B;AACD,YAAI,IAAI;AACR,gBAAQ,OAAO,OAAQ;AAAA,UACnB,KAAK;AAAA,UACL,KAAK;AACD;AAAA,UACJ,KAAK;AAAA,UACL,KAAK;AACD,gBAAI;AACJ;AAAA,UACJ,KAAK;AACD,gBAAI,MAAM,SAAS;AACnB;AAAA,UACJ;AACI,gBAAG,MAAM;AACL,oBAAM,eAAe,IAAI;AAAA;AAEzB,sBAAQ,IAAI,2BAA2B,MAAM,SAAS,CAAC;AAC3D;AAAA,QACR;AACA,YAAI,IAAI;AACR,YAAK,KAAK,KAAO,MAAO,KAAK;AAC7B,YAAI,IAAI;AACR,aAAK,QAAQ,KAAK,QAAQ;AAC1B,YAAI,OAAO,KAAK,OAAO;AACvB,eAAQ,QAAQ,KAAO,SAAU,KAAK;AACtC,eAAO,OAAO,IAAI;AAClB,aAAK,OAAO;AAAA,MAChB;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,SAAS;AACL,QAAI,OAAO,KAAK,OAAQ,KAAK,QAAQ;AACrC,WAAO,OAAQ,SAAS;AACxB,WAAO,OAAO;AACd,WAAO,OAAQ,SAAS;AACxB,WAAO,OAAO;AACd,WAAO,OAAQ,SAAS;AACxB,WAAO;AAAA,EACX;AAAA,EAEA,OAAO,YAAY;AACf,UAAM,OAAO,IAAI,SAAS;AAC1B,SAAK,OAAO,MAAM,MAAM,SAAS;AACjC,WAAO,KAAK,OAAO;AAAA,EACvB;AACJ;;;AC7De,SAAR,yBAA0C,GAAG;AAChD,SAAO,IAAI,EAAE,SAAS,IAAI;AAC9B;;;ACFe,SAAR,uBAAwC,GAAG,GAAG;AACjD,SAAO,IAAI,EAAE,OAAO,CAAC,IAAI,MAAI;AACjC;;;ACFe,SAAR,cAA+B,GAAG;AACrC,SAAO,MAAM,OAAO,SAAS;AACjC;;;ACAe,SAAR,cAA+B,GAAG;AACrC,SAAO,MAAM,QAAQ,CAAC,IAAK,MAAM,EAAE,IAAI,aAAa,EAAE,KAAK,IAAI,IAAI,MAAO;AAC9E;;;ACAA,IAAM,kBAAkB;AAExB,IAAqB,UAArB,MAA6B;AAAA,EAEzB,YAAY,cAAc,gBAAgB;AACtC,SAAK,OAAO,CAAC;AACb,SAAK,eAAe,gBAAgB;AACpC,SAAK,iBAAiB,kBAAkB;AAAA,EAC5C;AAAA,EAEA,IAAI,OAAO;AACP,UAAM,MAAM,kBAAkB,KAAK,aAAa,KAAK;AACrD,QAAI,OAAO,KAAK,MAAM;AAClB,YAAM,SAAS,KAAK,KAAK;AACzB,eAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACpC,YAAI,KAAK,eAAe,OAAO,OAAO,EAAE,GAAG;AACvC,iBAAO,OAAO;AAAA,QAClB;AAAA,MACJ;AACA,aAAO,KAAK,KAAK;AACjB,aAAO;AAAA,IACX,OAAO;AACH,WAAK,KAAK,OAAO,CAAC,KAAK;AACvB,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEA,IAAI,OAAO;AACP,WAAO,KAAK,IAAI,KAAK,KAAK;AAAA,EAC9B;AAAA,EAEA,IAAI,OAAO;AACP,UAAM,MAAM,kBAAkB,KAAK,aAAa,KAAK;AACrD,QAAI,OAAO,KAAK,MAAM;AAClB,YAAM,SAAS,KAAK,KAAK;AACzB,eAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACpC,YAAI,KAAK,eAAe,OAAO,OAAO,EAAE,GAAG;AACvC,iBAAO,OAAO;AAAA,QAClB;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EAEA,SAAS;AACL,WAAO,OAAO,KAAK,KAAK,IAAI,EAAE,OAAO,SAAO,IAAI,WAAW,eAAe,CAAC,EAAE,QAAQ,SAAO,KAAK,KAAK,MAAM,IAAI;AAAA,EACpH;AAAA,EAEA,WAAW;AACP,WAAO,cAAc,KAAK,OAAO,CAAC;AAAA,EACtC;AAAA,EAEA,IAAI,SAAS;AACT,WAAO,OAAO,KAAK,KAAK,IAAI,EAAE,OAAO,SAAO,IAAI,WAAW,eAAe,CAAC,EAAE,IAAI,SAAO,KAAK,KAAK,KAAK,QAAQ,IAAI,EAAE,OAAO,CAAC,OAAO,SAAS,QAAQ,MAAM,CAAC;AAAA,EAChK;AACJ;;;AC9CA,IAAqB,kBAArB,MAAqC;AAAA,EAEpC,WAAW;AACV,UAAM,OAAO,IAAI,SAAS;AAC1B,SAAK,eAAe,IAAI;AACxB,WAAO,KAAK,OAAO;AAAA,EACpB;AAAA,EAeA,SAAS,QAAQ,cAAc;AAAA,EAAC;AAAA,EAoBhC,eAAe,QAAQ,cAAc;AACpC,WAAO;AAAA,EACR;AAAA,EAEA,OAAO,WAAW,GAAG,GAAG;AACvB,QAAI,MAAM,QAAQ,MAAM,gBAAgB,MAAM;AAC7C,aAAO;AAAA,IACR;AACA,QAAI,MAAM,QAAQ,MAAM,gBAAgB,MAAM;AAC7C,aAAO;AAAA,IACR;AACA,UAAM,SAAS,IAAI,IAAI,GAAG,CAAC;AAC3B,QAAI,OAAO,MAAM,WAAW,GAAG;AAC9B,aAAO,OAAO,MAAM;AAAA,IACrB,OAAO;AACN,aAAO;AAAA,IACR;AAAA,EACD;AAAA,EAEA,OAAO,UAAU,GAAG,GAAG;AACtB,QAAI,MAAM,MAAM;AACf,aAAO;AAAA,IACR;AACA,QAAI,MAAM,MAAM;AACf,aAAO;AAAA,IACR;AACA,QAAI,MAAM,gBAAgB,QAAQ,MAAM,gBAAgB,MAAM;AAC7D,aAAO,gBAAgB;AAAA,IACxB;AACA,UAAM,SAAS,IAAI,GAAG,GAAG,CAAC;AAC1B,QAAI,OAAO,MAAM,WAAW,GAAG;AAC9B,aAAO,OAAO,MAAM;AAAA,IACrB,OAAO;AACN,aAAO;AAAA,IACR;AAAA,EACD;AACD;AAIA,IAAM,MAAN,cAAkB,gBAAgB;AAAA,EAKjC,YAAY,GAAG,GAAG;AACjB,UAAM;AACN,UAAM,WAAW,IAAI,QAAQ;AAC7B,QAAI,aAAa,KAAK;AACrB,QAAE,MAAM,IAAI,SAAS,GAAG;AACvB,iBAAS,IAAI,CAAC;AAAA,MACf,CAAC;AAAA,IACF,OAAO;AACN,eAAS,IAAI,CAAC;AAAA,IACf;AACA,QAAI,aAAa,KAAK;AACrB,QAAE,MAAM,IAAI,SAAS,GAAG;AACvB,iBAAS,IAAI,CAAC;AAAA,MACf,CAAC;AAAA,IACF,OAAO;AACN,eAAS,IAAI,CAAC;AAAA,IACf;AACA,UAAM,uBAAuB,2BAA2B,QAAQ;AAChE,QAAI,qBAAqB,SAAS,GAAG;AAEpC,UAAI,UAAU;AACd,2BAAqB,IAAK,SAAS,GAAG;AACrC,YAAG,YAAU,QAAQ,EAAE,aAAW,QAAQ,YAAY;AACrD,oBAAU;AAAA,QACX;AAAA,MACD,CAAC;AACD,eAAS,IAAI,OAAO;AAAA,IACrB;AACA,SAAK,QAAQ,MAAM,KAAK,SAAS,OAAO,CAAC;AAAA,EAC1C;AAAA,EAEA,OAAO,OAAO;AACb,QAAI,SAAS,OAAO;AACnB,aAAO;AAAA,IACR,WAAW,EAAE,iBAAiB,MAAM;AACnC,aAAO;AAAA,IACR,OAAO;AACN,aAAO,YAAY,KAAK,OAAO,MAAM,KAAK;AAAA,IAC3C;AAAA,EACD;AAAA,EAEA,eAAe,MAAM;AACpB,SAAK,OAAO,KAAK,OAAO,KAAK;AAAA,EAC9B;AAAA,EASA,SAAS,QAAQ,cAAc;AAC9B,aAAS,IAAI,GAAG,IAAI,KAAK,MAAM,QAAQ,KAAK;AAC3C,UAAI,CAAC,KAAK,MAAM,GAAG,SAAS,QAAQ,YAAY,GAAG;AAClD,eAAO;AAAA,MACR;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EAEA,eAAe,QAAQ,cAAc;AACpC,QAAI,UAAU;AACd,UAAM,WAAW,CAAC;AAClB,aAAS,IAAI,GAAG,IAAI,KAAK,MAAM,QAAQ,KAAK;AAC3C,YAAM,UAAU,KAAK,MAAM;AAC3B,YAAM,YAAY,QAAQ,eAAe,QAAQ,YAAY;AAC7D,iBAAY,cAAc;AAC1B,UAAI,cAAc,MAAM;AAEvB,eAAO;AAAA,MACR,WAAW,cAAc,gBAAgB,MAAM;AAE9C,iBAAS,KAAK,SAAS;AAAA,MACxB;AAAA,IACD;AACA,QAAI,CAAC,SAAS;AACb,aAAO;AAAA,IACR;AACA,QAAI,SAAS,WAAW,GAAG;AAE1B,aAAO,gBAAgB;AAAA,IACxB;AACA,QAAI,SAAS;AACb,aAAS,IAAI,SAAS,GAAG;AACxB,eAAS,WAAW,OAAO,IAAI,gBAAgB,WAAW,QAAQ,CAAC;AAAA,IACpE,CAAC;AACD,WAAO;AAAA,EACR;AAAA,EAEA,WAAW;AACV,UAAM,IAAI,KAAK,MAAM,IAAI,OAAK,EAAE,SAAS,CAAC;AAC1C,YAAQ,EAAE,SAAS,IAAI,EAAE,MAAM,CAAC,IAAI,GAAG,KAAK,IAAI;AAAA,EACjD;AACD;AAGA,IAAM,KAAN,cAAiB,gBAAgB;AAAA,EAKhC,YAAY,GAAG,GAAG;AACjB,UAAM;AACN,UAAM,WAAW,IAAI,QAAQ;AAC7B,QAAI,aAAa,IAAI;AACpB,QAAE,MAAM,IAAI,SAAS,GAAG;AACvB,iBAAS,IAAI,CAAC;AAAA,MACf,CAAC;AAAA,IACF,OAAO;AACN,eAAS,IAAI,CAAC;AAAA,IACf;AACA,QAAI,aAAa,IAAI;AACpB,QAAE,MAAM,IAAI,SAAS,GAAG;AACvB,iBAAS,IAAI,CAAC;AAAA,MACf,CAAC;AAAA,IACF,OAAO;AACN,eAAS,IAAI,CAAC;AAAA,IACf;AAEA,UAAM,uBAAuB,2BAA2B,QAAQ;AAChE,QAAI,qBAAqB,SAAS,GAAG;AAEpC,YAAM,IAAI,qBAAqB,KAAK,SAASA,IAAGC,IAAG;AAClD,eAAOD,GAAE,UAAUC,EAAC;AAAA,MACrB,CAAC;AACD,YAAM,UAAU,EAAE,EAAE,SAAO;AAC3B,eAAS,IAAI,OAAO;AAAA,IACrB;AACA,SAAK,QAAQ,MAAM,KAAK,SAAS,OAAO,CAAC;AAAA,EAC1C;AAAA,EAEA,OAAO,OAAO;AACb,QAAI,SAAS,OAAO;AACnB,aAAO;AAAA,IACR,WAAW,EAAE,iBAAiB,KAAK;AAClC,aAAO;AAAA,IACR,OAAO;AACN,aAAO,YAAY,KAAK,OAAO,MAAM,KAAK;AAAA,IAC3C;AAAA,EACD;AAAA,EAEA,eAAe,MAAM;AACpB,SAAK,OAAO,KAAK,OAAO,IAAI;AAAA,EAC7B;AAAA,EAOA,SAAS,QAAQ,cAAc;AAC9B,aAAS,IAAI,GAAG,IAAI,KAAK,MAAM,QAAQ,KAAK;AAC3C,UAAI,KAAK,MAAM,GAAG,SAAS,QAAQ,YAAY,GAAG;AACjD,eAAO;AAAA,MACR;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EAEA,eAAe,QAAQ,cAAc;AACpC,QAAI,UAAU;AACd,UAAM,WAAW,CAAC;AAClB,aAAS,IAAI,GAAG,IAAI,KAAK,MAAM,QAAQ,KAAK;AAC3C,YAAM,UAAU,KAAK,MAAM;AAC3B,YAAM,YAAY,QAAQ,eAAe,QAAQ,YAAY;AAC7D,iBAAY,cAAc;AAC1B,UAAI,cAAc,gBAAgB,MAAM;AAEvC,eAAO,gBAAgB;AAAA,MACxB,WAAW,cAAc,MAAM;AAE9B,iBAAS,KAAK,SAAS;AAAA,MACxB;AAAA,IACD;AACA,QAAI,CAAC,SAAS;AACb,aAAO;AAAA,IACR;AACA,QAAI,SAAS,WAAW,GAAG;AAE1B,aAAO;AAAA,IACR;AACA,UAAM,SAAS;AACf,aAAS,IAAI,SAAS,GAAG;AACxB,aAAO,WAAW,OAAO,IAAI,gBAAgB,UAAU,QAAQ,CAAC;AAAA,IACjE,CAAC;AACD,WAAO;AAAA,EACR;AAAA,EAEA,WAAW;AACV,UAAM,IAAI,KAAK,MAAM,IAAI,OAAK,EAAE,SAAS,CAAC;AAC1C,YAAQ,EAAE,SAAS,IAAI,EAAE,MAAM,CAAC,IAAI,GAAG,KAAK,IAAI;AAAA,EACjD;AACD;AAEA,SAAS,2BAA2B,KAAK;AACxC,QAAM,SAAS,CAAC;AAChB,MAAI,OAAO,EAAE,IAAK,SAAS,SAAS;AACnC,QAAI,mBAAmB,gBAAgB,qBAAqB;AAC3D,aAAO,KAAK,OAAO;AAAA,IACpB;AAAA,EACD,CAAC;AACD,SAAO;AACR;;;AC1SA,SAAS,YAAY,QAAQ,OAAO;AACnC,MAAG,WAAS,MAAM;AACjB,UAAM,SAAS,EAAE,OAAM,MAAM,KAAI,MAAM,SAAQ,MAAM,iBAAgB,KAAK;AAC1E,QAAG,OAAO;AACT,aAAO,0BAA0B;AAAA,IAClC;AACA,WAAO;AAAA,EACR,OAAO;AACN,UAAM,QAAQ,CAAC;AACf,UAAM,QAAQ,OAAO,SAAS;AAC9B,UAAM,MAAO,OAAO,QAAQ,SAAa,OAAO,OAAO;AACvD,UAAM,UAAU,OAAO,WAAW;AAClC,UAAM,kBAAkB,OAAO,mBAAmB;AAClD,QAAG,OAAO;AACT,YAAM,0BAA0B,OAAO,2BAA2B;AAClE,YAAM,6BAA6B,OAAO,8BAA8B;AAAA,IACzE;AACA,WAAO;AAAA,EACR;AACD;AAEA,IAAqB,YAArB,MAA+B;AAAA,EAS3B,YAAY,QAAQ,QAAQ;AACxB,SAAK,aAAa,QAAQ,MAAM;AAChC,aAAS,YAAY,MAAM;AAC3B,aAAS,YAAY,QAAQ,IAAI;AAEjC,SAAK,QAAQ,OAAO,UAAQ,OAAO,OAAO,QAAQ,OAAO;AAEzD,SAAK,MAAM,OAAO,QAAM,OAAO,OAAO,MAAM,OAAO;AAMnD,SAAK,UAAU,OAAO,YAAU,OAAO,OAAO,UAAU,OAAO;AAC/D,SAAK,kBAAkB,OAAO,oBAAkB,OAAO,OAAO,kBACzD,OAAO,oBAAkB,OAAO,OAAO,kBAAkB,gBAAgB;AAY9E,SAAK,0BAA0B,OAAO;AACtC,SAAK,6BAA6B,OAAO;AAAA,EAC7C;AAAA,EAEA,aAAa,QAAQ,QAAQ;AACzB,SAAI,OAAO,YAAU,QAAQ,OAAO,YAAU,YACrC,WAAS,QAAQ,OAAO,YAAU,QAAQ,OAAO,YAAU,SAAY;AAC5E,WAAK,UAAU;AAAA,IACnB;AAAA,EACJ;AAAA,EAEA,WAAW;AACP,UAAM,OAAO,IAAI,SAAS;AAC1B,SAAK,eAAe,IAAI;AACxB,WAAO,KAAK,OAAO;AAAA,EACvB;AAAA,EAEA,eAAe,MAAM;AACjB,SAAK,OAAO,KAAK,MAAM,aAAa,KAAK,KAAK,KAAK,SAAS,KAAK,eAAe;AAAA,EACpF;AAAA,EAOA,OAAO,OAAO;AACV,QAAI,SAAS,OAAO;AAChB,aAAO;AAAA,IACX,WAAW,EAAG,iBAAiB,YAAY;AACvC,aAAO;AAAA,IACX,OAAO;AACH,aAAO,KAAK,MAAM,gBAAc,MAAM,MAAM,eACxC,KAAK,QAAM,MAAM,QAChB,KAAK,YAAU,OAAO,MAAM,YAAU,OAAO,KAAK,QAAQ,OAAO,MAAM,OAAO,MAC/E,KAAK,gBAAgB,OAAO,MAAM,eAAe,KACjD,KAAK,+BAA6B,MAAM;AAAA,IAChD;AAAA,EACJ;AAAA,EAEA,uBAAuB;AACnB,UAAM,OAAO,IAAI,SAAS;AAC1B,SAAK,OAAO,KAAK,MAAM,aAAa,KAAK,KAAK,KAAK,eAAe;AAClE,WAAO,KAAK,OAAO;AAAA,EACvB;AAAA,EAEA,mBAAmB,OAAO;AACtB,QAAI,SAAS,OAAO;AAChB,aAAO;AAAA,IACX,WAAW,EAAG,iBAAiB,YAAY;AACvC,aAAO;AAAA,IACX,OAAO;AACH,aAAO,KAAK,MAAM,gBAAc,MAAM,MAAM,eACxC,KAAK,QAAM,MAAM,OACjB,KAAK,gBAAgB,OAAO,MAAM,eAAe;AAAA,IACzD;AAAA,EACJ;AAAA,EAEA,WAAW;AACP,WAAO,MAAM,KAAK,QAAQ,MAAM,KAAK,OAChC,KAAK,YAAU,OAAO,OAAO,KAAK,QAAQ,SAAS,IAAI,MAAM,OAC7D,KAAK,oBAAoB,gBAAgB,OACjC,MAAM,KAAK,gBAAgB,SAAS,IACnC,OACT,KAAK,0BAAwB,IACrB,SAAS,KAAK,0BACb,MAAM;AAAA,EACxB;AACJ;;;AChIA,IAAqB,WAArB,MAA8B;AAAA,EAE1B,YAAY,OAAO,MAAM;AACrB,SAAK,QAAQ;AACb,SAAK,OAAO;AAAA,EAChB;AAAA,EAEA,QAAQ;AACJ,WAAO,IAAI,SAAS,KAAK,OAAO,KAAK,IAAI;AAAA,EAC7C;AAAA,EAEA,SAAS,MAAM;AACX,WAAO,QAAQ,KAAK,SAAS,OAAO,KAAK;AAAA,EAC7C;AAAA,EAEA,WAAW;AACP,QAAG,KAAK,UAAQ,KAAK,OAAK,GAAG;AACzB,aAAO,KAAK,MAAM,SAAS;AAAA,IAC/B,OAAO;AACH,aAAO,KAAK,MAAM,SAAS,IAAI,QAAQ,KAAK,OAAK,GAAG,SAAS;AAAA,IACjE;AAAA,EACJ;AAAA,EAEA,IAAI,SAAQ;AACR,WAAO,KAAK,OAAO,KAAK;AAAA,EAC5B;AACJ;AAEA,SAAS,mBAAmB,IAAI,SAAS,IAAI,EAAE;;;ACzB/C,IAAqB,cAArB,MAAiC;AAAA,EAChC,cAAc;AACb,SAAK,YAAY;AACjB,SAAK,WAAW;AAAA,EACjB;AAAA,EAEA,MAAM,GAAG;AACR,QAAI,KAAK,cAAc,QAAQ,KAAK,UAAU,WAAS,GAAG;AACzD,aAAO,MAAM;AAAA,IACd,OAAO;AACN,aAAO,KAAK,UAAU,GAAG;AAAA,IAC1B;AAAA,EACD;AAAA,EAEA,OAAO,GAAG;AACT,SAAK,YAAY,IAAI,SAAS,GAAG,IAAI,CAAC,CAAC;AAAA,EACxC;AAAA,EAEA,SAAS,GAAG,GAAG;AACd,SAAK,YAAY,IAAI,SAAS,GAAG,IAAI,CAAC,CAAC;AAAA,EACxC;AAAA,EAEA,YAAY,OAAO;AAClB,QAAI,KAAK,cAAc,MAAM;AAC5B,WAAK,YAAY,CAAC;AAClB,WAAK,UAAU,KAAK,MAAM,MAAM,CAAC;AAAA,IAClC,OAAO;AAEN,eAAS,MAAM,GAAG,MAAM,KAAK,UAAU,QAAQ,OAAO;AACrD,cAAM,WAAW,KAAK,UAAU;AAEhC,YAAI,MAAM,OAAO,SAAS,OAAO;AAChC,eAAK,UAAU,OAAO,KAAK,GAAG,KAAK;AACnC;AAAA,QACD,WAES,MAAM,SAAS,SAAS,OAAO;AACvC,eAAK,UAAU,OAAO,IAAI,SAAS,MAAM,OAAO,SAAS,IAAI;AAC7D;AAAA,QACD,WAES,MAAM,SAAS,SAAS,MAAM;AACtC,eAAK,UAAU,OAAO,IAAI,SAAS,KAAK,IAAI,SAAS,OAAO,MAAM,KAAK,GAAG,KAAK,IAAI,SAAS,MAAM,MAAM,IAAI,CAAC;AAC7G,eAAK,OAAO,GAAG;AACf;AAAA,QACD;AAAA,MACD;AAEA,WAAK,UAAU,KAAK,MAAM,MAAM,CAAC;AAAA,IAClC;AAAA,EACD;AAAA,EAEA,OAAO,OAAO;AACb,QAAI,MAAM,cAAc,MAAM;AAC7B,YAAM,UAAU,QAAS,WAAS,KAAK,YAAY,KAAK,GAAG,IAAI;AAAA,IAChE;AACA,WAAO;AAAA,EACR;AAAA,EAEA,OAAO,KAAK;AAEX,QAAI,MAAM,KAAK,UAAU,SAAS,GAAG;AACpC,YAAM,UAAU,KAAK,UAAU;AAC/B,YAAM,OAAO,KAAK,UAAU,MAAM;AAElC,UAAI,QAAQ,QAAQ,KAAK,MAAM;AAC9B,aAAK,UAAU,OAAO,MAAM,GAAG,CAAC;AAChC,aAAK,OAAO,GAAG;AAAA,MAChB,WAAW,QAAQ,QAAQ,KAAK,OAAO;AACtC,aAAK,UAAU,OAAO,IAAI,SAAS,QAAQ,OAAO,KAAK,IAAI;AAC3D,aAAK,UAAU,OAAO,MAAM,GAAG,CAAC;AAAA,MACjC;AAAA,IACD;AAAA,EACD;AAAA,EAEA,WAAW,OAAO,MAAM;AACvB,UAAM,SAAS,IAAI,YAAY;AAC/B,WAAO,YAAY,IAAI,SAAS,OAAO,OAAO,CAAC,CAAC;AAChD,QAAG,KAAK,cAAc;AACrB,WAAK,UAAU,QAAQ,cAAY,OAAO,YAAY,QAAQ,CAAC;AAChE,WAAO;AAAA,EACR;AAAA,EAEA,SAAS,MAAM;AACd,QAAI,KAAK,cAAc,MAAM;AAC5B,aAAO;AAAA,IACR,OAAO;AACN,eAAS,IAAI,GAAG,IAAI,KAAK,UAAU,QAAQ,KAAK;AAC/C,YAAG,KAAK,UAAU,GAAG,SAAS,IAAI,GAAG;AACpC,iBAAO;AAAA,QACR;AAAA,MACD;AACA,aAAO;AAAA,IACR;AAAA,EACD;AAAA,EAEA,YAAY,UAAU;AACrB,QAAG,SAAS,UAAQ,SAAS,OAAK,GAAG;AACpC,WAAK,UAAU,SAAS,KAAK;AAAA,IAC9B,WAAW,KAAK,cAAc,MAAM;AACnC,UAAI,MAAM;AACV,eAAQ,IAAE,GAAG,IAAE,KAAK,UAAU,QAAQ,KAAK;AAC1C,cAAM,WAAW,KAAK,UAAU;AAEhC,YAAI,SAAS,QAAM,SAAS,OAAO;AAClC;AAAA,QACD,WAEQ,SAAS,QAAM,SAAS,SAAS,SAAS,OAAK,SAAS,MAAM;AACrE,eAAK,UAAU,OAAO,IAAI,SAAS,SAAS,OAAO,SAAS,KAAK;AACjE,gBAAM,IAAI,IAAI,SAAS,SAAS,MAAM,SAAS,IAAI;AACnD,eAAK,UAAU,OAAO,KAAK,GAAG,CAAC;AAC/B;AAAA,QACD,WAEQ,SAAS,SAAO,SAAS,SAAS,SAAS,QAAM,SAAS,MAAM;AACvE,eAAK,UAAU,OAAO,KAAK,CAAC;AAC5B,gBAAM,MAAM;AAAA,QACb,WAEQ,SAAS,QAAM,SAAS,MAAM;AACrC,eAAK,UAAU,OAAO,IAAI,SAAS,SAAS,OAAO,SAAS,KAAK;AAAA,QAClE,WAEQ,SAAS,OAAK,SAAS,MAAM;AACpC,eAAK,UAAU,OAAO,IAAI,SAAS,SAAS,MAAM,SAAS,IAAI;AAAA,QAChE;AACA,eAAO;AAAA,MACR;AAAA,IACD;AAAA,EACD;AAAA,EAEA,UAAU,OAAO;AAChB,QAAI,KAAK,cAAc,MAAM;AAC5B,eAAS,IAAI,GAAG,IAAI,KAAK,UAAU,QAAQ,KAAK;AAC/C,cAAM,WAAW,KAAK,UAAU;AAEhC,YAAI,QAAQ,SAAS,OAAO;AAC3B;AAAA,QACD,WAES,UAAU,SAAS,SAAS,UAAU,SAAS,OAAO,GAAG;AACjE,eAAK,UAAU,OAAO,GAAG,CAAC;AAC1B;AAAA,QACD,WAES,UAAU,SAAS,OAAO;AAClC,eAAK,UAAU,KAAK,IAAI,SAAS,SAAS,QAAQ,GAAG,SAAS,IAAI;AAClE;AAAA,QACD,WAES,UAAU,SAAS,OAAO,GAAG;AACrC,eAAK,UAAU,KAAK,IAAI,SAAS,SAAS,OAAO,SAAS,OAAO,CAAC;AAClE;AAAA,QACD,WAES,QAAQ,SAAS,OAAO,GAAG;AACnC,gBAAM,UAAU,IAAI,SAAS,SAAS,OAAO,KAAK;AAClD,mBAAS,QAAQ,QAAQ;AACzB,eAAK,UAAU,OAAO,GAAG,GAAG,OAAO;AACnC;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAAA,EAEA,SAAS,cAAc,eAAe,cAAc;AACnD,mBAAe,gBAAgB;AAC/B,oBAAgB,iBAAiB;AACjC,mBAAe,gBAAgB;AAC/B,QAAI,KAAK,cAAc,MAAM;AAC5B,aAAO;AAAA,IACR,WAAU,iBAAe,QAAQ,kBAAgB,MAAM;AACtD,aAAO,KAAK,cAAc,cAAc,aAAa;AAAA,IACtD,WAAU,cAAc;AACvB,aAAO,KAAK,aAAa;AAAA,IAC1B,OAAO;AACN,aAAO,KAAK,cAAc;AAAA,IAC3B;AAAA,EACD;AAAA,EAEA,eAAe;AACd,UAAM,QAAQ,CAAC;AACf,aAAS,IAAI,GAAG,IAAI,KAAK,UAAU,QAAQ,KAAK;AAC/C,YAAM,WAAW,KAAK,UAAU;AAChC,UAAG,SAAS,SAAO,SAAS,QAAM,GAAG;AACpC,YAAK,SAAS,UAAQ,MAAM,KAAM;AACjC,gBAAM,KAAK,OAAO;AAAA,QACnB,OAAO;AACN,gBAAM,KAAK,MAAM,OAAO,aAAa,SAAS,KAAK,IAAI,GAAG;AAAA,QAC3D;AAAA,MACD,OAAO;AACN,cAAM,KAAK,MAAM,OAAO,aAAa,SAAS,KAAK,IAAI,SAAS,OAAO,aAAa,SAAS,OAAK,CAAC,IAAI,GAAG;AAAA,MAC3G;AAAA,IACD;AACA,QAAI,MAAM,SAAS,GAAG;AACrB,aAAO,MAAM,MAAM,KAAK,IAAI,IAAI;AAAA,IACjC,OAAO;AACN,aAAO,MAAM;AAAA,IACd;AAAA,EACD;AAAA,EAEA,gBAAgB;AACf,UAAM,QAAQ,CAAC;AACf,aAAS,IAAI,GAAG,IAAI,KAAK,UAAU,QAAQ,KAAK;AAC/C,YAAM,WAAW,KAAK,UAAU;AAChC,UAAG,SAAS,SAAO,SAAS,QAAM,GAAG;AACpC,YAAK,SAAS,UAAQ,MAAM,KAAM;AACjC,gBAAM,KAAK,OAAO;AAAA,QACnB,OAAO;AACN,gBAAM,KAAK,SAAS,MAAM,SAAS,CAAC;AAAA,QACrC;AAAA,MACD,OAAO;AACN,cAAM,KAAK,SAAS,MAAM,SAAS,IAAI,QAAQ,SAAS,OAAK,GAAG,SAAS,CAAC;AAAA,MAC3E;AAAA,IACD;AACA,QAAI,MAAM,SAAS,GAAG;AACrB,aAAO,MAAM,MAAM,KAAK,IAAI,IAAI;AAAA,IACjC,OAAO;AACN,aAAO,MAAM;AAAA,IACd;AAAA,EACD;AAAA,EAEA,cAAc,cAAc,eAAe;AAC1C,UAAM,QAAQ,CAAC;AACf,aAAS,IAAI,GAAG,IAAI,KAAK,UAAU,QAAQ,KAAK;AAC/C,YAAM,WAAW,KAAK,UAAU;AAChC,eAAS,IAAI,SAAS,OAAO,IAAI,SAAS,MAAM,KAAK;AACpD,cAAM,KAAK,KAAK,YAAY,cAAc,eAAe,CAAC,CAAC;AAAA,MAC5D;AAAA,IACD;AACA,QAAI,MAAM,SAAS,GAAG;AACrB,aAAO,MAAM,MAAM,KAAK,IAAI,IAAI;AAAA,IACjC,OAAO;AACN,aAAO,MAAM;AAAA,IACd;AAAA,EACD;AAAA,EAEA,YAAY,cAAc,eAAe,OAAO;AAC/C,QAAI,UAAU,MAAM,KAAK;AACxB,aAAO;AAAA,IACR,WAAW,UAAU,MAAM,SAAS;AACnC,aAAO;AAAA,IACR,OAAO;AACN,aAAO,aAAa,UAAU,cAAc;AAAA,IAC7C;AAAA,EACD;AAAA,EAEA,IAAI,SAAQ;AACX,WAAO,KAAK,UAAU,IAAK,cAAY,SAAS,MAAO,EAAE,OAAO,CAAC,KAAK,QAAQ,MAAM,GAAG;AAAA,EACxF;AACD;;;AClMA,IAAqB,WAArB,MAA8B;AAAA,EAC1B,cAAc;AAEV,SAAK,MAAM;AACX,SAAK,cAAc,SAAS;AAC5B,SAAK,YAAY;AACjB,SAAK,YAAY;AACjB,SAAK,yBAAyB;AAE9B,SAAK,cAAc,CAAC;AAEpB,SAAK,sBAAsB;AAAA,EAC/B;AAAA,EAEA,WAAW;AACP,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,OAAO,OAAO;AACV,QAAI,iBAAiB,UAAU;AAC3B,aAAO,KAAK,gBAAc,MAAM;AAAA,IACpC,OAAO;AACH,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEA,uBAAuB;AACnB,WAAO;AAAA,EACX;AAAA,EAEA,cAAc,OAAO,OAAO;AACxB,QAAG,UAAQ,QAAW;AAClB,cAAQ;AAAA,IACZ;AACA,QAAI,KAAK,YAAY,WAAS,GAAG;AAC7B,WAAK,yBAAyB,MAAM;AAAA,IACxC,WAAU,KAAK,2BAA2B,MAAM,WAAW;AACvD,WAAK,yBAAyB;AAAA,IAClC;AACA,QAAI,UAAQ,IAAI;AACZ,WAAK,YAAY,KAAK,KAAK;AAAA,IAC/B,OAAO;AACH,WAAK,YAAY,OAAO,OAAO,GAAG,KAAK;AAAA,IAC3C;AAAA,EACJ;AACJ;AAGA,SAAS,eAAe;AACxB,SAAS,QAAQ;AACjB,SAAS,aAAa;AACtB,SAAS,cAAc;AACvB,SAAS,mBAAmB;AAC5B,SAAS,mBAAmB;AAC5B,SAAS,cAAc;AACvB,SAAS,YAAY;AACrB,SAAS,YAAY;AACrB,SAAS,iBAAiB;AAC1B,SAAS,kBAAkB;AAC3B,SAAS,iBAAiB;AAC1B,SAAS,WAAW;AAEpB,SAAS,qBAAqB;AAAA,EAClB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAW;AAEvB,SAAS,uBAAuB;;;AClIhC,IAAqB,gBAArB,cAA2C,SAAS;AAAA,EAChD,cAAc;AACV,UAAM;AACN,SAAK,YAAY,SAAS;AAC1B,WAAO;AAAA,EACX;AACJ;;;ACAA,IAAqB,aAArB,MAAgC;AAAA,EAC5B,YAAY,QAAQ;AAEhB,QAAI,WAAS,UAAa,WAAS,MAAM;AACrC,YAAM;AAAA,IACV;AACA,SAAK,SAAS;AAEd,SAAK,YAAY;AACjB,SAAK,QAAQ;AAAA,EACjB;AACJ;AAIA,WAAW,UAAU;AACrB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAElB,WAAW,YAAY;AACvB,WAAW,OAAO;AAClB,WAAW,SAAS;AAEpB,WAAW,MAAM;AACjB,WAAW,UAAU;AACrB,WAAW,WAAW;AACtB,WAAW,aAAa;AAExB,WAAW,qBAAqB;AAAA,EACpB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ;AAER,WAAW,qBAAqB;AAAA,EACxB,mBAAmB,WAAW;AAAA,EAC9B,iBAAiB,WAAW;AAAA,EAC5B,gBAAgB,WAAW;AAAA,EAC3B,qBAAqB,WAAW;AAAA,EAChC,gBAAgB,WAAW;AAAA,EAC3B,kBAAkB,WAAW;AAAA,EAC7B,eAAe,WAAW;AAAA,EAC1B,kBAAkB,WAAW;AAAA,EAC7B,oBAAoB,WAAW;AAAA,EAC/B,+BAA+B,WAAW;AAC9C;;;ACjEJ,IAAqB,iBAArB,cAA4C,WAAW;AAAA,EACnD,YAAY,WAAW,WAAW,YAAY,aAAa;AACvD,UAAM,SAAS;AAEf,SAAK,YAAY;AACjB,SAAK,aAAa;AAElB,SAAK,cAAc;AACnB,SAAK,oBAAoB,WAAW;AACpC,SAAK,YAAY;AAAA,EACrB;AAAA,EAEA,QAAQ,QAAQ,gBAAgB,gBAAgB;AAC5C,WAAO;AAAA,EACX;AACJ;;;ACZA,IAAqB,gBAArB,cAA2C,WAAW;AAAA,EAClD,YAAY,QAAQ,KAAK;AACrB,UAAM,MAAM;AACZ,SAAK,oBAAoB,WAAW;AACpC,QAAI,QAAO,UAAa,QAAO,MAAM;AACjC,WAAK,QAAQ;AAAA,IACjB,OAAO;AACH,WAAK,QAAQ,IAAI,YAAY;AAC7B,WAAK,MAAM,OAAO,MAAM,YAAY;AAAA,IACxC;AAAA,EACJ;AAAA,EAEA,QAAQ,QAAQ,gBAAgB,gBAAgB;AAC5C,WAAO,KAAK,MAAM,SAAS,MAAM;AAAA,EACrC;AAAA,EAEA,WAAW;AACP,WAAO,KAAK,MAAM,SAAS;AAAA,EAC/B;AACJ;;;ACrBA,IAAqB,mBAArB,cAA8C,cAAc;AAAA,EACxD,YAAY,QAAQ,KAAK;AACrB,UAAM,QAAQ,GAAG;AACjB,SAAK,oBAAoB,WAAW;AAAA,EACxC;AAAA,EAEA,QAAQ,QAAQ,gBAAgB,gBAAgB;AAC5C,WAAO,UAAU,kBAAkB,UAAU,kBACzC,CAAC,MAAM,QAAQ,QAAQ,gBAAgB,cAAc;AAAA,EAC7D;AAAA,EAEA,WAAW;AACP,WAAO,MAAM,MAAM,SAAS;AAAA,EAChC;AACJ;;;ACfA,IAAqB,qBAArB,cAAgD,WAAW;AAAA,EACvD,YAAY,QAAQ;AAChB,UAAM,MAAM;AACZ,SAAK,oBAAoB,WAAW;AAAA,EACxC;AAAA,EAEA,QAAQ,QAAQ,gBAAgB,gBAAgB;AAC5C,WAAO,UAAU,kBAAkB,UAAU;AAAA,EACjD;AAAA,EAEA,WAAW;AACP,WAAO;AAAA,EACX;AACJ;;;ACbA,IAAqB,8BAArB,cAAyD,WAAW;AAAA,EAChE,YAAY,QAAQ;AAChB,UAAM,MAAM;AAAA,EAChB;AACJ;;;ACDA,IAAqB,OAArB,MAA0B;AAAC;;;ACH3B,IAAqB,aAArB,cAAwC,KAAK;AAC7C;;;ACDA,IAAqB,YAArB,cAAuC,WAAW;AAClD;;;ACDA,IAAqB,WAArB,cAAsC,UAAU;AAAA,EAE5C,iBAAgB;AACZ,UAAM,IAAI,MAAM,kCAAkC;AAAA,EACtD;AACJ;;;ACLA,IAAqB,eAArB,cAA0C,UAAU;AACpD;;;ACDA,IAAqB,YAArB,cAAuC,aAAa;AACpD;;;ACHe,SAAR,iBAAkC,GAAG,cAAc;AACtD,MAAI,EAAE,QAAQ,OAAO,KAAK,EACrB,QAAQ,OAAO,KAAK,EACpB,QAAQ,OAAO,KAAK;AACzB,MAAI,cAAc;AACd,QAAI,EAAE,QAAQ,MAAM,MAAQ;AAAA,EAChC;AACA,SAAO;AACX;;;ACAA,IAAM,QAAQ;AAAA,EAMV,cAAc,SAAS,MAAM,WAAW,OAAO;AAC3C,gBAAY,aAAa;AACzB,YAAQ,SAAS;AACjB,QAAG,UAAQ,MAAM;AACb,kBAAY,MAAM;AAAA,IACtB;AACA,QAAI,IAAI,MAAM,YAAY,MAAM,SAAS;AACzC,QAAI,iBAAiB,GAAG,KAAK;AAC7B,UAAM,IAAI,KAAK,cAAc;AAC7B,QAAG,MAAI,GAAG;AACN,aAAO;AAAA,IACX;AACA,QAAI,MAAM,MAAM,IAAI;AACpB,QAAG,IAAE,GAAG;AACJ,UAAI,MAAM,aAAa,KAAK,SAAS,CAAC,GAAG,SAAS;AAClD,YAAM,IAAI,OAAO,CAAC;AAAA,IACtB;AACA,aAAQ,IAAE,GAAE,IAAE,GAAE,KAAK;AACjB,UAAI,MAAM,aAAa,KAAK,SAAS,CAAC,GAAG,SAAS;AAClD,YAAM,IAAI,OAAO,MAAM,CAAC;AAAA,IAC5B;AACA,UAAM,IAAI,OAAO,GAAG;AACpB,WAAO;AAAA,EACX;AAAA,EAEA,aAAa,SAAS,GAAG,WAAW,OAAO;AACvC,gBAAY,aAAa;AACzB,YAAQ,SAAS;AACjB,QAAG,UAAQ,MAAM;AACb,kBAAY,MAAM;AAAA,IACtB;AACA,QAAG,cAAY,MAAM;AACjB,UAAI,aAAa,UAAU;AACvB,cAAM,UAAU,EAAE,eAAe;AACjC,cAAM,YAAY,QAAQ,aAAa;AAEvC,YAAK,aAAa,GAAI;AAClB,iBAAO,UAAU,EAAE,aAAW,MAAI;AAAA,QACtC;AACA,eAAO,UAAU,EAAE;AAAA,MACvB,WAAY,aAAa,WAAW;AAChC,eAAO,EAAE,SAAS;AAAA,MACtB,WAAU,aAAa,cAAc;AACjC,YAAG,EAAE,WAAS,MAAM;AAChB,iBAAO,EAAE,OAAO;AAAA,QACpB;AAAA,MACJ;AAAA,IACJ;AAEA,UAAM,UAAU,EAAE,WAAW;AAC7B,QAAI,mBAAmB,OAAQ;AAC3B,aAAO,QAAQ;AAAA,IACnB;AACA,WAAO,EAAE,WAAW,EAAE,SAAS;AAAA,EACnC;AAAA,EAKA,aAAa,SAAS,GAAG;AACrB,UAAM,OAAO,CAAC;AACd,aAAQ,IAAE,GAAE,IAAE,EAAE,cAAc,GAAE,KAAK;AACjC,WAAK,KAAK,EAAE,SAAS,CAAC,CAAC;AAAA,IAC3B;AACA,WAAO;AAAA,EACX;AAAA,EAMA,cAAc,SAAS,GAAG;AACtB,QAAI,YAAY,CAAC;AACjB,QAAI,EAAE,UAAU;AAChB,WAAM,MAAI,MAAM;AACZ,kBAAY,CAAC,CAAC,EAAE,OAAO,SAAS;AAChC,UAAI,EAAE,UAAU;AAAA,IACpB;AACA,WAAO;AAAA,EACX;AAAA,EAEA,mBAAmB,SAAS,GAAG,OAAO;AAClC,WAAO,MAAM,aAAa,GAAG,OAAO,IAAI;AAAA,EAC5C;AAAA,EAEA,kBAAkB,SAAS,GAAG,WAAW;AACrC,WAAO,MAAM,aAAa,GAAG,WAAW,KAAK;AAAA,EACjD;AAAA,EAEA,cAAc,SAAS,GAAG,OAAO,YAAY;AACzC,UAAM,QAAQ,CAAC;AACf,UAAM,cAAc,GAAG,OAAO,YAAY,KAAK;AAC/C,WAAO;AAAA,EACX;AAAA,EAEA,eAAe,SAAS,GAAG,OAAO,YAAY,OAAO;AAEjD,QAAG,cAAe,aAAa,cAAe;AAC1C,UAAG,EAAE,OAAO,SAAO,OAAO;AACtB,cAAM,KAAK,CAAC;AAAA,MAChB;AAAA,IACJ,WAAU,CAAC,cAAe,aAAa,UAAW;AAC9C,UAAG,EAAE,cAAY,OAAO;AACpB,cAAM,KAAK,CAAC;AAAA,MAChB;AAAA,IACJ;AAEA,aAAQ,IAAE,GAAE,IAAE,EAAE,cAAc,GAAE,KAAK;AACjC,YAAM,cAAc,EAAE,SAAS,CAAC,GAAG,OAAO,YAAY,KAAK;AAAA,IAC/D;AAAA,EACJ;AAAA,EAEA,aAAa,SAAS,GAAG;AACrB,QAAI,QAAQ,CAAC,CAAC;AACd,aAAQ,IAAE,GAAE,IAAE,EAAE,cAAc,GAAE,KAAK;AACjC,cAAQ,MAAM,OAAO,MAAM,YAAY,EAAE,SAAS,CAAC,CAAC,CAAC;AAAA,IACzD;AACA,WAAO;AAAA,EACX;AACJ;AAEA,IAAO,gBAAQ;;;AClIf,IAAqB,cAArB,cAAyC,SAAS;AAAA,EAqB9C,YAAY,QAAQ,eAAe;AAE/B,UAAM;AACN,SAAK,YAAY,UAAU;AAM3B,SAAK,gBAAgB,iBAAiB;AAAA,EAC1C;AAAA,EAEA,QAAQ;AACJ,QAAI,IAAI;AACR,QAAI,IAAI;AACR,WAAO,MAAM,MAAM;AACf,UAAI,EAAE;AACN,WAAK;AAAA,IACT;AACA,WAAO;AAAA,EACX;AAAA,EAMA,UAAU;AACN,WAAO,KAAK,kBAAkB;AAAA,EAClC;AAAA,EAGA,oBAAoB;AAChB,WAAO,SAAS;AAAA,EACpB;AAAA,EAEA,iBAAiB;AACb,WAAO;AAAA,EACX;AAAA,EAEA,aAAa;AACT,WAAO;AAAA,EACX;AAAA,EAUA,UAAU;AACN,QAAI,KAAK,cAAc,MAAM,GAAG;AAC5B,aAAO;AAAA,IACX,OAAO;AACH,aAAO,KAAK,SAAS,IAAI,SAAU,OAAO;AACtC,eAAO,MAAM,QAAQ;AAAA,MACzB,CAAC,EAAE,KAAK,EAAE;AAAA,IACd;AAAA,EACJ;AAAA,EAUA,eAAe;AAEX,WAAO;AAAA,EACX;AAAA,EASA,aAAa,WAAW;AAAA,EACxB;AAAA,EAEA,SAAS,GAAG;AACR,WAAO;AAAA,EACX;AAAA,EAEA,gBAAgB;AACZ,WAAO;AAAA,EACX;AAAA,EAEA,OAAO,SAAS;AACZ,WAAO,QAAQ,cAAc,IAAI;AAAA,EACrC;AAAA,EAMA,aAAa,WAAW,OAAO;AAC3B,WAAO,cAAM,aAAa,MAAM,WAAW,KAAK;AAAA,EACpD;AAAA,EAEA,SAAS,WAAW,MAAM;AACtB,gBAAY,aAAa;AACzB,WAAO,QAAQ;AACf,QAAI,IAAI;AACR,QAAI,IAAI;AACR,WAAO,MAAM,QAAQ,MAAM,MAAM;AAC7B,UAAI,cAAc,MAAM;AACpB,YAAI,CAAC,EAAE,QAAQ,GAAG;AACd,eAAK,EAAE;AAAA,QACX;AAAA,MACJ,OAAO;AACH,cAAM,KAAK,EAAE;AACb,cAAM,WAAY,MAAM,KAAK,KAAK,UAAU,SAAU,UAAU,MAC1D,KAAK;AACX,aAAK;AAAA,MACT;AACA,UAAI,EAAE,cAAc,SAAS,cAAc,QAAQ,CAAC,EAAE,UAAU,QAAQ,IAAI;AACxE,aAAK;AAAA,MACT;AACA,UAAI,EAAE;AAAA,IACV;AACA,SAAK;AACL,WAAO;AAAA,EACX;AACJ;;;ACzJA,IAAqB,oBAArB,MAAuC;AAAA,EAEtC,YAAY,gBAAgB;AAC3B,SAAK,iBAAiB;AAAA,EACvB;AAAA,EA4BA,UAAU;AACT,WAAO,SAAS,kBAAkB;AAAA,EACnC;AAAA,EAEA,eAAe;AACd,WAAO,KAAK,eAAe,KAAK,SAAS,CAAC,MAAM,kBAAkB;AAAA,EACnE;AAAA,EAEA,WAAW;AACV,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,eAAe,MAAM;AACpB,SAAK,OAAO,KAAK,cAAc;AAAA,EAChC;AACD;AAMA,kBAAkB,QAAQ;AAO1B,kBAAkB,qBAAqB;AAEvC,kBAAkB,kBAAkB;AACpC,kBAAkB,KAAK,kBAAkB;;;AC5DzC,IAAqB,yBAArB,cAAoD,kBAAkB;AAAA,EAElE,YAAY,SAAS,cAAc;AAO/B,UAAM,IAAI,IAAI,SAAS;AACvB,MAAE,OAAO,SAAS,YAAY;AAC9B,UAAM,WAAW,EAAE,OAAO;AAC1B,UAAM,QAAQ;AACd,SAAK,UAAU;AACf,SAAK,eAAe;AACpB,WAAO;AAAA,EACX;AAAA,EAEA,UAAU;AAGN,WAAO,KAAK,aAAa,OAAO,kBAAkB;AAAA,EACtD;AAAA,EAEA,UAAU,OAAO;AACb,WAAO,KAAK,QAAQ;AAAA,EACxB;AAAA,EAEA,eAAe,OAAO;AAClB,WAAO,KAAK,aAAa;AAAA,EAC7B;AAAA,EAEA,OAAO,OAAO;AACV,QAAI,SAAS,OAAO;AAChB,aAAO;AAAA,IACX,WAAW,EAAE,iBAAiB,yBAAyB;AACnD,aAAO;AAAA,IACX,WAAW,KAAK,SAAS,MAAM,MAAM,SAAS,GAAG;AAC7C,aAAO;AAAA,IACX,OAAO;AACH,aAAO,YAAY,KAAK,cAAc,MAAM,YAAY,KACpD,YAAY,KAAK,SAAS,MAAM,OAAO;AAAA,IAC/C;AAAA,EACJ;AAAA,EAEA,WAAW;AACP,QAAI,KAAK,QAAQ,GAAG;AAChB,aAAO;AAAA,IACX,OAAO;AACH,UAAI,IAAI;AACR,eAAS,IAAI,GAAG,IAAI,KAAK,aAAa,QAAQ,KAAK;AAC/C,YAAI,IAAI,GAAG;AACP,cAAI,IAAI;AAAA,QACZ;AACA,YAAI,KAAK,aAAa,OAAO,kBAAkB,oBAAoB;AAC/D,cAAI,IAAI;AACR;AAAA,QACJ;AACA,YAAI,IAAI,KAAK,aAAa;AAC1B,YAAI,KAAK,QAAQ,OAAO,MAAM;AAC1B,cAAI,IAAI,MAAM,KAAK,QAAQ;AAAA,QAC/B,OAAO;AACH,cAAI,IAAI;AAAA,QACZ;AAAA,MACJ;AACA,aAAO,IAAI;AAAA,IACf;AAAA,EACJ;AAAA,EAEA,IAAI,SAAQ;AACR,WAAO,KAAK,aAAa;AAAA,EAC7B;AACJ;;;ACzEA,IAAqB,6BAArB,cAAwD,kBAAkB;AAAA,EAEtE,YAAY,QAAQ,aAAa;AAC7B,QAAI,WAAW;AACf,UAAM,OAAO,IAAI,SAAS;AAC1B,QAAG,WAAW,MAAM;AAChB,WAAK,OAAO,QAAQ,WAAW;AAAA,IACnC,OAAO;AACH,WAAK,OAAO,CAAC;AAAA,IACjB;AACA,eAAW,KAAK,OAAO;AACvB,UAAM,QAAQ;AACd,SAAK,YAAY;AACjB,SAAK,cAAc;AAAA,EACvB;AAAA,EAEA,UAAU,OAAO;AACb,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,eAAe,OAAO;AAClB,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,OAAO,OAAO;AACV,QAAI,SAAS,OAAO;AAChB,aAAO;AAAA,IACX,WAAW,EAAE,iBAAiB,6BAA6B;AACvD,aAAO;AAAA,IACX,WAAW,KAAK,SAAS,MAAM,MAAM,SAAS,GAAG;AAC7C,aAAO;AAAA,IACX,OAAO;AACH,UAAG,KAAK,gBAAgB,MAAM;AAC1B,eAAO;AAAA,eACH,KAAK,aAAW;AACpB,eAAO,MAAM,aAAW;AAAA;AAExB,eAAO,KAAK,UAAU,OAAO,MAAM,SAAS;AAAA,IACpD;AAAA,EACJ;AAAA,EAEA,WAAW;AACP,UAAM,KAAK,KAAK,cAAc,OAAO,KAAK,KAAK,UAAU,SAAS;AAClE,QAAI,GAAG,WAAW,GAAG;AACjB,UAAI,KAAK,gBAAgB,kBAAkB,oBAAoB;AAC3D,eAAO;AAAA,MACX,OAAO;AACH,eAAO,KAAK,KAAK;AAAA,MACrB;AAAA,IACJ,OAAO;AACH,aAAO,KAAK,KAAK,cAAc,MAAM;AAAA,IACzC;AAAA,EACJ;AAAA,EAEA,IAAI,SAAQ;AACR,WAAO;AAAA,EACX;AAAA,EAEA,OAAO,OAAO,QAAQ,aAAa;AAC/B,QAAI,gBAAgB,kBAAkB,sBAAsB,WAAW,MAAM;AAEzE,aAAO,kBAAkB;AAAA,IAC7B,OAAO;AACH,aAAO,IAAI,2BAA2B,QAAQ,WAAW;AAAA,IAC7D;AAAA,EACJ;AACJ;;;AClEA,IAAqB,yBAArB,cAAoD,2BAA2B;AAAA,EAE3E,cAAc;AACV,UAAM,MAAM,kBAAkB,kBAAkB;AAAA,EACpD;AAAA,EAEA,UAAU;AACN,WAAO;AAAA,EACX;AAAA,EAEA,UAAU,OAAO;AACb,WAAO;AAAA,EACX;AAAA,EAEA,eAAe,OAAO;AAClB,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,OAAO,OAAO;AACV,WAAO,SAAS;AAAA,EACpB;AAAA,EAEA,WAAW;AACP,WAAO;AAAA,EACX;AACJ;AAGA,kBAAkB,QAAQ,IAAI,uBAAuB;;;AC5BrD,IAAMC,mBAAkB;AAExB,IAAqB,UAArB,MAA6B;AAAA,EAEzB,YAAY,cAAc,gBAAgB;AACtC,SAAK,OAAO,CAAC;AACb,SAAK,eAAe,gBAAgB;AACpC,SAAK,iBAAiB,kBAAkB;AAAA,EAC5C;AAAA,EAEA,IAAI,KAAK,OAAO;AACZ,UAAM,UAAUA,mBAAkB,KAAK,aAAa,GAAG;AACvD,QAAI,WAAW,KAAK,MAAM;AACtB,YAAM,UAAU,KAAK,KAAK;AAC1B,eAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACrC,cAAM,QAAQ,QAAQ;AACtB,YAAI,KAAK,eAAe,KAAK,MAAM,GAAG,GAAG;AACrC,gBAAM,WAAW,MAAM;AACvB,gBAAM,QAAQ;AACd,iBAAO;AAAA,QACX;AAAA,MACJ;AACA,cAAQ,KAAK,EAAC,KAAS,MAAW,CAAC;AACnC,aAAO;AAAA,IACX,OAAO;AACH,WAAK,KAAK,WAAW,CAAC,EAAC,KAAS,MAAW,CAAC;AAC5C,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEA,YAAY,KAAK;AACb,UAAM,UAAUA,mBAAkB,KAAK,aAAa,GAAG;AACvD,QAAG,WAAW,KAAK,MAAM;AACrB,YAAM,UAAU,KAAK,KAAK;AAC1B,eAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACrC,cAAM,QAAQ,QAAQ;AACtB,YAAI,KAAK,eAAe,KAAK,MAAM,GAAG;AAClC,iBAAO;AAAA,MACf;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EAEA,IAAI,KAAK;AACL,UAAM,UAAUA,mBAAkB,KAAK,aAAa,GAAG;AACvD,QAAG,WAAW,KAAK,MAAM;AACrB,YAAM,UAAU,KAAK,KAAK;AAC1B,eAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACrC,cAAM,QAAQ,QAAQ;AACtB,YAAI,KAAK,eAAe,KAAK,MAAM,GAAG;AAClC,iBAAO,MAAM;AAAA,MACrB;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EAEA,UAAU;AACN,WAAO,OAAO,KAAK,KAAK,IAAI,EAAE,OAAO,SAAO,IAAI,WAAWA,gBAAe,CAAC,EAAE,QAAQ,SAAO,KAAK,KAAK,MAAM,IAAI;AAAA,EACpH;AAAA,EAEA,UAAU;AACN,WAAO,KAAK,QAAQ,EAAE,IAAI,OAAK,EAAE,GAAG;AAAA,EACxC;AAAA,EAEA,YAAY;AACR,WAAO,KAAK,QAAQ,EAAE,IAAI,OAAK,EAAE,KAAK;AAAA,EAC1C;AAAA,EAEA,WAAW;AACP,UAAM,KAAK,KAAK,QAAQ,EAAE,IAAI,OAAK,MAAM,EAAE,MAAM,MAAM,EAAE,QAAQ,GAAG;AACpE,WAAO,MAAM,GAAG,KAAK,IAAI,IAAI;AAAA,EACjC;AAAA,EAEA,IAAI,SAAS;AACT,WAAO,OAAO,KAAK,KAAK,IAAI,EAAE,OAAO,SAAO,IAAI,WAAWA,gBAAe,CAAC,EAAE,IAAI,SAAO,KAAK,KAAK,KAAK,QAAQ,IAAI,EAAE,OAAO,CAAC,OAAO,SAAS,QAAQ,MAAM,CAAC;AAAA,EAChK;AACJ;;;ACpEO,SAAS,iCAAiCC,MAAK,cAAc;AAChE,MAAI,iBAAiB,UAAa,iBAAiB,MAAM;AACrD,mBAAe,YAAY;AAAA,EAC/B;AAGA,MAAI,aAAa,cAAc,QAAQ,iBAAiB,YAAY,OAAO;AACvE,WAAO,kBAAkB;AAAA,EAC7B;AAEA,QAAM,SAAS,iCAAiCA,MAAK,aAAa,SAAS;AAC3E,QAAM,QAAQA,KAAI,OAAO,aAAa;AACtC,QAAM,aAAa,MAAM,YAAY;AACrC,SAAO,2BAA2B,OAAO,QAAQ,WAAW,YAAY,WAAW;AACvF;AAGO,SAAS,2BAA2B,SAAS,cAAc,SAAS;AACvE,MAAI,QAAQ,QAAQ,GAAG;AACnB,WAAO;AAAA,EACX;AACA,MAAI,WAAW,QAAQ,IAAI,OAAO,KAAK;AACvC,MAAI,aAAa,MAAM;AACnB,WAAO;AAAA,EACX;AACA,aAAW,aAAa,IAAI,OAAO;AACnC,MAAI,aAAa,MAAM;AACnB,YAAQ,IAAI,SAAS,QAAQ;AAC7B,WAAO;AAAA,EACX;AACA,MAAI,UAAU;AACd,MAAI,UAAU,CAAC;AACf,WAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACrC,UAAM,SAAS,2BAA2B,QAAQ,UAAU,CAAC,GAAG,cAAc,OAAO;AACrF,QAAI,WAAW,WAAW,QAAQ,UAAU,CAAC,GAAG;AAC5C,UAAI,CAAC,SAAS;AACV,kBAAU,CAAC;AACX,iBAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACrC,kBAAQ,KAAK,QAAQ,UAAU,CAAC;AAAA,QACpC;AACA,kBAAU;AAAA,MACd;AACA,cAAQ,KAAK;AAAA,IACjB;AAAA,EACJ;AACA,MAAI,CAAC,SAAS;AACV,iBAAa,IAAI,OAAO;AACxB,YAAQ,IAAI,SAAS,OAAO;AAC5B,WAAO;AAAA,EACX;AACA,MAAI,UAAU;AACd,MAAI,QAAQ,WAAW,GAAG;AACtB,cAAU,kBAAkB;AAAA,EAChC,WAAW,QAAQ,WAAW,GAAG;AAC7B,cAAU,2BAA2B,OAAO,QAAQ,IAAI,QACnD,eAAe,CAAC,CAAC;AAAA,EAC1B,OAAO;AACH,cAAU,IAAI,uBAAuB,SAAS,QAAQ,YAAY;AAAA,EACtE;AACA,eAAa,IAAI,OAAO;AACxB,UAAQ,IAAI,SAAS,OAAO;AAC5B,UAAQ,IAAI,SAAS,OAAO;AAE5B,SAAO;AACX;AAEO,SAAS,MAAM,GAAG,GAAG,gBAAgB,YAAY;AAEpD,MAAI,MAAM,GAAG;AACT,WAAO;AAAA,EACX;AACA,MAAI,aAAa,8BAA8B,aAAa,4BAA4B;AACpF,WAAO,gBAAgB,GAAG,GAAG,gBAAgB,UAAU;AAAA,EAC3D;AAGA,MAAI,gBAAgB;AAChB,QAAI,aAAa,wBAAwB;AACrC,aAAO;AAAA,IACX;AACA,QAAI,aAAa,wBAAwB;AACrC,aAAO;AAAA,IACX;AAAA,EACJ;AAEA,MAAI,aAAa,4BAA4B;AACzC,QAAI,IAAI,uBAAuB,CAAC,EAAE,UAAU,CAAC,GAAG,CAAC,EAAE,WAAW,CAAC;AAAA,EACnE;AACA,MAAI,aAAa,4BAA4B;AACzC,QAAI,IAAI,uBAAuB,CAAC,EAAE,UAAU,CAAC,GAAG,CAAC,EAAE,WAAW,CAAC;AAAA,EACnE;AACA,SAAO,YAAY,GAAG,GAAG,gBAAgB,UAAU;AACvD;AAuBA,SAAS,YAAY,GAAG,GAAG,gBAAgB,YAAY;AACnD,MAAI,eAAe,MAAM;AACrB,QAAI,WAAW,WAAW,IAAI,GAAG,CAAC;AAClC,QAAI,aAAa,MAAM;AACnB,aAAO;AAAA,IACX;AACA,eAAW,WAAW,IAAI,GAAG,CAAC;AAC9B,QAAI,aAAa,MAAM;AACnB,aAAO;AAAA,IACX;AAAA,EACJ;AAEA,MAAI,IAAI;AACR,MAAI,IAAI;AACR,MAAI,IAAI;AAER,MAAI,qBAAqB,CAAC;AAC1B,MAAI,gBAAgB,CAAC;AAErB,SAAO,IAAI,EAAE,aAAa,UAAU,IAAI,EAAE,aAAa,QAAQ;AAC3D,UAAM,WAAW,EAAE,QAAQ;AAC3B,UAAM,WAAW,EAAE,QAAQ;AAC3B,QAAI,EAAE,aAAa,OAAO,EAAE,aAAa,IAAI;AAEzC,YAAM,UAAU,EAAE,aAAa;AAE/B,YAAM,cAAc,YAAY,kBAAkB,sBAC9C,aAAa,QAAQ,aAAa;AACtC,YAAM,QAAS,aAAa,QAAQ,aAAa,QAAQ,aAAa;AAGtE,UAAI,eAAe,OAAO;AACtB,sBAAc,KAAK;AACnB,2BAAmB,KAAK;AAAA,MAC5B,OAAO;AACH,sBAAc,KAAK,MAAM,UAAU,UAAU,gBAAgB,UAAU;AACvE,2BAAmB,KAAK;AAAA,MAC5B;AACA,WAAK;AACL,WAAK;AAAA,IACT,WAAW,EAAE,aAAa,KAAK,EAAE,aAAa,IAAI;AAC9C,oBAAc,KAAK;AACnB,yBAAmB,KAAK,EAAE,aAAa;AACvC,WAAK;AAAA,IACT,OAAO;AACH,oBAAc,KAAK;AACnB,yBAAmB,KAAK,EAAE,aAAa;AACvC,WAAK;AAAA,IACT;AACA,SAAK;AAAA,EACT;AAEA,MAAI,IAAI,EAAE,aAAa,QAAQ;AAC3B,aAAS,IAAI,GAAG,IAAI,EAAE,aAAa,QAAQ,KAAK;AAC5C,oBAAc,KAAK,EAAE,QAAQ;AAC7B,yBAAmB,KAAK,EAAE,aAAa;AACvC,WAAK;AAAA,IACT;AAAA,EACJ,OAAO;AACH,aAAS,IAAI,GAAG,IAAI,EAAE,aAAa,QAAQ,KAAK;AAC5C,oBAAc,KAAK,EAAE,QAAQ;AAC7B,yBAAmB,KAAK,EAAE,aAAa;AACvC,WAAK;AAAA,IACT;AAAA,EACJ;AAEA,MAAI,IAAI,cAAc,QAAQ;AAC1B,QAAI,MAAM,GAAG;AACT,YAAM,KAAK,2BAA2B;AAAA,QAAO,cAAc;AAAA,QACvD,mBAAmB;AAAA,MAAE;AACzB,UAAI,eAAe,MAAM;AACrB,mBAAW,IAAI,GAAG,GAAG,EAAE;AAAA,MAC3B;AACA,aAAO;AAAA,IACX;AACA,oBAAgB,cAAc,MAAM,GAAG,CAAC;AACxC,yBAAqB,mBAAmB,MAAM,GAAG,CAAC;AAAA,EACtD;AAEA,QAAM,IAAI,IAAI,uBAAuB,eAAe,kBAAkB;AAItE,MAAI,MAAM,GAAG;AACT,QAAI,eAAe,MAAM;AACrB,iBAAW,IAAI,GAAG,GAAG,CAAC;AAAA,IAC1B;AACA,WAAO;AAAA,EACX;AACA,MAAI,MAAM,GAAG;AACT,QAAI,eAAe,MAAM;AACrB,iBAAW,IAAI,GAAG,GAAG,CAAC;AAAA,IAC1B;AACA,WAAO;AAAA,EACX;AACA,uBAAqB,aAAa;AAElC,MAAI,eAAe,MAAM;AACrB,eAAW,IAAI,GAAG,GAAG,CAAC;AAAA,EAC1B;AACA,SAAO;AACX;AAOA,SAAS,qBAAqB,SAAS;AACnC,QAAM,gBAAgB,IAAI,QAAQ;AAElC,WAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACrC,UAAM,SAAS,QAAQ;AACvB,QAAI,CAAE,cAAc,YAAY,MAAM,GAAI;AACtC,oBAAc,IAAI,QAAQ,MAAM;AAAA,IACpC;AAAA,EACJ;AACA,WAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACrC,YAAQ,KAAK,cAAc,IAAI,QAAQ,EAAE;AAAA,EAC7C;AACJ;AAkCA,SAAS,gBAAgB,GAAG,GAAG,gBAAgB,YAAY;AACvD,MAAI,eAAe,MAAM;AACrB,QAAI,WAAW,WAAW,IAAI,GAAG,CAAC;AAClC,QAAI,aAAa,MAAM;AACnB,aAAO;AAAA,IACX;AACA,eAAW,WAAW,IAAI,GAAG,CAAC;AAC9B,QAAI,aAAa,MAAM;AACnB,aAAO;AAAA,IACX;AAAA,EACJ;AAEA,QAAM,YAAY,UAAU,GAAG,GAAG,cAAc;AAChD,MAAI,cAAc,MAAM;AACpB,QAAI,eAAe,MAAM;AACrB,iBAAW,IAAI,GAAG,GAAG,SAAS;AAAA,IAClC;AACA,WAAO;AAAA,EACX;AACA,MAAI,EAAE,gBAAgB,EAAE,aAAa;AACjC,UAAM,SAAS,MAAM,EAAE,WAAW,EAAE,WAAW,gBAAgB,UAAU;AAGzE,QAAI,WAAW,EAAE,WAAW;AACxB,aAAO;AAAA,IACX;AACA,QAAI,WAAW,EAAE,WAAW;AACxB,aAAO;AAAA,IACX;AAKA,UAAM,MAAM,2BAA2B,OAAO,QAAQ,EAAE,WAAW;AACnE,QAAI,eAAe,MAAM;AACrB,iBAAW,IAAI,GAAG,GAAG,GAAG;AAAA,IAC5B;AACA,WAAO;AAAA,EACX,OAAO;AAEH,QAAI,eAAe;AACnB,QAAI,MAAM,KAAM,EAAE,cAAc,QAAQ,EAAE,cAAc,EAAE,WAAY;AAGlE,qBAAe,EAAE;AAAA,IACrB;AACA,QAAI,iBAAiB,MAAM;AAEvB,YAAMC,YAAW,CAAE,EAAE,aAAa,EAAE,WAAY;AAChD,UAAI,EAAE,cAAc,EAAE,aAAa;AAC/B,QAAAA,UAAS,KAAK,EAAE;AAChB,QAAAA,UAAS,KAAK,EAAE;AAAA,MACpB;AACA,YAAMC,WAAU,CAAE,cAAc,YAAa;AAC7C,YAAM,MAAM,IAAI,uBAAuBA,UAASD,SAAQ;AACxD,UAAI,eAAe,MAAM;AACrB,mBAAW,IAAI,GAAG,GAAG,GAAG;AAAA,MAC5B;AACA,aAAO;AAAA,IACX;AAIA,UAAM,WAAW,CAAE,EAAE,aAAa,EAAE,WAAY;AAChD,QAAI,UAAU,CAAE,EAAE,WAAW,EAAE,SAAU;AACzC,QAAI,EAAE,cAAc,EAAE,aAAa;AAC/B,eAAS,KAAK,EAAE;AAChB,eAAS,KAAK,EAAE;AAChB,gBAAU,CAAE,EAAE,WAAW,EAAE,SAAU;AAAA,IACzC;AACA,UAAM,KAAK,IAAI,uBAAuB,SAAS,QAAQ;AACvD,QAAI,eAAe,MAAM;AACrB,iBAAW,IAAI,GAAG,GAAG,EAAE;AAAA,IAC3B;AACA,WAAO;AAAA,EACX;AACJ;AAyCA,SAAS,UAAU,GAAG,GAAG,gBAAgB;AACrC,MAAI,gBAAgB;AAChB,QAAI,MAAM,kBAAkB,OAAO;AAC/B,aAAO,kBAAkB;AAAA,IAC7B;AACA,QAAI,MAAM,kBAAkB,OAAO;AAC/B,aAAO,kBAAkB;AAAA,IAC7B;AAAA,EACJ,OAAO;AACH,QAAI,MAAM,kBAAkB,SAAS,MAAM,kBAAkB,OAAO;AAChE,aAAO,kBAAkB;AAAA,IAC7B,WAAW,MAAM,kBAAkB,OAAO;AACtC,YAAM,WAAW;AAAA,QAAE,EAAE;AAAA,QACjB,kBAAkB;AAAA,MAAmB;AACzC,YAAM,UAAU,CAAE,EAAE,WAAW,IAAK;AACpC,aAAO,IAAI,uBAAuB,SAAS,QAAQ;AAAA,IACvD,WAAW,MAAM,kBAAkB,OAAO;AACtC,YAAM,WAAW,CAAE,EAAE,aAAa,kBAAkB,kBAAmB;AACvE,YAAM,UAAU,CAAE,EAAE,WAAW,IAAK;AACpC,aAAO,IAAI,uBAAuB,SAAS,QAAQ;AAAA,IACvD;AAAA,EACJ;AACA,SAAO;AACX;;;ACjaA,IAAqB,SAArB,MAA4B;AAAA,EAExB,cAAc;AACV,SAAK,OAAO,CAAC;AAAA,EACjB;AAAA,EAEA,IAAI,OAAO;AACP,SAAK,KAAK,SAAS;AAAA,EACvB;AAAA,EAEA,GAAG,KAAK;AACJ,WAAO,KAAK,IAAI,IAAI,EAAE,IAAI,SAAO,KAAK,IAAI,GAAG,GAAG,IAAI;AAAA,EACxD;AAAA,EAEA,OAAO,OAAO;AACV,WAAO,KAAK,KAAK;AAAA,EACrB;AAAA,EAEA,IAAI,OAAO;AACP,WAAO,KAAK,KAAK,WAAW;AAAA,EAChC;AAAA,EAEA,SAAS;AACL,WAAO,OAAO,KAAK,KAAK,IAAI;AAAA,EAChC;AAAA,EAEA,WAAW;AACP,WAAO,KAAK,IAAI,MAAM,MAAM,KAAK,OAAO,CAAC;AAAA,EAC7C;AAAA,EAEA,WAAW;AACP,WAAO,SAAS,UAAU,KAAK,OAAO,CAAC;AAAA,EAC3C;AAAA,EAEA,OAAO,OAAO;AACV,WAAO,iBAAiB,UAAU,YAAY,KAAK,MAAM,MAAM,IAAI;AAAA,EACvE;AAAA,EAEA,WAAW;AACP,WAAO,MAAM,KAAK,OAAO,EAAE,KAAK,IAAI,IAAI;AAAA,EAC5C;AAAA,EAEA,IAAI,SAAQ;AACR,WAAO,KAAK,OAAO,EAAE;AAAA,EACzB;AACJ;;;ACjCA,IAAqB,cAArB,MAAiC;AAAA,EAC7B,YAAYE,MAAK;AACb,SAAK,MAAMA;AAAA,EACf;AAAA,EAYA,qBAAqB,GAAG;AACpB,QAAI,MAAM,MAAM;AACZ,aAAO;AAAA,IACX;AACA,UAAM,QAAQ,EAAE,YAAY;AAC5B,UAAM,OAAO,CAAC;AACd,aAAQ,MAAI,GAAG,MAAK,OAAO,OAAO;AAC9B,WAAK,OAAO,IAAI,YAAY;AAC5B,YAAM,WAAW,IAAI,QAAQ;AAC7B,YAAM,eAAe;AACrB,WAAK;AAAA,QAAM,EAAE,WAAW,GAAG,EAAE;AAAA,QAAQ;AAAA,QAAM,kBAAkB;AAAA,QACvD,KAAK;AAAA,QAAM;AAAA,QAAU,IAAI,OAAO;AAAA,QAAG;AAAA,QAAc;AAAA,MAAK;AAG5D,UAAI,KAAK,KAAK,WAAS,KAAK,KAAK,KAAK,SAAS,YAAY,QAAQ,GAAG;AAClE,aAAK,OAAO;AAAA,MAChB;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EAoBA,KAAK,GAAG,WAAW,KAAK;AACpB,UAAM,IAAI,IAAI,YAAY;AAC1B,UAAM,eAAe;AACrB,UAAM,OAAO;AACb,UAAM,cAAc,QAAM,OAAO,iCAAiC,EAAE,KAAK,GAAG,IAAI;AAChF,SAAK,MAAM,GAAG,WAAW,aAAa,GAAG,IAAI,QAAQ,GAAG,IAAI,OAAO,GAAG,cAAc,IAAI;AACxF,WAAO;AAAA,EACX;AAAA,EAgCA,MAAM,GAAG,WAAY,KAAK,MAAM,UAAU,iBAAiB,cAAc,QAAQ;AAC7E,UAAM,IAAI,IAAI,UAAU,EAAC,OAAM,GAAG,KAAI,GAAG,SAAS,IAAG,GAAG,IAAI;AAC5D,QAAI,SAAS,IAAI,CAAC,GAAG;AACjB;AAAA,IACJ;AACA,aAAS,IAAI,CAAC;AACd,QAAI,MAAM,WAAW;AACjB,UAAI,QAAO,MAAM;AACb,aAAK,OAAO,MAAM,OAAO;AACzB;AAAA,MACJ,WAAW,IAAI,QAAQ,KAAK,QAAQ;AAChC,aAAK,OAAO,MAAM,GAAG;AACrB;AAAA,MACJ;AAAA,IACJ;AACA,QAAI,aAAa,eAAgB;AAC7B,UAAI,QAAO,MAAM;AACb,aAAK,OAAO,MAAM,OAAO;AACzB;AAAA,MACJ,WAAW,IAAI,QAAQ,KAAK,QAAQ;AAChC,aAAK,OAAO,MAAM,GAAG;AACrB;AAAA,MACJ;AACA,UAAI,QAAQ,kBAAkB,OAAO;AACjC,cAAM,UAAU,gBAAgB,IAAI,EAAE,SAAS;AAC/C,YAAI;AACA,0BAAgB,OAAO,EAAE,SAAS;AAElC,mBAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK;AACjC,kBAAM,cAAc,KAAK,IAAI,OAAO,IAAI,eAAe,CAAC;AACxD,iBAAK,MAAM,aAAa,WAAW,IAAI,UAAU,CAAC,GAAG,MAAM,UAAU,iBAAiB,cAAc,MAAM;AAAA,UAC9G;AAAA,QACJ,UAAC;AACG,cAAI,SAAS;AACT,4BAAgB,IAAI,EAAE,SAAS;AAAA,UACnC;AAAA,QACJ;AACA;AAAA,MACJ;AAAA,IACJ;AACA,aAAQ,IAAE,GAAG,IAAE,EAAE,YAAY,QAAQ,KAAK;AACtC,YAAM,IAAI,EAAE,YAAY;AACxB,UAAI,EAAE,gBAAgB,gBAAgB;AAClC,YAAI,gBAAgB,IAAI,EAAE,OAAO,SAAS,GAAG;AACzC;AAAA,QACJ;AACA,cAAM,aAAa,2BAA2B,OAAO,KAAK,EAAE,YAAY,WAAW;AACnF,YAAI;AACA,0BAAgB,IAAI,EAAE,OAAO,SAAS;AACtC,eAAK,MAAM,EAAE,QAAQ,WAAW,YAAY,MAAM,UAAU,iBAAiB,cAAc,MAAM;AAAA,QACrG,UAAE;AACE,0BAAgB,OAAO,EAAE,OAAO,SAAS;AAAA,QAC7C;AAAA,MACJ,WAAW,aAAa,6BAA8B;AAClD,YAAI,cAAc;AACd,eAAK,MAAM,EAAE,QAAQ,WAAW,KAAK,MAAM,UAAU,iBAAiB,cAAc,MAAM;AAAA,QAC9F,OAAO;AACH,eAAK,OAAO,YAAY,QAAQ;AAAA,QACpC;AAAA,MACJ,WAAW,EAAE,WAAW;AACpB,aAAK,MAAM,EAAE,QAAQ,WAAW,KAAK,MAAM,UAAU,iBAAiB,cAAc,MAAM;AAAA,MAC9F,WAAW,EAAE,gBAAgB,oBAAoB;AAC7C,aAAK,SAAU,MAAM,qBAAqB,KAAK,IAAI,YAAa;AAAA,MACpE,OAAO;AACH,YAAI,MAAM,EAAE;AACZ,YAAI,QAAQ,MAAM;AACd,cAAI,aAAa,kBAAkB;AAC/B,kBAAM,IAAI,WAAW,MAAM,qBAAqB,KAAK,IAAI,YAAY;AAAA,UACzE;AACA,eAAK,OAAO,GAAG;AAAA,QACnB;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACJ;AAMA,YAAY,WAAW,MAAM;;;ACvL7B,IAAqB,MAArB,MAAyB;AAAA,EAErB,YAAY,aAAc,cAAc;AAKpC,SAAK,cAAc;AAEnB,SAAK,eAAe;AACpB,SAAK,SAAS,CAAC;AAMf,SAAK,kBAAkB,CAAC;AAExB,SAAK,mBAAmB,CAAC;AAEzB,SAAK,kBAAkB;AACvB,SAAK,uBAAuB,CAAC;AAO7B,SAAK,kBAAkB;AAKvB,SAAK,eAAe;AACpB,SAAK,mBAAmB,CAAC;AAAA,EAC7B;AAAA,EAQA,oBAAoB,GAAG,KAAK;AACxB,UAAM,OAAO,IAAI,YAAY,IAAI;AACjC,WAAO,KAAK,KAAK,GAAG,MAAM,GAAG;AAAA,EACjC;AAAA,EAOA,oBAAoB,GAAG;AACnB,QAAI,EAAE,wBAAwB,MAAO;AACjC,aAAO,EAAE;AAAA,IACb;AACA,MAAE,sBAAsB,KAAK,oBAAoB,GAAG,IAAI;AACxD,MAAE,oBAAoB,WAAW;AACjC,WAAO,EAAE;AAAA,EACb;AAAA,EAEA,WAAW,GAAG,KAAK;AACf,QAAK,QAAM,QAAY;AACnB,aAAO,KAAK,oBAAoB,CAAC;AAAA,IACrC,OAAO;AACH,aAAO,KAAK,oBAAoB,GAAG,GAAG;AAAA,IAC1C;AAAA,EACJ;AAAA,EAEA,SAAS,OAAO;AACZ,QAAK,UAAU,MAAO;AAClB,YAAM,MAAM;AACZ,YAAM,cAAc,KAAK,OAAO;AAAA,IACpC;AACA,SAAK,OAAO,KAAK,KAAK;AAAA,EAC1B;AAAA,EAEA,YAAY,OAAO;AACf,SAAK,OAAO,MAAM,eAAe;AAAA,EACrC;AAAA,EAEA,oBAAoB,GAAG;AACnB,SAAK,gBAAgB,KAAK,CAAC;AAC3B,MAAE,WAAW,KAAK,gBAAgB,SAAO;AACzC,WAAO,EAAE;AAAA,EACb;AAAA,EAEA,iBAAiB,UAAU;AACvB,QAAI,KAAK,gBAAgB,WAAS,GAAG;AACjC,aAAO;AAAA,IACX,OAAO;AACH,aAAO,KAAK,gBAAgB;AAAA,IAChC;AAAA,EACJ;AAAA,EAuBA,kBAAkB,aAAa,KAAM;AACjC,QAAK,cAAc,KAAK,eAAe,KAAK,OAAO,QAAS;AACxD,YAAM;AAAA,IACV;AACA,UAAM,IAAI,KAAK,OAAO;AACtB,QAAI,YAAY,KAAK,WAAW,CAAC;AACjC,QAAI,CAAC,UAAU,SAAS,MAAM,OAAO,GAAG;AACpC,aAAO;AAAA,IACX;AACA,UAAM,WAAW,IAAI,YAAY;AACjC,aAAS,OAAO,SAAS;AACzB,aAAS,UAAU,MAAM,OAAO;AAChC,WAAO,QAAQ,QAAQ,IAAI,iBAAiB,KAAK,UAAU,SAAS,MAAM,OAAO,GAAG;AAChF,YAAM,gBAAgB,KAAK,OAAO,IAAI;AACtC,YAAM,KAAK,cAAc,YAAY;AACrC,kBAAY,KAAK,WAAW,GAAG,WAAW;AAC1C,eAAS,OAAO,SAAS;AACzB,eAAS,UAAU,MAAM,OAAO;AAChC,YAAM,IAAI;AAAA,IACd;AACA,QAAI,UAAU,SAAS,MAAM,OAAO,GAAG;AACnC,eAAS,OAAO,MAAM,GAAG;AAAA,IAC7B;AACA,WAAO;AAAA,EACX;AACJ;AAEA,IAAI,qBAAqB;;;ACjJzB,IAAO,kBAAQ;AAAA,EACX,OAAO;AAAA,EACP,QAAQ;AACZ;;;ACLA,IAAqB,aAArB,cAAwC,SAAS;AAAA,EAC7C,cAAc;AACV,UAAM;AACN,SAAK,YAAY,SAAS;AAAA,EAC9B;AACJ;;;ACLA,IAAqB,gBAArB,cAA2C,SAAS;AAAA,EAChD,cAAc;AACV,UAAM;AACN,SAAK,WAAW;AAChB,SAAK,YAAY;AACjB,WAAO;AAAA,EACX;AACJ;;;ACJA,IAAqB,kBAArB,cAA6C,cAAc;AAAA,EACvD,cAAc;AACV,UAAM;AACN,SAAK,WAAW;AAChB,WAAO;AAAA,EACX;AACJ;;;ACNA,IAAqB,gBAArB,cAA2C,SAAS;AAAA,EAChD,cAAc;AACV,UAAM;AACN,SAAK,YAAY,SAAS;AAC1B,SAAK,aAAa;AAClB,WAAO;AAAA,EACX;AACJ;;;ACPA,IAAqB,eAArB,cAA0C,SAAS;AAAA,EAC/C,cAAc;AACV,UAAM;AACN,SAAK,YAAY,SAAS;AAC1B,SAAK,gBAAgB;AACrB,WAAO;AAAA,EACX;AACJ;;;ACVA,IAAqB,iBAArB,cAA4C,SAAS;AAAA,EACjD,cAAc;AACV,UAAM;AACN,SAAK,YAAY,SAAS;AAC1B,SAAK,YAAY;AACjB,SAAK,mBAAmB;AACxB,WAAO;AAAA,EACX;AACJ;;;ACJA,IAAqB,mBAArB,cAA8C,cAAc;AAAA,EACxD,cAAc;AACV,UAAM;AACN,SAAK,YAAY,SAAS;AAC1B,WAAO;AAAA,EACX;AACJ;;;ACLA,IAAqB,oBAArB,cAA+C,cAAc;AAAA,EACzD,cAAc;AACV,UAAM;AACN,SAAK,YAAY,SAAS;AAC1B,WAAO;AAAA,EACX;AACJ;;;ACXA,IAAqB,oBAArB,cAA+C,SAAS;AAAA,EACpD,cAAc;AACV,UAAM;AACN,SAAK,YAAY,SAAS;AAC1B,WAAO;AAAA,EACX;AACJ;;;ACLA,IAAqB,qBAArB,cAAgD,cAAc;AAAA,EAC1D,cAAc;AACV,UAAM;AACN,SAAK,YAAY,SAAS;AAC1B,SAAK,gBAAgB;AAErB,SAAK,uBAAuB;AAC5B,WAAO;AAAA,EACX;AACJ;;;ACHA,IAAqB,sBAArB,cAAiD,gBAAgB;AAAA,EAC7D,cAAc;AACV,UAAM;AACN,SAAK,YAAY,SAAS;AAC1B,SAAK,gBAAgB;AACrB,WAAO;AAAA,EACX;AACJ;;;ACVA,IAAqB,sBAArB,cAAiD,gBAAgB;AAAA,EAC7D,cAAc;AACV,UAAM;AACN,SAAK,YAAY,SAAS;AAC1B,WAAO;AAAA,EACX;AACJ;;;ACTA,IAAqB,uBAArB,cAAkD,gBAAgB;AAAA,EAC9D,cAAc;AACV,UAAM;AACN,SAAK,YAAY,SAAS;AAC1B,WAAO;AAAA,EACX;AACJ;;;ACNA,IAAqB,iBAArB,cAA4C,WAAW;AAAA,EACnD,YAAY,QAAQ,OAAO;AACvB,UAAM,MAAM;AAEZ,SAAK,SAAS;AACd,SAAK,QAAQ,KAAK,UAAU;AAC5B,SAAK,oBAAoB,WAAW;AAAA,EACxC;AAAA,EAEA,YAAY;AACR,UAAM,IAAI,IAAI,YAAY;AAC1B,MAAE,OAAO,KAAK,MAAM;AACpB,WAAO;AAAA,EACX;AAAA,EAEA,QAAQ,QAAQ,gBAAgB,gBAAgB;AAC5C,WAAO,KAAK,WAAW;AAAA,EAC3B;AAAA,EAEA,WAAW;AACP,WAAO,KAAK;AAAA,EAChB;AACJ;;;ACtBA,IAAqB,kBAArB,cAA6C,WAAW;AAAA,EACpD,YAAY,QAAQ,OAAO,MAAM;AAC7B,UAAM,MAAM;AACZ,SAAK,oBAAoB,WAAW;AACpC,SAAK,QAAQ;AACb,SAAK,OAAO;AACZ,SAAK,QAAQ,KAAK,UAAU;AAAA,EAChC;AAAA,EAEA,YAAY;AACR,UAAM,IAAI,IAAI,YAAY;AAC1B,MAAE,SAAS,KAAK,OAAO,KAAK,IAAI;AAChC,WAAO;AAAA,EACX;AAAA,EAEA,QAAQ,QAAQ,gBAAgB,gBAAgB;AAC5C,WAAO,UAAU,KAAK,SAAS,UAAU,KAAK;AAAA,EAClD;AAAA,EAEA,WAAW;AACP,WAAO,MAAM,OAAO,aAAa,KAAK,KAAK,IAAI,SAAS,OAAO,aAAa,KAAK,IAAI,IAAI;AAAA,EAC7F;AACJ;;;ACvBA,IAAqB,mBAArB,cAA8C,WAAW;AAAA,EACrD,YAAY,QAAQ,WAAW,aAAa,gBAAgB;AACxD,UAAM,MAAM;AACZ,SAAK,oBAAoB,WAAW;AACpC,SAAK,YAAY;AACjB,SAAK,cAAc,gBAAc,SAAY,KAAK;AAClD,SAAK,iBAAiB,mBAAiB,SAAY,QAAQ;AAC3D,SAAK,YAAY;AAAA,EACrB;AAAA,EAEA,QAAQ,QAAQ,gBAAgB,gBAAgB;AAC5C,WAAO;AAAA,EACX;AAAA,EAEA,WAAW;AACP,WAAO,YAAY,KAAK,YAAY,MAAM,KAAK;AAAA,EACnD;AACJ;;;ACjBA,IAAqB,oBAArB,cAA+C,WAAW;AAAA,EACtD,YAAY,QAAQ,2BAA2B;AAC3C,UAAM,MAAM;AACZ,SAAK,oBAAoB,WAAW;AACpC,SAAK,YAAY;AACjB,SAAK,4BAA4B;AAAA,EACrC;AAAA,EAEA,QAAQ,QAAQ,gBAAgB,gBAAgB;AAC5C,WAAO;AAAA,EACX;AAAA,EAEA,WAAW;AACP,WAAO;AAAA,EACX;AACJ;;;ACfA,IAAqB,YAArB,cAAuC,gBAAgB;AAAA,EAEnD,YAAY,WAAW,WAAW,gBAAgB;AAC9C,UAAM;AACN,SAAK,YAAY,cAAc,SAAY,KAAK;AAChD,SAAK,YAAY,cAAc,SAAY,KAAK;AAChD,SAAK,iBAAiB,mBAAmB,SAAY,QAAQ;AAAA,EACjE;AAAA,EAEA,SAAS,QAAQ,cAAc;AAC3B,UAAM,WAAW,KAAK,iBAAiB,eAAe;AACtD,WAAO,OAAO,QAAQ,UAAU,KAAK,WAAW,KAAK,SAAS;AAAA,EAClE;AAAA,EAEA,eAAe,MAAM;AACjB,SAAK,OAAO,KAAK,WAAW,KAAK,WAAW,KAAK,cAAc;AAAA,EACnE;AAAA,EAEA,OAAO,OAAO;AACV,QAAI,SAAS,OAAO;AAChB,aAAO;AAAA,IACX,WAAW,EAAE,iBAAiB,YAAY;AACtC,aAAO;AAAA,IACX,OAAO;AACH,aAAO,KAAK,cAAc,MAAM,aAC5B,KAAK,cAAc,MAAM,aACzB,KAAK,mBAAmB,MAAM;AAAA,IACtC;AAAA,EACJ;AAAA,EAEA,WAAW;AACP,WAAO,MAAM,KAAK,YAAY,MAAM,KAAK,YAAY;AAAA,EACzD;AACJ;AAMA,gBAAgB,OAAO,IAAI,UAAU;;;ACrCrC,IAAqB,sBAArB,cAAiD,4BAA4B;AAAA,EACzE,YAAY,QAAQ,WAAW,WAAW,gBAAgB;AACtD,UAAM,MAAM;AACZ,SAAK,oBAAoB,WAAW;AACpC,SAAK,YAAY;AACjB,SAAK,YAAY;AACjB,SAAK,iBAAiB;AACtB,SAAK,YAAY;AAAA,EACrB;AAAA,EAEA,QAAQ,QAAQ,gBAAgB,gBAAgB;AAC5C,WAAO;AAAA,EACX;AAAA,EAEA,eAAe;AACX,WAAO,IAAI,UAAU,KAAK,WAAW,KAAK,WAAW,KAAK,cAAc;AAAA,EAC5E;AAAA,EAEA,WAAW;AACP,WAAO,UAAU,KAAK,YAAY,MAAM,KAAK;AAAA,EACjD;AACJ;;;ACvBA,IAAqB,sBAArB,cAAiD,gBAAgB;AAAA,EAE7D,YAAY,YAAY;AACpB,UAAM;AACN,SAAK,aAAa,eAAe,SAAY,IAAI;AAAA,EACrD;AAAA,EAEA,SAAS,QAAQ,cAAc;AAC3B,WAAO,OAAO,SAAS,cAAc,KAAK,UAAU;AAAA,EACxD;AAAA,EAEA,eAAe,QAAQ,cAAc;AACjC,QAAI,OAAO,SAAS,cAAc,KAAK,UAAU,GAAG;AAChD,aAAO,gBAAgB;AAAA,IAC3B,OAAO;AACH,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEA,UAAU,OAAO;AACb,WAAO,KAAK,aAAa,MAAM;AAAA,EACnC;AAAA,EAEA,eAAe,MAAM;AACjB,SAAK,OAAO,KAAK,UAAU;AAAA,EAC/B;AAAA,EAEA,OAAO,OAAO;AACV,QAAI,SAAS,OAAO;AAChB,aAAO;AAAA,IACX,WAAW,EAAE,iBAAiB,sBAAsB;AAChD,aAAO;AAAA,IACX,OAAO;AACH,aAAO,KAAK,eAAe,MAAM;AAAA,IACrC;AAAA,EACJ;AAAA,EAEA,WAAW;AACP,WAAO,MAAM,KAAK,aAAa;AAAA,EACnC;AAEJ;AAGA,gBAAgB,sBAAsB;;;AC1CtC,IAAqB,gCAArB,cAA2D,4BAA4B;AAAA,EACnF,YAAY,QAAQ,YAAY;AAC5B,UAAM,MAAM;AACZ,SAAK,oBAAoB,WAAW;AACpC,SAAK,aAAa;AAClB,SAAK,YAAY;AAAA,EACrB;AAAA,EAEA,QAAQ,QAAQ,gBAAgB,gBAAgB;AAC5C,WAAO;AAAA,EACX;AAAA,EAEA,eAAe;AACX,WAAO,IAAI,oBAAoB,KAAK,UAAU;AAAA,EAClD;AAAA,EAEA,WAAW;AACP,WAAO,KAAK,aAAa;AAAA,EAC7B;AACJ;;;ACtBA,IAAqB,4BAArB,MAA+C;AAAA,EAC9C,YAAY,UAAU;AACrB,QAAG,aAAW,QAAW;AACxB,iBAAW;AAAA,IACZ;AACA,SAAK,WAAW;AAChB,SAAK,YAAY,aAAW,OAAO,OAAO,SAAS;AACnD,SAAK,gCAAgC,aAAW,OAAO,QAAQ,SAAS;AAAA,EACzE;AACD;AAEA,0BAA0B,iBAAiB,IAAI,0BAA0B;AACzE,0BAA0B,eAAe,WAAW;;;ACbpD,IAAO,0BAAQ;AAAA,EAEX,SAAS;AAAA,EAET,QAAQ;AAAA,EAER,MAAM;AAAA,EAEN,MAAM;AAAA,EAEN,UAAU;AAAA,EAEV,WAAW;AAAA,EAEX,MAAM;AAAA,EAEN,MAAM;AACV;;;ACTA,IAAqB,cAArB,MAAiC;AAAA,EAC7B,YAAY,QAAQ;AAChB,SAAK,aAAa;AAClB,SAAK,sBAAsB;AAAA,EAC/B;AAAA,EAEA,WAAW;AACP,UAAM,OAAO,IAAI,SAAS;AAC1B,SAAK,eAAe,IAAI;AACxB,WAAO,KAAK,OAAO;AAAA,EACvB;AAAA,EAEA,eAAe,MAAM;AACjB,SAAK,OAAO,KAAK,UAAU;AAAA,EAC/B;AAAA,EAEA,OAAO,OAAO;AACV,WAAO,SAAS;AAAA,EACpB;AACJ;;;AClBA,IAAqB,kBAArB,cAA6C,YAAY;AAAA,EACrD,cAAc;AACV,UAAM,wBAAgB,IAAI;AAAA,EAC9B;AAAA,EAEA,QAAQ,OAAO;AACX,UAAM,KAAK;AAAA,EACf;AAAA,EAEA,WAAW;AACP,WAAO;AAAA,EACX;AACJ;AAGA,gBAAgB,WAAW,IAAI,gBAAgB;;;ACf/C,IAAqB,qBAArB,cAAgD,YAAY;AAAA,EACxD,YAAY,SAAS;AACjB,UAAM,wBAAgB,OAAO;AAC7B,SAAK,UAAU;AAAA,EACnB;AAAA,EAMA,QAAQ,OAAO;AACX,UAAM,WAAW,KAAK;AAAA,EAC1B;AAAA,EAEA,eAAe,MAAM;AACjB,SAAK,OAAO,KAAK,YAAY,KAAK,OAAO;AAAA,EAC7C;AAAA,EAEA,OAAO,OAAO;AACV,QAAI,SAAS,OAAO;AAChB,aAAO;AAAA,IACX,WAAW,EAAG,iBAAiB,qBAAqB;AAChD,aAAO;AAAA,IACX,OAAO;AACH,aAAO,KAAK,YAAY,MAAM;AAAA,IAClC;AAAA,EACJ;AAAA,EAEA,WAAW;AACP,WAAO,aAAa,KAAK,UAAU;AAAA,EACvC;AACJ;;;AC3BA,IAAqB,oBAArB,cAA+C,YAAY;AAAA,EAUvD,YAAY,WAAW,aAAa;AAChC,UAAM,wBAAgB,MAAM;AAC5B,SAAK,YAAY;AACjB,SAAK,cAAc;AACnB,SAAK,sBAAsB;AAAA,EAC/B;AAAA,EAMA,QAAQ,OAAO;AACX,UAAM,OAAO,MAAM,KAAK,WAAW,KAAK,WAAW;AAAA,EACvD;AAAA,EAEA,eAAe,MAAM;AACjB,SAAK,OAAO,KAAK,YAAY,KAAK,WAAW,KAAK,WAAW;AAAA,EACjE;AAAA,EAEA,OAAO,OAAO;AACV,QAAI,SAAS,OAAO;AAChB,aAAO;AAAA,IACX,WAAW,EAAG,iBAAiB,oBAAoB;AAC/C,aAAO;AAAA,IACX,OAAO;AACH,aAAO,KAAK,cAAc,MAAM,aAAa,KAAK,gBAAgB,MAAM;AAAA,IAC5E;AAAA,EACJ;AACJ;;;AC1CA,IAAqB,kBAArB,cAA6C,YAAY;AAAA,EACrD,cAAc;AACV,UAAM,wBAAgB,IAAI;AAAA,EAC9B;AAAA,EAKA,QAAQ,OAAO;AACX,UAAM,KAAK;AAAA,EACf;AAAA,EAEA,WAAW;AACP,WAAO;AAAA,EACX;AACJ;AAEA,gBAAgB,WAAW,IAAI,gBAAgB;;;AClB/C,IAAqB,kBAArB,cAA6C,YAAY;AAAA,EACrD,YAAY,MAAM;AACd,UAAM,wBAAgB,IAAI;AAC1B,SAAK,OAAO;AAAA,EAChB;AAAA,EAEA,QAAQ,OAAO;AACX,UAAM,OAAO,KAAK;AAAA,EACtB;AAAA,EAEA,eAAe,MAAM;AACjB,SAAK,OAAO,KAAK,YAAY,KAAK,IAAI;AAAA,EAC1C;AAAA,EAEA,OAAO,OAAO;AACV,QAAG,SAAS,OAAO;AACf,aAAO;AAAA,IACX,WAAW,EAAG,iBAAiB,kBAAkB;AAC7C,aAAO;AAAA,IACX,OAAO;AACH,aAAO,KAAK,SAAS,MAAM;AAAA,IAC/B;AAAA,EACJ;AAAA,EAEA,WAAW;AACP,WAAO,UAAU,KAAK,OAAO;AAAA,EACjC;AACJ;;;AC5BA,IAAqB,sBAArB,cAAiD,YAAY;AAAA,EACzD,YAAY,MAAM;AACd,UAAM,wBAAgB,SAAS;AAC/B,SAAK,OAAO;AAAA,EAChB;AAAA,EAMA,QAAQ,OAAO;AACX,UAAM,SAAS,KAAK,IAAI;AAAA,EAC5B;AAAA,EAEA,eAAe,MAAM;AACjB,SAAK,OAAO,KAAK,YAAY,KAAK,IAAI;AAAA,EAC1C;AAAA,EAEA,OAAO,OAAO;AACV,QAAI,SAAS,OAAO;AAChB,aAAO;AAAA,IACX,WAAW,EAAG,iBAAiB,sBAAsB;AACjD,aAAO;AAAA,IACX,OAAO;AACH,aAAO,KAAK,SAAS,MAAM;AAAA,IAC/B;AAAA,EACJ;AAAA,EAEA,WAAW;AACP,WAAO,cAAc,KAAK,OAAO;AAAA,EACrC;AACJ;;;AC7BA,IAAqB,qBAArB,cAAgD,YAAY;AAAA,EACxD,cAAc;AACV,UAAM,wBAAgB,QAAQ;AAAA,EAClC;AAAA,EAKA,QAAQ,OAAO;AACX,UAAM,QAAQ;AAAA,EAClB;AAAA,EAEA,WAAW;AACP,WAAO;AAAA,EACX;AACJ;AAEA,mBAAmB,WAAW,IAAI,mBAAmB;;;ACnBrD,IAAqB,kBAArB,cAA6C,YAAY;AAAA,EACrD,YAAY,MAAM;AACd,UAAM,wBAAgB,IAAI;AAC1B,SAAK,OAAO;AAAA,EAChB;AAAA,EAMA,QAAQ,OAAO;AACX,UAAM,KAAK,KAAK,IAAI;AAAA,EACxB;AAAA,EAEA,eAAe,MAAM;AACjB,SAAK,OAAO,KAAK,YAAY,KAAK,IAAI;AAAA,EAC1C;AAAA,EAEA,OAAO,OAAO;AACV,QAAI,SAAS,OAAO;AAChB,aAAO;AAAA,IACX,WAAW,EAAG,iBAAiB,kBAAkB;AAC7C,aAAO;AAAA,IACX,OAAO;AACH,aAAO,KAAK,SAAS,MAAM;AAAA,IAC/B;AAAA,EACJ;AAAA,EAEA,WAAW;AACP,WAAO,UAAU,KAAK,OAAO;AAAA,EACjC;AACJ;;;ACSA,IAAM,qBAAqB;AAE3B,SAAS,UAAW,QAAQ,OAAO;AAClC,QAAM,MAAM,CAAC;AACb,MAAI,SAAO,KAAK;AAChB,SAAO,IAAI,IAAI,SAAS,GAAG;AAAC,WAAO;AAAA,EAAM,CAAC;AAC3C;AAEA,IAAqB,kBAArB,MAAqC;AAAA,EACjC,YAAY,SAAS;AAEjB,QAAK,YAAW,UAAa,YAAY,MAAO;AAC5C,gBAAU,0BAA0B;AAAA,IACxC;AACA,SAAK,yBAAyB;AAC9B,SAAK,iBAAiB;AACtB,SAAK,kBAAkB;AAAA,EAC3B;AAAA,EAEA,YAAY,MAAM;AACd,UAAM,SAAS,KAAK,MAAM,IAAI;AAC9B,SAAK,aAAa,MAAM;AACxB,QAAG;AACC,WAAK,SAAS;AAClB,UAAMC,OAAM,KAAK,QAAQ;AACzB,SAAK,WAAWA,MAAK,MAAM;AAC3B,SAAK,UAAUA,MAAK,MAAM;AAC1B,SAAK,UAAUA,IAAG;AAClB,UAAM,OAAO,CAAC;AACd,SAAK,SAASA,MAAK,MAAM,KAAK,QAAQ,KAAK,IAAI,CAAC;AAChD,QAAG;AACC,WAAK,SAASA,MAAK,MAAM,KAAK,UAAU,KAAK,IAAI,CAAC;AACtD,SAAK,UAAUA,MAAK,IAAI;AACxB,SAAK,cAAcA,IAAG;AACtB,SAAK,iBAAiBA,MAAK,MAAM;AACjC,SAAK,wBAAwBA,IAAG;AAChC,SAAK,UAAUA,IAAG;AAClB,QAAI,KAAK,uBAAuB,iCAAiCA,KAAI,gBAAgB,gBAAQ,QAAS;AAClG,WAAK,8BAA8BA,IAAG;AAEtC,WAAK,UAAUA,IAAG;AAAA,IACtB;AACA,WAAOA;AAAA,EACX;AAAA,EAEA,MAAM,MAAM;AACR,UAAM,UAAU,KAAK,aAAa,KAAK,WAAW,CAAC,IAAI,KAAK;AAC5D,QAAG,YAAY,qBAAqB,GAAG;AACnC,YAAM,SAAS,SAAU,GAAG;AACxB,cAAM,IAAI,EAAE,WAAW,CAAC;AACxB,eAAO,IAAI,IAAI,IAAI,IAAI,IAAI;AAAA,MAC/B;AACA,YAAM,OAAO,KAAK,MAAM,EAAE,EAAE,IAAI,MAAM;AAEtC,WAAK,KAAK,KAAK,WAAW,CAAC;AAC3B,WAAK,OAAO;AACZ,WAAK,MAAM;AACX,aAAO;AAAA,IACX,OAAO;AACH,WAAK,OAAO;AACZ,WAAK,MAAM;AACX,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEA,WAAW;AACP,QAAI,QAAQ;AACZ,WAAM,UAAU;AACZ,WAAK,QAAQ;AAAA,EACrB;AAAA,EAEA,aAAa,QAAQ;AACjB,UAAM,UAAU,KAAK,QAAQ;AAC7B,QAAK,CAAC,UAAU,YAAY,oBAAqB;AAC7C,YAAO,4CAA4C,UAAU,gBAAgB,qBAAqB;AAAA,IACtG;AAAA,EACJ;AAAA,EAEA,UAAU;AACN,UAAM,cAAc,KAAK,QAAQ;AACjC,UAAM,eAAe,KAAK,QAAQ;AAClC,WAAO,IAAI,IAAI,aAAa,YAAY;AAAA,EAC5C;AAAA,EAEA,WAAWA,MAAK,QAAQ;AACpB,QAAI,GAAG,MAAM;AACb,UAAO,uBAAuB,CAAC;AAC/B,UAAO,kBAAkB,CAAC;AAC1B,UAAO,UAAU,KAAK,QAAQ;AAC9B,aAAQ,IAAE,GAAG,IAAE,SAAS,KAAK;AACzB,YAAO,QAAQ,KAAK,QAAQ;AAE5B,UAAI,UAAQ,SAAS,cAAc;AAC/B,QAAAA,KAAI,SAAS,IAAI;AACjB;AAAA,MACJ;AACA,UAAI,YAAY,KAAK,QAAQ;AAC7B,UAAI,UAAU,cAAc,OAAQ;AAChC,oBAAY;AAAA,MAChB;AACA,YAAO,IAAI,KAAK,aAAa,OAAO,SAAS;AAC7C,UAAI,UAAU,SAAS,UAAU;AAC7B,cAAO,sBAAsB,KAAK,QAAQ;AAC1C,6BAAqB,KAAK,CAAC,GAAG,mBAAmB,CAAC;AAAA,MACtD,WAAU,aAAa,iBAAiB;AACpC,cAAO,iBAAiB,KAAK,QAAQ;AACrC,wBAAgB,KAAK,CAAC,GAAG,cAAc,CAAC;AAAA,MAC5C;AACA,MAAAA,KAAI,SAAS,CAAC;AAAA,IAClB;AAGA,SAAK,IAAE,GAAG,IAAE,qBAAqB,QAAQ,KAAK;AAC1C,aAAO,qBAAqB;AAC5B,WAAK,GAAG,gBAAgBA,KAAI,OAAO,KAAK;AAAA,IAC5C;AAEA,SAAK,IAAE,GAAG,IAAE,gBAAgB,QAAQ,KAAK;AACrC,aAAO,gBAAgB;AACvB,WAAK,GAAG,WAAWA,KAAI,OAAO,KAAK;AAAA,IACvC;AAEA,QAAI,qBAAqB,KAAK,QAAQ;AACtC,SAAK,IAAE,GAAG,IAAE,oBAAoB,KAAK;AACjC,oBAAc,KAAK,QAAQ;AAC3B,MAAAA,KAAI,OAAO,aAAa,YAAY;AAAA,IACxC;AAEA,QAAI,sBAAsB,KAAK,QAAQ;AACvC,SAAK,IAAE,GAAG,IAAE,qBAAqB,KAAK;AAClC,oBAAc,KAAK,QAAQ;AAC3B,MAAAA,KAAI,OAAO,aAAa,mBAAmB;AAAA,IAC/C;AAAA,EACJ;AAAA,EAEA,UAAUA,MAAK,QAAQ;AACnB,QAAI;AACJ,UAAM,SAAS,KAAK,QAAQ;AAC5B,QAAIA,KAAI,gBAAgB,gBAAQ,OAAQ;AACpC,MAAAA,KAAI,kBAAkB,UAAU,QAAQ,CAAC;AAAA,IAC7C;AACA,IAAAA,KAAI,mBAAmB,UAAU,QAAQ,CAAC;AAC1C,SAAK,IAAE,GAAG,IAAE,QAAQ,KAAK;AACrB,YAAM,IAAI,KAAK,QAAQ;AACvB,MAAAA,KAAI,iBAAiB,KAAKA,KAAI,OAAO;AACrC,UAAKA,KAAI,gBAAgB,gBAAQ,OAAQ;AACrC,YAAI,YAAY,KAAK,QAAQ;AAC7B,YAAI,UAAU,cAAc,OAAQ;AAChC,sBAAY,MAAM;AAAA,QACtB;AACA,QAAAA,KAAI,gBAAgB,KAAK;AAAA,MAC7B;AAAA,IACJ;AACA,IAAAA,KAAI,kBAAkB,UAAU,QAAQ,CAAC;AACzC,SAAK,IAAE,GAAG,IAAEA,KAAI,OAAO,QAAQ,KAAK;AAChC,YAAM,QAAQA,KAAI,OAAO;AACzB,UAAI,EAAE,iBAAiB,gBAAgB;AACnC;AAAA,MACJ;AACA,MAAAA,KAAI,gBAAgB,MAAM,aAAa;AACvC,MAAAA,KAAI,iBAAiB,MAAM,WAAW,YAAY;AAAA,IACtD;AAAA,EACJ;AAAA,EAEA,UAAUA,MAAK;AACX,UAAM,SAAS,KAAK,QAAQ;AAC5B,aAAS,IAAE,GAAG,IAAE,QAAQ,KAAK;AACzB,UAAI,IAAI,KAAK,QAAQ;AACrB,MAAAA,KAAI,iBAAiB,KAAKA,KAAI,OAAO,EAAE;AAAA,IAC3C;AAAA,EACJ;AAAA,EAEA,SAASA,MAAK,MAAM,QAAQ;AACxB,UAAM,IAAI,KAAK,QAAQ;AACvB,aAAS,IAAE,GAAG,IAAE,GAAG,KAAK;AACpB,YAAM,OAAO,IAAI,YAAY;AAC7B,WAAK,KAAK,IAAI;AACd,YAAM,IAAI,KAAK,QAAQ;AACvB,YAAM,cAAc,KAAK,QAAQ;AACjC,UAAI,gBAAc,GAAG;AACjB,aAAK,OAAO,EAAE;AAAA,MAClB;AACA,eAAS,IAAE,GAAG,IAAE,GAAG,KAAK;AACpB,cAAM,KAAK,OAAO;AAClB,cAAM,KAAK,OAAO;AAClB,aAAK,SAAS,IAAI,EAAE;AAAA,MACxB;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,UAAUA,MAAK,MAAM;AACjB,QAAI,GAAG,GAAG,OAAO,OAAO;AACxB,UAAM,SAAS,KAAK,QAAQ;AAC5B,SAAK,IAAE,GAAG,IAAE,QAAQ,KAAK;AACrB,YAAM,MAAM,KAAK,QAAQ;AACzB,YAAM,MAAM,KAAK,QAAQ;AACzB,YAAM,QAAQ,KAAK,QAAQ;AAC3B,YAAM,OAAO,KAAK,QAAQ;AAC1B,YAAM,OAAO,KAAK,QAAQ;AAC1B,YAAM,OAAO,KAAK,QAAQ;AAC1B,cAAQ,KAAK,YAAYA,MAAK,OAAO,KAAK,KAAK,MAAM,MAAM,MAAM,IAAI;AACrE,YAAM,WAAWA,KAAI,OAAO;AAC5B,eAAS,cAAc,KAAK;AAAA,IAChC;AAEA,SAAK,IAAE,GAAG,IAAEA,KAAI,OAAO,QAAQ,KAAK;AAChC,cAAQA,KAAI,OAAO;AACnB,WAAK,IAAE,GAAG,IAAE,MAAM,YAAY,QAAQ,KAAK;AACvC,cAAM,IAAI,MAAM,YAAY;AAC5B,YAAI,EAAE,aAAa,iBAAiB;AAChC;AAAA,QACJ;AACA,YAAI,4BAA4B;AAChC,YAAIA,KAAI,iBAAiB,EAAE,OAAO,WAAW,kBAAkB;AAC3D,cAAI,EAAE,eAAe,GAAG;AACpB,wCAA4B,EAAE,OAAO;AAAA,UACzC;AAAA,QACJ;AAEA,gBAAQ,IAAI,kBAAkB,EAAE,aAAa,yBAAyB;AACtE,QAAAA,KAAI,gBAAgB,EAAE,OAAO,WAAW,cAAc,KAAK;AAAA,MAC/D;AAAA,IACJ;AAEA,SAAK,IAAE,GAAG,IAAEA,KAAI,OAAO,QAAQ,KAAK;AAChC,cAAQA,KAAI,OAAO;AACnB,UAAI,iBAAiB,iBAAiB;AAElC,YAAI,MAAM,aAAa,MAAM;AACzB,gBAAO;AAAA,QACX;AAGA,YAAK,MAAM,SAAS,eAAe,MAAM;AACrC,gBAAO;AAAA,QACX;AACA,cAAM,SAAS,aAAa;AAAA,MAChC;AACA,UAAI,iBAAiB,mBAAmB;AACpC,aAAK,IAAE,GAAG,IAAE,MAAM,YAAY,QAAQ,KAAK;AACvC,mBAAS,MAAM,YAAY,GAAG;AAC9B,cAAI,kBAAkB,qBAAqB;AACvC,mBAAO,gBAAgB;AAAA,UAC3B;AAAA,QACJ;AAAA,MACJ,WAAW,iBAAiB,mBAAmB;AAC3C,aAAK,IAAE,GAAG,IAAE,MAAM,YAAY,QAAQ,KAAK;AACvC,mBAAS,MAAM,YAAY,GAAG;AAC9B,cAAI,kBAAkB,oBAAoB;AACtC,mBAAO,gBAAgB;AAAA,UAC3B;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,cAAcA,MAAK;AACf,UAAM,aAAa,KAAK,QAAQ;AAChC,aAAS,IAAE,GAAG,IAAE,YAAY,KAAK;AAC7B,YAAM,IAAI,KAAK,QAAQ;AACvB,YAAM,WAAWA,KAAI,OAAO;AAC5B,MAAAA,KAAI,gBAAgB,KAAK,QAAQ;AACjC,eAAS,WAAW;AAAA,IACxB;AAAA,EACJ;AAAA,EAEA,iBAAiBA,MAAK,QAAQ;AAC1B,QAAIA,KAAI,gBAAgB,gBAAQ,OAAO;AACnC,YAAM,QAAQ,KAAK,QAAQ;AAC3B,MAAAA,KAAI,eAAe,UAAU,OAAO,IAAI;AACxC,eAAS,IAAE,GAAG,IAAE,OAAO,KAAK;AACxB,cAAM,aAAa,KAAK,QAAQ;AAChC,YAAI,QAAQ,KAAK,QAAQ;AACzB,YAAI,UAAU,UAAU,OAAQ;AAC5B,kBAAQ;AAAA,QACZ;AACA,YAAI,QAAQ,KAAK,QAAQ;AACzB,YAAI,UAAU,UAAU,OAAQ;AAC5B,kBAAQ;AAAA,QACZ;AACA,QAAAA,KAAI,aAAa,KAAK,KAAK,mBAAmB,YAAY,OAAO,KAAK;AAAA,MAC1E;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,8BAA8BA,MAAK;AAC/B,QAAI;AACJ,UAAM,QAAQA,KAAI,iBAAiB;AACnC,SAAI,IAAE,GAAG,IAAE,OAAO,KAAK;AACnB,MAAAA,KAAI,gBAAgB,KAAKA,KAAI,eAAe,IAAI;AAAA,IACpD;AACA,SAAI,IAAE,GAAG,IAAE,OAAO,KAAK;AACnB,WAAK,6BAA6BA,MAAK,CAAC;AAAA,IAC5C;AAAA,EACJ;AAAA,EAEA,6BAA6BA,MAAK,KAAK;AACnC,QAAI,GAAG;AACP,UAAM,cAAc,IAAI,qBAAqB;AAC7C,gBAAY,YAAY;AACxB,IAAAA,KAAI,SAAS,WAAW;AAExB,UAAM,aAAa,IAAI,cAAc;AACrC,eAAW,YAAY;AACvB,IAAAA,KAAI,SAAS,UAAU;AAEvB,gBAAY,WAAW;AACvB,IAAAA,KAAI,oBAAoB,WAAW;AAEnC,eAAW,aAAa;AAExB,QAAI,oBAAoB;AACxB,QAAI,WAAW;AAEf,QAAIA,KAAI,iBAAiB,KAAK,kBAAkB;AAE5C,iBAAW;AACX,WAAI,IAAE,GAAG,IAAEA,KAAI,OAAO,QAAQ,KAAK;AAC/B,gBAAQA,KAAI,OAAO;AACnB,YAAI,KAAK,mBAAmB,OAAO,GAAG,GAAG;AACrC,qBAAW;AACX,8BAAoB,MAAM,cAAc,YAAY;AACpD;AAAA,QACJ;AAAA,MACJ;AACA,UAAI,sBAAsB,MAAM;AAC5B,cAAO;AAAA,MACX;AAAA,IACJ,OAAO;AACH,iBAAWA,KAAI,gBAAgB;AAAA,IACnC;AAIA,SAAI,IAAE,GAAG,IAAEA,KAAI,OAAO,QAAQ,KAAK;AAC/B,cAAQA,KAAI,OAAO;AACnB,eAAQ,IAAE,GAAG,IAAE,MAAM,YAAY,QAAQ,KAAK;AAC1C,cAAM,aAAa,MAAM,YAAY;AACrC,YAAI,eAAe,mBAAmB;AAClC;AAAA,QACJ;AACA,YAAI,WAAW,WAAW,UAAU;AAChC,qBAAW,SAAS;AAAA,QACxB;AAAA,MACJ;AAAA,IACJ;AAIA,UAAM,mBAAmBA,KAAI,iBAAiB;AAC9C,UAAM,QAAQ,iBAAiB,YAAY;AAC3C,WAAQ,QAAQ,GAAG;AACf,kBAAY,cAAc,iBAAiB,YAAY,QAAM,EAAE;AAC/D,uBAAiB,cAAc,iBAAiB,YAAY,MAAM,EAAE;AAAA,IACxE;AAEA,IAAAA,KAAI,iBAAiB,KAAK,cAAc,IAAI,kBAAkB,WAAW,CAAC;AAC1E,eAAW,cAAc,IAAI,kBAAkB,QAAQ,CAAC;AAExD,UAAM,aAAa,IAAI,WAAW;AAClC,IAAAA,KAAI,SAAS,UAAU;AACvB,eAAW,cAAc,IAAI,eAAe,YAAYA,KAAI,gBAAgB,IAAI,CAAC;AACjF,gBAAY,cAAc,IAAI,kBAAkB,UAAU,CAAC;AAAA,EAC/D;AAAA,EAEA,mBAAmB,OAAO,KAAK;AAC3B,QAAK,MAAM,cAAc,KAAK;AAC1B,aAAO;AAAA,IACX;AACA,QAAI,EAAG,iBAAiB,qBAAqB;AACzC,aAAO;AAAA,IACX;AACA,UAAM,oBAAoB,MAAM,YAAY,MAAM,YAAY,SAAS,GAAG;AAC1E,QAAI,EAAG,6BAA6B,eAAe;AAC/C,aAAO;AAAA,IACX;AACA,QAAI,kBAAkB,0BACjB,kBAAkB,YAAY,GAAG,kBAAkB,eAAgB;AACpE,aAAO;AAAA,IACX,OAAO;AACH,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAQA,wBAAwBA,MAAK;AACzB,aAAQ,IAAE,GAAG,IAAEA,KAAI,OAAO,QAAQ,KAAK;AACnC,YAAM,QAAQA,KAAI,OAAO;AACzB,UAAI,EAAG,iBAAiB,qBAAqB;AACzC;AAAA,MACJ;AAIA,UAAKA,KAAI,iBAAiB,MAAM,WAAW,kBAAkB;AACzD,cAAM,oBAAoB,MAAM,YAAY,MAAM,YAAY,SAAS,GAAG;AAC1E,YAAI,6BAA6B,cAAc;AAC3C,cAAK,kBAAkB,0BACd,kBAAkB,YAAY,GAAG,kBAAkB,eAAgB;AACxE,kBAAM,uBAAuB;AAAA,UACjC;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,UAAUA,MAAK;AACX,QAAI,CAAC,KAAK,uBAAuB,WAAW;AACxC;AAAA,IACJ;AAEA,aAAQ,IAAE,GAAG,IAAEA,KAAI,OAAO,QAAQ,KAAK;AACnC,YAAM,QAAQA,KAAI,OAAO;AACzB,UAAI,UAAU,MAAM;AAChB;AAAA,MACJ;AACA,WAAK,eAAe,MAAM,0BAA0B,MAAM,YAAY,UAAU,CAAC;AACjF,UAAI,iBAAiB,qBAAqB;AACtC,aAAK,eAAe,MAAM,kBAAkB,IAAI;AAAA,MACpD,WAAY,iBAAiB,oBAAoB;AAC7C,aAAK,eAAe,MAAM,kBAAkB,IAAI;AAChD,aAAK,eAAe,MAAM,YAAY,WAAW,CAAC;AAClD,YAAI,MAAM,YAAY,GAAG,kBAAkB,qBAAqB;AAC5D,eAAK,eAAe,MAAM,YAAY,GAAG,kBAAkB,YAAY;AACvE,eAAK,eAAe,CAAC,MAAM,SAAS;AAAA,QACxC,WAAW,MAAM,YAAY,GAAG,kBAAkB,cAAc;AAC5D,eAAK,eAAe,MAAM,YAAY,GAAG,kBAAkB,mBAAmB;AAC9E,eAAK,eAAe,MAAM,SAAS;AAAA,QACvC,OAAO;AACH,gBAAM;AAAA,QACV;AAAA,MACJ,WAAW,iBAAiB,mBAAmB;AAC3C,aAAK,eAAe,MAAM,YAAY,WAAW,CAAC;AAClD,aAAK,eAAe,MAAM,YAAY,GAAG,kBAAkB,kBAAkB;AAAA,MACjF,WAAW,iBAAiB,cAAc;AACtC,aAAK,eAAe,MAAM,kBAAkB,IAAI;AAAA,MACpD,WAAW,iBAAiB,gBAAgB;AACxC,aAAK,eAAe,MAAM,cAAc,IAAI;AAAA,MAChD,WAAW,iBAAiB,iBAAiB;AACzC,aAAK,eAAe,MAAM,aAAa,IAAI;AAAA,MAC/C,WAAW,iBAAiB,eAAe;AACvC,aAAK,eAAe,MAAM,eAAe,IAAI;AAAA,MACjD,WAAW,iBAAiB,eAAe;AACvC,aAAK,eAAe,MAAM,YAAY,UAAU,KAAK,MAAM,YAAY,CAAC;AAAA,MAC5E,OAAO;AACH,aAAK,eAAe,MAAM,YAAY,UAAU,KAAM,iBAAiB,aAAc;AAAA,MACzF;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,eAAe,WAAW,SAAS;AAC/B,QAAI,CAAC,WAAW;AACZ,UAAI,YAAY,UAAa,YAAU,MAAM;AACzC,kBAAU;AAAA,MACd;AACA,YAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEA,UAAU;AACN,WAAO,KAAK,KAAK,KAAK;AAAA,EAC1B;AAAA,EAEA,YAAY;AACR,UAAM,MAAM,KAAK,QAAQ;AACzB,UAAM,OAAO,KAAK,QAAQ;AAC1B,WAAO,MAAO,QAAQ;AAAA,EAC1B;AAAA,EAEA,YAAYA,MAAK,MAAM,KAAK,KAAK,MAAM,MAAM,MAAM,MAAM;AACrD,UAAM,SAASA,KAAI,OAAO;AAC1B,YAAO,MAAM;AAAA,MACb,KAAK,WAAW;AACZ,eAAO,IAAI,kBAAkB,MAAM;AAAA,MACvC,KAAK,WAAW;AACZ,eAAO,SAAS,IAAI,IAAI,gBAAgB,QAAQ,MAAM,KAAK,IAAI,IAAI,IAAI,gBAAgB,QAAQ,MAAM,IAAI;AAAA,MAC7G,KAAK,WAAW;AACZ,eAAO,IAAI,eAAeA,KAAI,OAAO,OAAO,MAAM,MAAM,MAAM;AAAA,MAClE,KAAK,WAAW;AACZ,eAAO,IAAI,oBAAoB,QAAQ,MAAM,MAAM,SAAS,CAAC;AAAA,MACjE,KAAK,WAAW;AACZ,eAAO,IAAI,8BAA8B,QAAQ,IAAI;AAAA,MACzD,KAAK,WAAW;AACZ,eAAO,SAAS,IAAI,IAAI,eAAe,QAAQ,MAAM,GAAG,IAAI,IAAI,eAAe,QAAQ,IAAI;AAAA,MAC/F,KAAK,WAAW;AACZ,eAAO,IAAI,iBAAiB,QAAQ,MAAM,MAAM,SAAS,CAAC;AAAA,MAC9D,KAAK,WAAW;AACZ,eAAO,IAAI,cAAc,QAAQ,KAAK,KAAK;AAAA,MAC/C,KAAK,WAAW;AACZ,eAAO,IAAI,iBAAiB,QAAQ,KAAK,KAAK;AAAA,MAClD,KAAK,WAAW;AACZ,eAAO,IAAI,mBAAmB,MAAM;AAAA,MACxC;AACI,cAAM,oCAAoC,OAAO;AAAA,IACrD;AAAA,EACJ;AAAA,EAEA,aAAa,MAAM,WAAW;AAC1B,QAAI,KAAK,mBAAmB,MAAM;AAC9B,YAAM,KAAK,CAAC;AACZ,SAAG,SAAS,gBAAgB;AAC5B,SAAG,SAAS,SAAS,MAAM,IAAI,WAAW;AAC1C,SAAG,SAAS,cAAc,MAAM,IAAI,eAAe;AACnD,SAAG,SAAS,eAAe,MAAM,IAAI,qBAAqB;AAC1D,SAAG,SAAS,oBAAoB,MAAM,IAAI,oBAAoB;AAC9D,SAAG,SAAS,oBAAoB,MAAM,IAAI,oBAAoB;AAC9D,SAAG,SAAS,eAAe,MAAM,IAAI,iBAAiB;AACtD,SAAG,SAAS,aAAa,MAAM,IAAI,cAAc;AACjD,SAAG,SAAS,aAAa,MAAM,IAAI,cAAc;AACjD,SAAG,SAAS,kBAAkB,MAAM,IAAI,kBAAkB;AAC1D,SAAG,SAAS,mBAAmB,MAAM,IAAI,mBAAmB;AAC5D,SAAG,SAAS,kBAAkB,MAAM,IAAI,kBAAkB;AAC1D,SAAG,SAAS,YAAY,MAAM,IAAI,aAAa;AAC/C,WAAK,iBAAiB;AAAA,IAC1B;AACA,QAAI,OAAK,KAAK,eAAe,UAAU,KAAK,eAAe,UAAU,MAAM;AACvE,YAAM,8BAA8B,OAAO;AAAA,IAC/C,OAAO;AACH,YAAM,IAAI,KAAK,eAAe,MAAM;AACpC,UAAI,MAAI,MAAM;AACV,UAAE,YAAY;AACd,eAAO;AAAA,MACX;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,mBAAmB,MAAM,OAAO,OAAO;AACnC,QAAI,KAAK,oBAAoB,MAAM;AAC/B,YAAM,KAAK,CAAC;AACZ,SAAG,wBAAgB,WAAW,CAACC,QAAOC,WAAU,IAAI,mBAAmBD,MAAK;AAC5E,SAAG,wBAAgB,UAAU,CAACA,QAAOC,WAAU,IAAI,kBAAkBD,QAAOC,MAAK;AACjF,SAAG,wBAAgB,QAAQ,CAACD,QAAOC,WAAU,IAAI,gBAAgBD,MAAK;AACtE,SAAG,wBAAgB,QAAQ,CAACA,QAAOC,WAAU,gBAAgB;AAC7D,SAAG,wBAAgB,YAAY,CAACD,QAAOC,WAAU,mBAAmB;AACpE,SAAG,wBAAgB,aAAa,CAACD,QAAOC,WAAU,IAAI,oBAAoBD,MAAK;AAC/E,SAAG,wBAAgB,QAAQ,CAACA,QAAOC,WAAU,gBAAgB;AAC7D,SAAG,wBAAgB,QAAQ,CAACD,QAAOC,WAAU,IAAI,gBAAgBD,MAAK;AACtE,WAAK,kBAAkB;AAAA,IAC3B;AACA,QAAI,OAAK,KAAK,gBAAgB,UAAU,KAAK,gBAAgB,UAAU,MAAM;AACzE,YAAM,qCAAqC,OAAO;AAAA,IACtD,OAAO;AACH,aAAO,KAAK,gBAAgB,MAAM,OAAO,KAAK;AAAA,IAClD;AAAA,EACJ;AACJ;;;AC/kBA,IAAqB,gBAArB,MAAmC;AAAA,EAC/B,YAAY,YAAY,iBAAiB,MAAM,QAAQ,KAAK,GAAG;AAAA,EAC/D;AAAA,EAEA,gBAAgB,YAAY,KAAK,YAAY,WAAW,OAAO,WAAW,SAAS;AAAA,EACnF;AAAA,EAEA,4BAA4B,YAAY,KAAK,YAAY,WAAW,iBAAiB,SAAS;AAAA,EAC9F;AAAA,EAEA,yBAAyB,YAAY,KAAK,YAAY,WAAW,YAAY,SAAS;AAAA,EACtF;AACJ;;;ACHA,IAAqB,uBAArB,cAAkD,cAAc;AAAA,EAC5D,cAAc;AACV,UAAM;AAAA,EACV;AAAA,EAEA,YAAY,YAAY,iBAAiB,MAAM,QAAQ,KAAK,GAAG;AAC3D,YAAQ,MAAM,UAAU,OAAO,MAAM,SAAS,MAAM,GAAG;AAAA,EAC3D;AACJ;AAMA,qBAAqB,WAAW,IAAI,qBAAqB;;;AC3BzD,IAAqB,qBAArB,cAAgD,cAAc;AAAA,EAC1D,YAAY,WAAW;AACnB,UAAM;AACN,QAAI,cAAY,MAAM;AAClB,YAAM;AAAA,IACV;AACA,SAAK,YAAY;AACjB,WAAO;AAAA,EACX;AAAA,EAEA,YAAY,YAAY,iBAAiB,MAAM,QAAQ,KAAK,GAAG;AAC3D,SAAK,UAAU,IAAI,OAAK,EAAE,YAAY,YAAY,iBAAiB,MAAM,QAAQ,KAAK,CAAC,CAAC;AAAA,EAC5F;AAAA,EAEA,gBAAgB,YAAY,KAAK,YAAY,WAAW,OAAO,WAAW,SAAS;AAC/E,SAAK,UAAU,IAAI,OAAK,EAAE,gBAAgB,YAAY,KAAK,YAAY,WAAW,OAAO,WAAW,OAAO,CAAC;AAAA,EAChH;AAAA,EAEA,4BAA4B,YAAY,KAAK,YAAY,WAAW,iBAAiB,SAAS;AAC1F,SAAK,UAAU,IAAI,OAAK,EAAE,4BAA4B,YAAY,KAAK,YAAY,WAAW,iBAAiB,OAAO,CAAC;AAAA,EAC3H;AAAA,EAEA,yBAAyB,YAAY,KAAK,YAAY,WAAW,YAAY,SAAS;AAClF,SAAK,UAAU,IAAI,OAAK,EAAE,yBAAyB,YAAY,KAAK,YAAY,WAAW,YAAY,OAAO,CAAC;AAAA,EACnH;AACJ;;;ACtBA,IAAqB,aAArB,MAAgC;AAAA,EAC5B,cAAc;AACV,SAAK,aAAa,CAAE,qBAAqB,QAAS;AAClD,SAAK,UAAU;AACf,SAAK,eAAe;AAAA,EACxB;AAAA,EAEA,aAAa,aAAa;AACtB,UAAM,iBAAiB;AACvB,QAAI,mBAAiB,aAAa;AAC9B,cAAQ,IAAI,yDAAuD,iBAAe,OAAK,WAAW;AAAA,IACtG;AAAA,EACJ;AAAA,EAEA,iBAAiB,UAAU;AACvB,SAAK,WAAW,KAAK,QAAQ;AAAA,EACjC;AAAA,EAEA,uBAAuB;AACnB,SAAK,aAAa,CAAC;AAAA,EACvB;AAAA,EAEA,kBAAkB;AACd,WAAO,OAAO,eAAe,IAAI,EAAE,YAAY,gBAAgB,CAAC;AAAA,EACpE;AAAA,EAEA,mBAAmB;AACf,WAAO,OAAO,eAAe,IAAI,EAAE,YAAY,iBAAiB,CAAC;AAAA,EACrE;AAAA,EAEA,gBAAgB;AACZ,QAAG,CAAC,KAAK,YAAY;AACjB,YAAM,eAAe,KAAK,gBAAgB;AAC1C,YAAM,gBAAgB,KAAK,iBAAiB;AAC5C,YAAM,SAAS,aAAa,SAAS,cAAc,SAAS,aAAa,SAAS,cAAc;AAChG,WAAK,aAAa,CAAC;AACnB,eAAQ,IAAE,GAAG,IAAE,QAAQ,KAAK;AACxB,aAAK,WAAW,KAAK,aAAa,MAAM,cAAc,MAAM;AAAA,MAChE;AAAA,IACJ;AACA,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,kBAAkB;AACd,UAAM,aAAa,KAAK,cAAc;AACtC,QAAI,eAAa,MAAM;AACnB,YAAM;AAAA,IACV;AACA,QAAI,SAAS,KAAK,kBAAkB;AACpC,QAAG,WAAS,QAAW;AACnB,eAAS,WAAW,OAAO,SAAS,GAAG,GAAG,GAAG;AAAE,UAAE,KAAK;AAAA,MAAG,CAAC;AAC1D,aAAO,MAAM,MAAM;AACnB,WAAK,kBAAkB,cAAc;AAAA,IACzC;AACA,WAAO;AAAA,EACX;AAAA,EAMA,kBAAkB;AACd,UAAM,YAAY,KAAK;AACvB,QAAI,cAAY,MAAM;AAClB,YAAM;AAAA,IACV;AACA,QAAI,SAAS,KAAK,kBAAkB;AACpC,QAAG,WAAS,QAAW;AACnB,eAAS,UAAU,OAAO,SAAS,GAAG,GAAG,GAAG;AAAE,UAAE,KAAK;AAAA,MAAG,CAAC;AACzD,WAAK,kBAAkB,aAAa;AAAA,IACxC;AACA,WAAO;AAAA,EACX;AAAA,EAEA,aAAa,WAAW;AACpB,UAAM,QAAQ,KAAK,gBAAgB,EAAE;AACrC,QAAI,UAAS,QAAW;AACpB,aAAO;AAAA,IACX,OAAO;AACH,aAAO,MAAM;AAAA,IACjB;AAAA,EACJ;AAAA,EAGA,eAAe,GAAG;AACd,UAAM,OAAO,EAAE,kBAAkB,EAAE;AACnC,UAAM,SAAS,EAAE,kBAAkB,EAAE;AACrC,WAAO,UAAU,OAAO,MAAM;AAAA,EAClC;AAAA,EAeA,qBAAqB,GAAG;AACpB,QAAI,MAAI,MAAM;AACV,aAAO;AAAA,IACX;AACA,QAAI,IAAI,EAAE;AACV,QAAI,MAAI,MAAM;AACV,UAAI,EAAE,SAAO,MAAM,KAAK;AACpB,YAAI;AAAA,MACR,OAAO;AACH,YAAI,MAAM,EAAE,OAAO;AAAA,MACvB;AAAA,IACJ;AACA,QAAI,EAAE,QAAQ,MAAK,KAAK,EAAE,QAAQ,MAAK,KAAK,EAAE,QAAQ,KAAK,KAAK;AAChE,WAAO,MAAM,IAAI;AAAA,EACrB;AAAA,EAEA,2BAA2B;AACvB,WAAO,IAAI,mBAAmB,KAAK,UAAU;AAAA,EACjD;AAAA,EAMA,QAAQ,UAAU,WAAW,aAAa;AACtC,WAAO;AAAA,EACX;AAAA,EAEA,SAAS,UAAW,YAAY;AAC5B,WAAO;AAAA,EACX;AAAA,EAEA,IAAI,QAAO;AACP,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,IAAI,MAAM,OAAO;AACb,SAAK,eAAe;AAAA,EACxB;AACJ;AAEA,WAAW,oBAAoB,CAAC;AAChC,WAAW,oBAAoB,CAAC;;;ACxJhC,IAAqB,cAArB,cAAyC,MAAM;AAAA,EAC3C,YAAY,QAAQ,MAAM,SAAS,OAAO,MAAM;AAC5C,UAAM;AACN,SAAK,SAAS,WAAW,SAAY,SAAS,YAAY;AAC1D,SAAK,OAAO,SAAS,SAAY,OAAO;AACxC,SAAK,UAAU,YAAY,SAAY,UAAU,MAAM;AACvD,SAAK,QAAQ,UAAU,SAAY,QAAQ;AAC3C,SAAK,OAAO,SAAS,SAAY,OAAO;AACxC,SAAK,aAAa;AAClB,QAAI,KAAK,OAAO,OAAO,MAAM;AACzB,WAAK,OAAO,OAAO,GAAG;AACtB,WAAK,SAAS,OAAO,GAAG;AAAA,IAC5B,OAAO;AACH,WAAK,SAAS;AAAA,IAClB;AAAA,EACJ;AAAA,EAeA,QAAQ;AACJ,UAAM,IAAI,IAAI,YAAY,KAAK,QAAQ,KAAK,MAAM,KAAK,SAAS,KAAK,OAAO,KAAK,IAAI;AACrF,MAAE,aAAa,KAAK;AACpB,MAAE,OAAO,KAAK;AACd,MAAE,SAAS,KAAK;AAChB,MAAE,OAAO,KAAK;AACd,WAAO;AAAA,EACX;AAAA,EAEA,WAAW;AACP,QAAI,MAAM,KAAK;AACf,QAAI,QAAQ,MAAM;AACd,YAAM,IAAI,QAAQ,OAAO,KAAK,EAAE,QAAQ,OAAO,KAAK,EAAE,QAAQ,OAAO,KAAK;AAAA,IAC9E,OAAO;AACH,YAAM;AAAA,IACV;AACA,WAAO,OAAO,KAAK,aAAa,MAAM,KAAK,QAAQ,MAAM,KAAK,OAAO,OACjE,MAAM,QAAQ,KAAK,OAAO,OACzB,KAAK,UAAU,IAAI,cAAc,KAAK,UAAU,MAAM,MACvD,KAAK,OAAO,MAAM,KAAK,SAAS;AAAA,EACxC;AAAA,EAEA,IAAI,OAAM;AACN,QAAI,KAAK,UAAU,MAAM;AACrB,aAAO,KAAK;AAAA,IAChB;AACA,UAAM,QAAQ,KAAK,eAAe;AAClC,QAAI,UAAU,MAAM;AAChB,aAAO;AAAA,IACX;AACA,UAAM,IAAI,MAAM;AAChB,QAAI,KAAK,QAAQ,KAAK,KAAK,OAAO,GAAG;AACjC,aAAO,MAAM,QAAQ,KAAK,OAAO,KAAK,IAAI;AAAA,IAC9C,OAAO;AACH,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEA,IAAI,KAAK,MAAM;AACX,SAAK,QAAQ;AAAA,EACjB;AACJ;AAMA,YAAY,eAAe,CAAE,MAAM,IAAK;;;ACxExC,IAAM,eAAN,MAAmB;AAAC;AAMpB,IAAqB,qBAArB,cAAgD,aAAa;AAAA,EACzD,YAAY,UAAU;AAClB,UAAM;AAgBN,SAAK,WAAW,aAAW,SAAY,QAAQ;AAAA,EACnD;AAAA,EAEA,OAAO,QAAQ,MAAM,MAAM,SAAS,OAAO,MAAM,MAAM,QAAQ;AAC3D,UAAM,IAAI,IAAI,YAAY,QAAQ,MAAM,SAAS,OAAO,IAAI;AAC5D,MAAE,OAAO;AACT,MAAE,SAAS;AACX,QAAI,SAAQ,MAAM;AACd,QAAE,OAAO;AAAA,IACb,WAAW,KAAK,YAAY,OAAO,OAAM,MAAM;AAC3C,QAAE,OAAO,OAAO,GAAG,QAAQ,OAAM,IAAI;AAAA,IACzC;AACA,WAAO;AAAA,EACX;AAAA,EAEA,WAAW,MAAM,MAAM;AACnB,UAAM,IAAI,IAAI,YAAY,MAAM,IAAI;AACpC,MAAE,OAAO;AACT,WAAO;AAAA,EACX;AACJ;AASA,mBAAmB,UAAU,IAAI,mBAAmB;;;AC/CpD,IAAqB,uBAArB,cAAkD,MAAM;AAAA,EACpD,YAAY,QAAQ;AAChB,UAAM,OAAO,OAAO;AACpB,QAAI,MAAM;AACN,YAAM,kBAAkB,MAAM,oBAAoB;AACtD,SAAK,UAAU,OAAO;AACtB,SAAK,aAAa,OAAO;AACzB,SAAK,QAAQ,OAAO;AACpB,SAAK,MAAM,OAAO;AAMlB,SAAK,iBAAiB;AAQtB,SAAK,iBAAiB;AACtB,QAAI,KAAK,eAAa,MAAM;AACxB,WAAK,iBAAiB,KAAK,WAAW;AAAA,IAC1C;AAAA,EACJ;AAAA,EAYA,oBAAoB;AAChB,QAAI,KAAK,eAAa,MAAM;AACxB,aAAO,KAAK,WAAW,IAAI,kBAAkB,KAAK,gBAAgB,KAAK,GAAG;AAAA,IAC9E,OAAO;AACH,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAGA,WAAW;AACP,WAAO,KAAK;AAAA,EAChB;AACJ;;;ACxDA,IAAqB,4BAArB,cAAuD,qBAAqB;AAAA,EACxE,YAAY,OAAO,OAAO,YAAY,gBAAgB;AAClD,UAAM,EAAC,SAAS,IAAI,YAAY,OAAO,OAAc,KAAK,KAAI,CAAC;AAC/D,SAAK,aAAa;AAClB,SAAK,iBAAiB;AAAA,EAC1B;AAAA,EAEA,WAAW;AACP,QAAI,SAAS;AACb,QAAI,KAAK,cAAc,KAAK,KAAK,aAAa,KAAK,MAAM,MAAM;AAC3D,eAAS,KAAK,MAAM,QAAQ,IAAI,SAAS,KAAK,YAAW,KAAK,UAAU,CAAC;AAAA,IAC7E;AACA,WAAO,8BAA8B;AAAA,EACzC;AACJ;;;ACLA,IAAqB,QAArB,cAAmC,WAAW;AAAA,EAC7C,YAAY,OAAO;AAClB,UAAM;AACN,SAAK,SAAS;AACd,SAAK,WAAW,mBAAmB;AACnC,SAAK,0BAA0B,CAAE,MAAM,KAAM;AAE7C,SAAK,UAAU;AAWf,SAAK,SAAS;AAOd,SAAK,uBAAuB;AAG5B,SAAK,kBAAkB;AAGvB,SAAK,oBAAoB;AAIzB,SAAK,UAAU;AAGf,SAAK,WAAW,MAAM;AAGtB,SAAK,QAAQ,MAAM;AAEnB,SAAK,aAAa,CAAC;AACnB,SAAK,QAAQ,MAAM;AAMnB,SAAK,QAAQ;AAAA,EACd;AAAA,EAEA,QAAQ;AAEP,QAAI,KAAK,WAAW,MAAM;AACzB,WAAK,OAAO,KAAK,CAAC;AAAA,IACnB;AACA,SAAK,SAAS;AACd,SAAK,QAAQ,MAAM;AACnB,SAAK,WAAW,MAAM;AACtB,SAAK,uBAAuB;AAC5B,SAAK,oBAAoB;AACzB,SAAK,kBAAkB;AACvB,SAAK,QAAQ;AAEb,SAAK,UAAU;AACf,SAAK,QAAQ,MAAM;AACnB,SAAK,aAAa,CAAC;AAEnB,SAAK,QAAQ,MAAM;AAAA,EACpB;AAAA,EAGA,YAAY;AACX,QAAI,KAAK,WAAW,MAAM;AACzB,YAAM;AAAA,IACP;AAMA,UAAM,mBAAmB,KAAK,OAAO,KAAK;AAC1C,QAAI;AACH,iBAAS;AACR,YAAI,KAAK,SAAS;AACjB,eAAK,QAAQ;AACb,iBAAO,KAAK;AAAA,QACb;AACA,aAAK,SAAS;AACd,aAAK,WAAW,MAAM;AACtB,aAAK,uBAAuB,KAAK,OAAO;AACxC,aAAK,oBAAoB,KAAK,QAAQ;AACtC,aAAK,kBAAkB,KAAK,QAAQ;AACpC,aAAK,QAAQ;AACb,YAAI,gBAAgB;AACpB,mBAAS;AACR,eAAK,QAAQ,MAAM;AACnB,cAAI,QAAQ,MAAM;AAClB,cAAI;AACH,oBAAQ,KAAK,QAAQ,MAAM,KAAK,QAAQ,KAAK,KAAK;AAAA,UACnD,SAAS,GAAP;AACD,gBAAG,aAAa,sBAAsB;AACrC,mBAAK,gBAAgB,CAAC;AACtB,mBAAK,QAAQ,CAAC;AAAA,YACf,OAAO;AACN,sBAAQ,IAAI,EAAE,KAAK;AACnB,oBAAM;AAAA,YACP;AAAA,UACD;AACA,cAAI,KAAK,OAAO,GAAG,CAAC,MAAM,MAAM,KAAK;AACpC,iBAAK,UAAU;AAAA,UAChB;AACA,cAAI,KAAK,UAAU,MAAM,cAAc;AACtC,iBAAK,QAAQ;AAAA,UACd;AACA,cAAI,KAAK,UAAU,MAAM,MAAM;AAC9B,4BAAgB;AAChB;AAAA,UACD;AACA,cAAI,KAAK,UAAU,MAAM,MAAM;AAC9B;AAAA,UACD;AAAA,QACD;AACA,YAAI,eAAe;AAClB;AAAA,QACD;AACA,YAAI,KAAK,WAAW,MAAM;AACzB,eAAK,KAAK;AAAA,QACX;AACA,eAAO,KAAK;AAAA,MACb;AAAA,IACD,UAAE;AAGD,WAAK,OAAO,QAAQ,gBAAgB;AAAA,IACrC;AAAA,EACD;AAAA,EASA,OAAO;AACN,SAAK,QAAQ,MAAM;AAAA,EACpB;AAAA,EAEA,OAAO;AACN,SAAK,QAAQ,MAAM;AAAA,EACpB;AAAA,EAEA,KAAK,GAAG;AACP,SAAK,QAAQ;AAAA,EACd;AAAA,EAEA,SAAS,GAAG;AACX,QAAI,KAAK,QAAQ,OAAO;AACvB,cAAQ,IAAI,cAAc,CAAC;AAAA,IAC5B;AACA,SAAK,WAAW,KAAK,KAAK,KAAK;AAC/B,SAAK,KAAK,CAAC;AAAA,EACZ;AAAA,EAEA,UAAU;AACT,QAAI,KAAK,WAAW,WAAW,GAAG;AACjC,YAAM;AAAA,IACP;AACA,QAAI,KAAK,QAAQ,OAAO;AACvB,cAAQ,IAAI,qBAAqB,KAAK,WAAW,MAAM,GAAG,EAAE,CAAC;AAAA,IAC9D;AACA,SAAK,KAAK,KAAK,WAAW,IAAI,CAAC;AAC/B,WAAO,KAAK;AAAA,EACb;AAAA,EAQA,UAAU,OAAO;AAChB,SAAK,SAAS;AAAA,EACf;AAAA,EASA,OAAO;AACN,UAAM,IAAI,KAAK,SAAS;AAAA,MAAO,KAAK;AAAA,MAAyB,KAAK;AAAA,MAChE,KAAK;AAAA,MAAO,KAAK;AAAA,MAAU,KAAK;AAAA,MAAsB,KACnD,aAAa,IAAI;AAAA,MAAG,KAAK;AAAA,MAC5B,KAAK;AAAA,IAAiB;AACxB,SAAK,UAAU,CAAC;AAChB,WAAO;AAAA,EACR;AAAA,EAEA,UAAU;AACT,UAAM,OAAO,KAAK;AAClB,UAAM,OAAO,KAAK;AAClB,UAAM,MAAM,KAAK,SAAS;AAAA,MAAO,KAAK;AAAA,MAAyB,MAAM;AAAA,MACnE;AAAA,MAAM,MAAM;AAAA,MAAiB,KAAK,OAAO;AAAA,MACzC,KAAK,OAAO,QAAQ;AAAA,MAAG;AAAA,MAAM;AAAA,IAAI;AACnC,SAAK,UAAU,GAAG;AAClB,WAAO;AAAA,EACR;AAAA,EAGA,eAAe;AACd,WAAO,KAAK,OAAO;AAAA,EACpB;AAAA,EAMA,eAAe;AACd,UAAM,SAAS,CAAC;AAChB,QAAI,IAAI,KAAK,UAAU;AACvB,WAAO,EAAE,SAAS,MAAM,KAAK;AAC5B,aAAO,KAAK,CAAC;AACb,UAAI,KAAK,UAAU;AAAA,IACpB;AACA,WAAO;AAAA,EACR;AAAA,EAEA,gBAAgB,GAAG;AAClB,UAAM,QAAQ,KAAK;AACnB,UAAM,OAAO,KAAK,OAAO;AACzB,UAAM,OAAO,KAAK,OAAO,QAAQ,OAAO,IAAI;AAC5C,UAAM,MAAM,kCAAkC,KAAK,gBAAgB,IAAI,IAAI;AAC3E,UAAM,WAAW,KAAK,yBAAyB;AAC/C,aAAS;AAAA,MAAY;AAAA,MAAM;AAAA,MAAM,KAAK;AAAA,MACpC,KAAK;AAAA,MAAmB;AAAA,MAAK;AAAA,IAAC;AAAA,EACjC;AAAA,EAEA,gBAAgB,GAAG;AAClB,UAAM,IAAI,CAAC;AACX,aAAS,IAAI,GAAG,IAAI,EAAE,QAAQ,KAAK;AAClC,QAAE,KAAK,EAAE,EAAE;AAAA,IACZ;AACA,WAAO,EAAE,KAAK,EAAE;AAAA,EACjB;AAAA,EAEA,uBAAuB,GAAG;AACzB,QAAI,EAAE,WAAW,CAAC,MAAM,MAAM,KAAK;AAClC,aAAO;AAAA,IACR,WAAW,MAAM,MAAM;AACtB,aAAO;AAAA,IACR,WAAW,MAAM,KAAM;AACtB,aAAO;AAAA,IACR,WAAW,MAAM,MAAM;AACtB,aAAO;AAAA,IACR,OAAO;AACN,aAAO;AAAA,IACR;AAAA,EACD;AAAA,EAEA,oBAAoB,GAAG;AACtB,WAAO,MAAM,KAAK,uBAAuB,CAAC,IAAI;AAAA,EAC/C;AAAA,EAQA,QAAQ,IAAI;AACX,QAAI,KAAK,OAAO,GAAG,CAAC,MAAM,MAAM,KAAK;AACpC,UAAI,cAAc,2BAA2B;AAE5C,aAAK,QAAQ,QAAQ,KAAK,MAAM;AAAA,MACjC,OAAO;AAEN,aAAK,OAAO,QAAQ;AAAA,MACrB;AAAA,IACD;AAAA,EACD;AAAA,EAEA,IAAI,cAAa;AAChB,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,IAAI,YAAY,OAAO;AACtB,SAAK,SAAS;AACd,SAAK,0BAA0B,CAAE,MAAM,KAAK,MAAO;AACnD,SAAK,MAAM;AACX,SAAK,SAAS;AACd,SAAK,0BAA0B,CAAE,MAAM,KAAK,MAAO;AAAA,EACpD;AAAA,EAEA,IAAI,aAAY;AACf,WAAO,KAAK,OAAO;AAAA,EACpB;AAAA,EAEA,IAAI,OAAM;AACT,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,IAAI,KAAK,MAAM;AACd,SAAK,QAAQ;AAAA,EACd;AAAA,EAEA,IAAI,OAAM;AACT,WAAO,KAAK,QAAQ;AAAA,EACrB;AAAA,EAEA,IAAI,KAAK,MAAM;AACd,SAAK,QAAQ,OAAO;AAAA,EACrB;AAAA,EAEA,IAAI,SAAQ;AACX,WAAO,KAAK,QAAQ;AAAA,EACrB;AAAA,EAEA,IAAI,OAAO,QAAQ;AAClB,SAAK,QAAQ,SAAS;AAAA,EACvB;AAAA,EAEA,IAAI,OAAM;AACT,QAAI,KAAK,UAAU,MAAM;AACxB,aAAO,KAAK;AAAA,IACb,OAAO;AACN,aAAO,KAAK,QAAQ,QAAQ,KAAK,MAAM;AAAA,IACxC;AAAA,EACD;AAAA,EAEA,IAAI,KAAK,MAAM;AACd,SAAK,QAAQ;AAAA,EACd;AACD;AAKA,MAAM,eAAe;AACrB,MAAM,OAAO;AACb,MAAM,OAAO;AAEb,MAAM,wBAAwB,MAAM;AACpC,MAAM,SAAS,MAAM;AACrB,MAAM,iBAAiB;AACvB,MAAM,iBAAiB;;;ACjWvB,SAAS,cAAc,GAAG;AACzB,SAAO,EAAE,qBAAqB;AAC/B;AAEA,SAAS,gBAAgB,GAAG,GAAG;AAC9B,MAAK,MAAI,GAAI;AACZ,WAAO;AAAA,EACR,WAAY,MAAI,QAAQ,MAAI,MAAO;AAClC,WAAO;AAAA,EACR;AACM,WAAO,EAAE,mBAAmB,CAAC;AACnC;AAOD,IAAqB,eAArB,MAAkC;AAAA,EACjC,YAAY,SAAS;AAapB,SAAK,eAAe,IAAI,QAAQ,eAAe,eAAe;AAM9D,SAAK,UAAU,YAAY,SAAY,OAAO;AAQ9C,SAAK,WAAW;AAEhB,SAAK,UAAU,CAAC;AAMhB,SAAK,YAAY;AACjB,SAAK,kBAAkB;AAMvB,SAAK,qBAAqB;AAC1B,SAAK,uBAAuB;AAE5B,SAAK,iBAAiB;AAAA,EACvB;AAAA,EAYA,IAAI,QAAQ,YAAY;AACvB,QAAI,eAAe,QAAW;AAC7B,mBAAa;AAAA,IACd;AACA,QAAI,KAAK,UAAU;AAClB,YAAM;AAAA,IACP;AACA,QAAI,OAAO,oBAAoB,gBAAgB,MAAM;AACpD,WAAK,qBAAqB;AAAA,IAC3B;AACA,QAAI,OAAO,0BAA0B,GAAG;AACvC,WAAK,uBAAuB;AAAA,IAC7B;AACA,UAAM,WAAW,KAAK,aAAa,IAAI,MAAM;AAC7C,QAAI,aAAa,QAAQ;AACxB,WAAK,iBAAiB;AACtB,WAAK,QAAQ,KAAK,MAAM;AACxB,aAAO;AAAA,IACR;AAEA,UAAM,iBAAiB,CAAC,KAAK;AAC7B,UAAM,SAAS,MAAM,SAAS,SAAS,OAAO,SAAS,gBAAgB,UAAU;AAMjF,aAAS,0BAA0B,KAAK,IAAK,SAAS,yBAAyB,OAAO,uBAAuB;AAE7G,QAAI,OAAO,4BAA4B;AACtC,eAAS,6BAA6B;AAAA,IACvC;AACA,aAAS,UAAU;AACnB,WAAO;AAAA,EACR;AAAA,EAEA,YAAY;AACX,UAAM,SAAS,IAAI,QAAQ;AAC3B,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,QAAQ,KAAK;AAC7C,aAAO,IAAI,KAAK,QAAQ,GAAG,KAAK;AAAA,IACjC;AACA,WAAO;AAAA,EACR;AAAA,EAEA,gBAAgB;AACf,UAAM,QAAQ,CAAC;AACf,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,QAAQ,KAAK;AAC7C,YAAM,IAAI,KAAK,QAAQ,GAAG;AAC1B,UAAI,MAAM,gBAAgB,MAAM;AAC/B,cAAM,KAAK,EAAE,eAAe;AAAA,MAC7B;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EAEA,gBAAgB,aAAa;AAC5B,QAAI,KAAK,UAAU;AAClB,YAAM;AAAA,IACP;AACA,QAAI,KAAK,aAAa,WAAW,GAAG;AACnC;AAAA,IACD;AACA,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,QAAQ,KAAK;AAC7C,YAAM,SAAS,KAAK,QAAQ;AAC5B,aAAO,UAAU,YAAY,iBAAiB,OAAO,OAAO;AAAA,IAC7D;AAAA,EACD;AAAA,EAEA,OAAO,MAAM;AACZ,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AACrC,WAAK,IAAI,KAAK,EAAE;AAAA,IACjB;AACA,WAAO;AAAA,EACR;AAAA,EAEA,OAAO,OAAO;AACb,WAAO,SAAS,SACd,iBAAiB,gBAClB,YAAY,KAAK,SAAS,MAAM,OAAO,KACvC,KAAK,YAAY,MAAM,WACvB,KAAK,cAAc,MAAM,aACzB,KAAK,oBAAoB,MAAM,mBAC/B,KAAK,uBAAuB,MAAM,sBAClC,KAAK,yBAAyB,MAAM;AAAA,EACtC;AAAA,EAEA,WAAW;AACV,UAAM,OAAO,IAAI,SAAS;AAC1B,SAAK,OAAO,KAAK,OAAO;AACxB,WAAO,KAAK,OAAO;AAAA,EACpB;AAAA,EAEA,eAAe,MAAM;AACpB,QAAI,KAAK,UAAU;AAClB,UAAI,KAAK,mBAAmB,IAAI;AAC/B,aAAK,iBAAiB,KAAK,SAAS;AAAA,MACrC;AACA,WAAK,OAAO,KAAK,cAAc;AAAA,IAChC,OAAO;AACN,WAAK,OAAO,KAAK,SAAS,CAAC;AAAA,IAC5B;AAAA,EACD;AAAA,EAEA,UAAU;AACT,WAAO,KAAK,QAAQ,WAAW;AAAA,EAChC;AAAA,EAEA,SAAS,MAAM;AACd,QAAI,KAAK,iBAAiB,MAAM;AAC/B,YAAM;AAAA,IACP;AACA,WAAO,KAAK,aAAa,SAAS,IAAI;AAAA,EACvC;AAAA,EAEA,aAAa,MAAM;AAClB,QAAI,KAAK,iBAAiB,MAAM;AAC/B,YAAM;AAAA,IACP;AACA,WAAO,KAAK,aAAa,aAAa,IAAI;AAAA,EAC3C;AAAA,EAEA,QAAQ;AACP,QAAI,KAAK,UAAU;AAClB,YAAM;AAAA,IACP;AACA,SAAK,UAAU,CAAC;AAChB,SAAK,iBAAiB;AACtB,SAAK,eAAe,IAAI,QAAQ;AAAA,EACjC;AAAA,EAEA,YAAY,UAAU;AACrB,SAAK,WAAW;AAChB,QAAI,UAAU;AACb,WAAK,eAAe;AAAA,IACrB;AAAA,EACD;AAAA,EAEA,WAAW;AACV,WAAO,cAAc,KAAK,OAAO,KAC/B,KAAK,qBAAqB,yBAAyB,KAAK,qBAAqB,OAC7E,KAAK,cAAc,IAAI,qBAAqB,gBAAgB,KAAK,YAAY,OAC7E,KAAK,oBAAoB,OAAO,sBAAsB,KAAK,kBAAkB,OAC7E,KAAK,uBAAuB,0BAA0B;AAAA,EACzD;AAAA,EAEA,IAAI,QAAO;AACV,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,IAAI,SAAQ;AACX,WAAO,KAAK,QAAQ;AAAA,EACrB;AACD;;;AC/MA,IAAqB,WAArB,MAA8B;AAAA,EAC7B,YAAY,aAAa,SAAS;AACjC,QAAI,gBAAgB,MAAM;AACzB,oBAAc;AAAA,IACf;AACA,QAAI,YAAY,MAAM;AACrB,gBAAU,IAAI,aAAa;AAAA,IAC5B;AACA,SAAK,cAAc;AACnB,SAAK,UAAU;AAKf,SAAK,QAAQ;AACb,SAAK,gBAAgB;AAMrB,SAAK,aAAa;AAClB,SAAK,sBAAsB;AAO3B,SAAK,sBAAsB;AAiB3B,SAAK,aAAa;AAClB,WAAO;AAAA,EACR;AAAA,EAMA,YAAY;AACX,UAAM,OAAO,IAAI,QAAQ;AACzB,QAAI,KAAK,YAAY,MAAM;AAC1B,eAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,QAAQ,KAAK;AAC7C,cAAM,IAAI,KAAK,QAAQ;AACvB,aAAK,IAAI,EAAE,GAAG;AAAA,MACf;AAAA,IACD;AACA,QAAI,KAAK,WAAW,GAAG;AACtB,aAAO;AAAA,IACR,OAAO;AACN,aAAO;AAAA,IACR;AAAA,EACD;AAAA,EAeA,OAAO,OAAO;AAEb,WAAO,SAAS,SACb,iBAAiB,YACjB,KAAK,QAAQ,OAAO,MAAM,OAAO;AAAA,EACrC;AAAA,EAEA,WAAW;AACV,QAAI,IAAI,KAAK,KAAK,cAAc,MAAM,KAAK;AAC3C,QAAG,KAAK,eAAe;AACtB,UAAI,IAAI;AACR,UAAI,KAAK,eAAe;AACvB,YAAI,IAAI,KAAK;AAAA;AAEb,YAAI,IAAI,KAAK;AAAA,IACf;AACA,WAAO;AAAA,EACR;AAAA,EAEA,WAAW;AACV,UAAM,OAAO,IAAI,SAAS;AAC1B,SAAK,OAAO,KAAK,OAAO;AACxB,WAAO,KAAK,OAAO;AAAA,EACpB;AACD;;;ACnIA,IAAqB,eAArB,MAAkC;AAAA,EAC9B,YAAYE,MAAKC,qBAAoB;AAsBjC,SAAK,MAAMD;AACX,SAAK,qBAAqBC;AAC1B,WAAO;AAAA,EACX;AAAA,EAEA,iBAAiB,SAAS;AACtB,QAAI,KAAK,uBAAsB,MAAM;AACjC,aAAO;AAAA,IACX;AACA,UAAM,UAAU,IAAI,QAAQ;AAC5B,WAAO,2BAA2B,SAAS,KAAK,oBAAoB,OAAO;AAAA,EAC/E;AACJ;AAGA,aAAa,QAAQ,IAAI,SAAS,YAAY,IAAI,aAAa,CAAC;;;ACzChE,IAAqB,sBAArB,cAAiD,aAAa;AAAA,EAC1D,cAAc;AACV,UAAM;AACN,SAAK,eAAe,IAAI,QAAQ;AAAA,EACpC;AACJ;;;ACLA,IAAqB,iBAArB,cAA4C,UAAU;AAAA,EAClD,YAAY,QAAQ,QAAQ;AACxB,UAAM,QAAQ,MAAM;AAGpB,UAAM,sBAAsB,OAAO,uBAAuB;AAC1D,SAAK,sBAAsB,wBAAwB,WAAS,OAAO,OAAO,sBAAsB;AAChG,SAAK,iCAAiC,WAAS,OAAO,KAAK,uBAAuB,QAAQ,KAAK,KAAK,IAAI;AACxG,SAAK,uBAAuB,eAAe,UAAU;AACrD,SAAK,qBAAqB,eAAe,UAAU;AACnD,WAAO;AAAA,EACX;AAAA,EAEA,eAAe,MAAM;AACjB,SAAK,OAAO,KAAK,MAAM,aAAa,KAAK,KAAK,KAAK,SAAS,KAAK,iBAAiB,KAAK,gCAAgC,KAAK,mBAAmB;AAAA,EACnJ;AAAA,EAEA,OAAO,OAAO;AACV,WAAO,SAAS,SACX,iBAAiB,kBACd,KAAK,mCAAmC,MAAM,mCAC7C,KAAK,sBAAsB,KAAK,oBAAoB,OAAO,MAAM,mBAAmB,IAAI,CAAC,MAAM,wBAChG,MAAM,OAAO,KAAK;AAAA,EAC9B;AAAA,EAEA,uBAAuB,QAAQ,QAAQ;AACnC,WAAO,OAAO,kCACT,kBAAkB,iBAAkB,OAAO;AAAA,EACpD;AACJ;;;ACPA,IAAqB,2BAArB,cAAsD,YAAY;AAAA,EAC9D,YAAY,QAAQ,QAAQ;AACxB,UAAM,OAAO,UAAU;AACvB,SAAK,SAAS;AACd,SAAK,SAAS;AACd,SAAK,sBAAsB;AAAA,EAC/B;AAAA,EAMA,QAAQ,OAAO;AAEX,SAAK,OAAO,QAAQ,KAAK;AAAA,EAC7B;AAAA,EAEA,eAAe,MAAM;AACjB,SAAK,OAAO,KAAK,YAAY,KAAK,QAAQ,KAAK,MAAM;AAAA,EACzD;AAAA,EAEA,OAAO,OAAO;AACV,QAAI,SAAS,OAAO;AAChB,aAAO;AAAA,IACX,WAAW,EAAG,iBAAiB,2BAA2B;AACtD,aAAO;AAAA,IACX,OAAO;AACH,aAAO,KAAK,WAAW,MAAM,UAAU,KAAK,WAAW,MAAM;AAAA,IACjE;AAAA,EACJ;AACJ;;;ACnDA,IAAqB,sBAArB,MAAyC;AAAA,EASxC,YAAY,cAAc;AACzB,SAAK,eAAe,iBAAiB,OAAO,CAAC,IAAI;AAKjD,SAAK,iBAAiB,SAAS,UAAU,YAAY;AAErD,WAAO;AAAA,EACR;AAAA,EA+BA,qBAAqB,QAAQ;AAC5B,QAAI,sBAAsB;AAC1B,aAAS,IAAI,GAAG,IAAI,KAAK,aAAa,QAAQ,KAAK;AAClD,UAAI,KAAK,aAAa,GAAG,uBACvB,EAAE,KAAK,aAAa,cAAc,2BAA2B;AAC9D,YAAI,wBAAwB,MAAM;AACjC,gCAAsB,KAAK,aAAa,OAAO,CAAC,CAAC;AAAA,QAClD;AACA,4BAAoB,KAAK,IAAI;AAAA,UAAyB;AAAA,UACpD,KAAK,aAAa;AAAA,QAAE;AAAA,MACvB;AAAA,IACD;AACA,QAAI,wBAAwB,MAAM;AACjC,aAAO;AAAA,IACR,OAAO;AACN,aAAO,IAAI,oBAAoB,mBAAmB;AAAA,IACnD;AAAA,EACD;AAAA,EAqBA,QAAQ,OAAO,OAAO,YAAY;AACjC,QAAI,eAAe;AACnB,UAAM,YAAY,MAAM;AACxB,QAAI;AACH,eAAS,IAAI,GAAG,IAAI,KAAK,aAAa,QAAQ,KAAK;AAClD,YAAI,cAAc,KAAK,aAAa;AACpC,YAAI,uBAAuB,0BAA0B;AACpD,gBAAM,SAAS,YAAY;AAC3B,gBAAM,KAAK,aAAa,MAAM;AAC9B,wBAAc,YAAY;AAC1B,yBAAgB,aAAa,WAAY;AAAA,QAC1C,WAAW,YAAY,qBAAqB;AAC3C,gBAAM,KAAK,SAAS;AACpB,yBAAe;AAAA,QAChB;AACA,oBAAY,QAAQ,KAAK;AAAA,MAC1B;AAAA,IACD,UAAE;AACD,UAAI,cAAc;AACjB,cAAM,KAAK,SAAS;AAAA,MACrB;AAAA,IACD;AAAA,EACD;AAAA,EAEA,WAAW;AACV,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,eAAe,MAAM;AACpB,SAAK,OAAO,KAAK,cAAc;AAAA,EAChC;AAAA,EAEA,OAAO,OAAO;AACb,QAAI,SAAS,OAAO;AACnB,aAAO;AAAA,IACR,WAAW,EAAE,iBAAiB,sBAAsB;AACnD,aAAO;AAAA,IACR,WAAW,KAAK,kBAAkB,MAAM,gBAAgB;AACvD,aAAO;AAAA,IACR,WAAW,KAAK,aAAa,UAAU,MAAM,aAAa,QAAQ;AACjE,aAAO;AAAA,IACR,OAAO;AACN,YAAM,aAAa,KAAK,aAAa;AACrC,eAAS,MAAM,GAAG,MAAM,YAAY,EAAE,KAAK;AAC1C,YAAI,CAAC,KAAK,aAAa,KAAK,OAAO,MAAM,aAAa,IAAI,GAAG;AAC5D,iBAAO;AAAA,QACR;AAAA,MACD;AACA,aAAO;AAAA,IACR;AAAA,EACD;AAAA,EAiBA,OAAO,OAAO,qBAAqB,aAAa;AAC/C,QAAI,wBAAwB,MAAM;AACjC,aAAO,IAAI,oBAAoB,CAAE,WAAY,CAAC;AAAA,IAC/C;AACA,UAAM,eAAe,oBAAoB,aAAa,OAAO,CAAE,WAAY,CAAC;AAC5E,WAAO,IAAI,oBAAoB,YAAY;AAAA,EAC5C;AACD;;;ACtJA,SAAS,cAAc,KAAK;AACxB,MAAI,QAAQ;AACZ,MAAI,OAAO;AACX,MAAI,SAAS;AACb,MAAI,WAAW;AACnB;AAEA,IAAM,WAAN,MAAe;AAAA,EACX,cAAc;AACV,kBAAc,IAAI;AAAA,EACtB;AAAA,EAEA,QAAQ;AACJ,kBAAc,IAAI;AAAA,EACtB;AACJ;AAEA,IAAqB,oBAArB,cAA+C,aAAa;AAAA,EAiBxD,YAAY,OAAOC,MAAK,eAAeC,qBAAoB;AACvD,UAAMD,MAAKC,mBAAkB;AAC7B,SAAK,gBAAgB;AACrB,SAAK,QAAQ;AAOb,SAAK,aAAa;AAElB,SAAK,OAAO;AAKZ,SAAK,SAAS;AACd,SAAK,OAAO,MAAM;AAKlB,SAAK,aAAa,IAAI,SAAS;AAAA,EACnC;AAAA,EAEA,UAAU,WAAW;AACjB,SAAK,SAAS,UAAU;AACxB,SAAK,OAAO,UAAU;AACtB,SAAK,OAAO,UAAU;AACtB,SAAK,aAAa,UAAU;AAAA,EAChC;AAAA,EAEA,MAAM,OAAO,MAAM;AACf,SAAK,OAAO;AACZ,UAAM,OAAO,MAAM,KAAK;AACxB,QAAI;AACA,WAAK,aAAa,MAAM;AACxB,WAAK,WAAW,MAAM;AACtB,YAAM,MAAM,KAAK,cAAc;AAC/B,UAAI,IAAI,OAAO,MAAM;AACjB,eAAO,KAAK,SAAS,KAAK;AAAA,MAC9B,OAAO;AACH,eAAO,KAAK,QAAQ,OAAO,IAAI,EAAE;AAAA,MACrC;AAAA,IACJ,UAAE;AACE,YAAM,QAAQ,IAAI;AAAA,IACtB;AAAA,EACJ;AAAA,EAEA,QAAQ;AACJ,SAAK,WAAW,MAAM;AACtB,SAAK,aAAa;AAClB,SAAK,OAAO;AACZ,SAAK,SAAS;AACd,SAAK,OAAO,MAAM;AAAA,EACtB;AAAA,EAEA,SAAS,OAAO;AACZ,UAAM,aAAa,KAAK,IAAI,iBAAiB,KAAK;AAElD,QAAI,kBAAkB,OAAO;AACzB,cAAQ,IAAI,mBAAmB,KAAK,OAAO,aAAa,UAAU;AAAA,IACtE;AACA,UAAM,WAAW,KAAK;AACtB,UAAM,aAAa,KAAK,kBAAkB,OAAO,UAAU;AAC3D,UAAM,eAAe,WAAW;AAChC,eAAW,qBAAqB;AAEhC,UAAM,OAAO,KAAK,YAAY,UAAU;AACxC,QAAI,CAAC,cAAc;AACf,WAAK,cAAc,KAAK,MAAM,KAAK;AAAA,IACvC;AAEA,UAAM,UAAU,KAAK,QAAQ,OAAO,IAAI;AAExC,QAAI,kBAAkB,OAAO;AACzB,cAAQ,IAAI,yBAAyB,KAAK,cAAc,UAAU,cAAc,CAAC;AAAA,IACrF;AACA,WAAO;AAAA,EACX;AAAA,EAEA,QAAQ,OAAO,KAAK;AAChB,QAAI,kBAAkB,OAAO;AACzB,cAAQ,IAAI,yBAAyB,IAAI,OAAO;AAAA,IACpD;AACA,QAAI,IAAI,eAAe;AAEnB,WAAK,gBAAgB,KAAK,YAAY,OAAO,GAAG;AAAA,IACpD;AACA,QAAI,IAAI,MAAM,GAAG,CAAC;AAClB,QAAI,IAAI;AAER,eAAU;AACN,UAAI,kBAAkB,OAAO;AACzB,gBAAQ,IAAI,oCAAoC,EAAE,OAAO;AAAA,MAC7D;AAsBA,UAAI,SAAS,KAAK,uBAAuB,GAAG,CAAC;AAE7C,UAAI,WAAW,MAAM;AACjB,iBAAS,KAAK,mBAAmB,OAAO,GAAG,CAAC;AAAA,MAEhD;AACA,UAAI,WAAW,aAAa,OAAO;AAC/B;AAAA,MACJ;AAKA,UAAI,MAAM,MAAM,KAAK;AACjB,aAAK,QAAQ,KAAK;AAAA,MACtB;AACA,UAAI,OAAO,eAAe;AACtB,aAAK,gBAAgB,KAAK,YAAY,OAAO,MAAM;AACnD,YAAI,MAAM,MAAM,KAAK;AACjB;AAAA,QACJ;AAAA,MACJ;AACA,UAAI,MAAM,GAAG,CAAC;AACd,UAAI;AAAA,IACR;AACA,WAAO,KAAK,aAAa,KAAK,YAAY,OAAO,EAAE,SAAS,CAAC;AAAA,EACjE;AAAA,EAaA,uBAAuB,GAAG,GAAG;AACzB,QAAI,EAAE,UAAU,QAAQ,IAAI,kBAAkB,gBAAgB,IAAI,kBAAkB,cAAc;AAC9F,aAAO;AAAA,IACX;AAEA,QAAI,SAAS,EAAE,MAAM,IAAI,kBAAkB;AAC3C,QAAI,WAAW,QAAW;AACtB,eAAS;AAAA,IACb;AACA,QAAI,kBAAkB,SAAS,WAAW,MAAM;AAC5C,cAAQ,IAAI,iBAAiB,EAAE,cAAc,cAAc,OAAO,WAAW;AAAA,IACjF;AACA,WAAO;AAAA,EACX;AAAA,EAcA,mBAAmB,OAAO,GAAG,GAAG;AAC5B,UAAM,QAAQ,IAAI,oBAAoB;AAGtC,SAAK,sBAAsB,OAAO,EAAE,SAAS,OAAO,CAAC;AAErD,QAAI,MAAM,MAAM,WAAW,GAAG;AAC1B,UAAI,CAAC,MAAM,oBAAoB;AAG3B,aAAK,WAAW,GAAG,GAAG,aAAa,KAAK;AAAA,MAC5C;AAEA,aAAO,aAAa;AAAA,IACxB;AAEA,WAAO,KAAK,WAAW,GAAG,GAAG,MAAM,KAAK;AAAA,EAC5C;AAAA,EAEA,aAAa,YAAY,OAAO,OAAO,GAAG;AACtC,QAAI,KAAK,WAAW,aAAa,MAAM;AACnC,YAAM,sBAAsB,WAAW,SAAS;AAChD,WAAK;AAAA,QAAO;AAAA,QAAO;AAAA,QAAqB,KAAK;AAAA,QACzC,WAAW;AAAA,QAAO,WAAW;AAAA,QAAM,WAAW;AAAA,MAAM;AACxD,aAAO,WAAW,SAAS;AAAA,IAC/B,OAAO;AAEH,UAAI,MAAM,MAAM,OAAO,MAAM,UAAU,KAAK,YAAY;AACpD,eAAO,MAAM;AAAA,MACjB;AACA,YAAM,IAAI,0BAA0B,KAAK,OAAO,OAAO,KAAK,YAAY,KAAK;AAAA,IACjF;AAAA,EACJ;AAAA,EAOA,sBAAsB,OAAO,SAAS,OAAO,GAAG;AAG5C,QAAI,UAAU,IAAI;AAClB,aAAS,IAAI,GAAG,IAAI,QAAQ,MAAM,QAAQ,KAAK;AAC3C,YAAM,MAAM,QAAQ,MAAM;AAC1B,YAAM,+BAAgC,IAAI,QAAQ;AAClD,UAAI,gCAAgC,IAAI,gCAAgC;AACpE;AAAA,MACJ;AACA,UAAI,kBAAkB,OAAO;AACzB,gBAAQ,IAAI,sBAAsB,KAAK,aAAa,CAAC,GAAG,IACnD,SAAS,KAAK,OAAO,IAAI,CAAC;AAAA,MACnC;AACA,eAAS,IAAI,GAAG,IAAI,IAAI,MAAM,YAAY,QAAQ,KAAK;AACnD,cAAM,QAAQ,IAAI,MAAM,YAAY;AACpC,cAAM,SAAS,KAAK,mBAAmB,OAAO,CAAC;AAC/C,YAAI,WAAW,MAAM;AACjB,cAAI,sBAAsB,IAAI;AAC9B,cAAI,wBAAwB,MAAM;AAC9B,kCAAsB,oBAAoB,qBAAqB,MAAM,QAAQ,KAAK,UAAU;AAAA,UAChG;AACA,gBAAM,oBAAqB,MAAM,MAAM;AACvC,gBAAM,SAAS,IAAI,eAAe,EAAC,OAAO,QAAQ,oBAAwC,GAAG,GAAG;AAChG,cAAI,KAAK;AAAA,YAAQ;AAAA,YAAO;AAAA,YAAQ;AAAA,YAC5B;AAAA,YAA8B;AAAA,YAAM;AAAA,UAAiB,GAAG;AAGxD,sBAAU,IAAI;AAAA,UAClB;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,OAAO,OAAO,qBAAqB,YAAY,OAAO,MAAM,SAAS;AACjE,QAAI,kBAAkB,OAAO;AACzB,cAAQ,IAAI,eAAe,mBAAmB;AAAA,IAClD;AAEA,UAAM,KAAK,KAAK;AAChB,SAAK,OAAO;AACZ,SAAK,SAAS;AACd,QAAI,wBAAwB,QAAQ,KAAK,UAAU,MAAM;AACrD,0BAAoB,QAAQ,KAAK,OAAO,OAAO,UAAU;AAAA,IAC7D;AAAA,EACJ;AAAA,EAEA,mBAAmB,OAAO,GAAG;AACzB,QAAI,MAAM,QAAQ,GAAG,GAAG,MAAM,cAAc,GAAG;AAC3C,aAAO,MAAM;AAAA,IACjB,OAAO;AACH,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEA,kBAAkB,OAAO,GAAG;AACxB,UAAM,iBAAiB,kBAAkB;AACzC,UAAM,UAAU,IAAI,oBAAoB;AACxC,aAAS,IAAI,GAAG,IAAI,EAAE,YAAY,QAAQ,KAAK;AAC3C,YAAM,SAAS,EAAE,YAAY,GAAG;AAChC,YAAM,MAAM,IAAI,eAAe,EAAC,OAAO,QAAQ,KAAK,IAAI,GAAG,SAAS,eAAc,GAAG,IAAI;AACzF,WAAK,QAAQ,OAAO,KAAK,SAAS,OAAO,OAAO,KAAK;AAAA,IACzD;AACA,WAAO;AAAA,EACX;AAAA,EAYA,QAAQ,OAAO,QAAQ,SACf,8BAA8B,aAAa,mBAAmB;AAClE,QAAI,MAAM;AACV,QAAI,kBAAkB,OAAO;AACzB,cAAQ,IAAI,aAAa,OAAO,SAAS,KAAK,OAAO,IAAI,IAAI,GAAG;AAAA,IACpE;AACA,QAAI,OAAO,iBAAiB,eAAe;AACvC,UAAI,kBAAkB,OAAO;AACzB,YAAI,KAAK,UAAU,MAAM;AACrB,kBAAQ,IAAI,gCAAgC,KAAK,MAAM,UAAU,OAAO,MAAM,YAAY,MAAM;AAAA,QACpG,OAAO;AACH,kBAAQ,IAAI,6BAA6B,MAAM;AAAA,QACnD;AAAA,MACJ;AACA,UAAI,OAAO,YAAY,QAAQ,OAAO,QAAQ,aAAa,GAAG;AAC1D,YAAI,OAAO,YAAY,QAAQ,OAAO,QAAQ,QAAQ,GAAG;AACrD,kBAAQ,IAAI,MAAM;AAClB,iBAAO;AAAA,QACX,OAAO;AACH,kBAAQ,IAAI,IAAI,eAAe,EAAC,OAAO,OAAO,OAAO,SAAS,kBAAkB,MAAK,GAAG,MAAM,CAAC;AAC/F,yCAA+B;AAAA,QACnC;AAAA,MACJ;AACA,UAAI,OAAO,YAAY,QAAQ,CAAC,OAAO,QAAQ,QAAQ,GAAG;AACtD,iBAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,QAAQ,KAAK;AAC5C,cAAI,OAAO,QAAQ,eAAe,CAAC,MAAM,kBAAkB,oBAAoB;AAC3E,kBAAM,aAAa,OAAO,QAAQ,UAAU,CAAC;AAC7C,kBAAM,cAAc,KAAK,IAAI,OAAO,OAAO,QAAQ,eAAe,CAAC;AACnE,kBAAM,IAAI,eAAe,EAAC,OAAO,aAAa,SAAS,WAAU,GAAG,MAAM;AAC1E,2CAA+B,KAAK;AAAA,cAAQ;AAAA,cAAO;AAAA,cAC/C;AAAA,cAAS;AAAA,cAA8B;AAAA,cACvC;AAAA,YAAiB;AAAA,UACzB;AAAA,QACJ;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAEA,QAAI,CAAC,OAAO,MAAM,wBAAwB;AACtC,UAAI,CAAC,gCAAgC,CAAC,OAAO,gCAAgC;AACzE,gBAAQ,IAAI,MAAM;AAAA,MACtB;AAAA,IACJ;AACA,aAAS,IAAI,GAAG,IAAI,OAAO,MAAM,YAAY,QAAQ,KAAK;AACtD,YAAM,QAAQ,OAAO,MAAM,YAAY;AACvC,YAAM,KAAK,iBAAiB,OAAO,QAAQ,OAAO,SAAS,aAAa,iBAAiB;AACzF,UAAI,QAAQ,MAAM;AACd,uCAA+B,KAAK;AAAA,UAAQ;AAAA,UAAO;AAAA,UAAK;AAAA,UACpD;AAAA,UAA8B;AAAA,UAAa;AAAA,QAAiB;AAAA,MACpE;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EAGA,iBAAiB,OAAO,QAAQ,OACf,SAAS,aAAa,mBAAmB;AACtD,QAAI,MAAM;AACV,QAAI,MAAM,sBAAsB,WAAW,MAAM;AAC7C,YAAM,aAAa,2BAA2B,OAAO,OAAO,SAAS,MAAM,YAAY,WAAW;AAClG,YAAM,IAAI,eAAe,EAAC,OAAO,MAAM,QAAQ,SAAS,WAAU,GAAG,MAAM;AAAA,IAC/E,WAAW,MAAM,sBAAsB,WAAW,YAAY;AAC1D,YAAM;AAAA,IACV,WAAW,MAAM,sBAAsB,WAAW,WAAW;AAmBzD,UAAI,kBAAkB,OAAO;AACzB,gBAAQ,IAAI,eAAe,MAAM,YAAY,MAAM,MAAM,SAAS;AAAA,MACtE;AACA,cAAQ,qBAAqB;AAC7B,UAAI,KAAK,kBAAkB,OAAO,MAAM,WAAW,MAAM,WAAW,WAAW,GAAG;AAC9E,cAAM,IAAI,eAAe,EAAC,OAAO,MAAM,OAAM,GAAG,MAAM;AAAA,MAC1D;AAAA,IACJ,WAAW,MAAM,sBAAsB,WAAW,QAAQ;AACtD,UAAI,OAAO,YAAY,QAAQ,OAAO,QAAQ,aAAa,GAAG;AAa1D,cAAM,sBAAsB,oBAAoB;AAAA,UAAO,OAAO;AAAA,UAC1D,KAAK,IAAI,aAAa,MAAM;AAAA,QAAY;AAC5C,cAAM,IAAI,eAAe,EAAC,OAAO,MAAM,QAAQ,oBAAwC,GAAG,MAAM;AAAA,MACpG,OAAO;AAEH,cAAM,IAAI,eAAe,EAAC,OAAO,MAAM,OAAM,GAAG,MAAM;AAAA,MAC1D;AAAA,IACJ,WAAW,MAAM,sBAAsB,WAAW,SAAS;AACvD,YAAM,IAAI,eAAe,EAAC,OAAO,MAAM,OAAM,GAAG,MAAM;AAAA,IAC1D,WAAW,MAAM,sBAAsB,WAAW,QAC9C,MAAM,sBAAsB,WAAW,SACvC,MAAM,sBAAsB,WAAW,KAAK;AAC5C,UAAI,mBAAmB;AACnB,YAAI,MAAM,QAAQ,MAAM,KAAK,GAAG,MAAM,cAAc,GAAG;AACnD,gBAAM,IAAI,eAAe,EAAC,OAAO,MAAM,OAAM,GAAG,MAAM;AAAA,QAC1D;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EAuBA,kBAAkB,OAAO,WACP,WAAW,aAAa;AAEtC,QAAI,KAAK,UAAU,MAAM;AACrB,aAAO;AAAA,IACX;AACA,QAAI,CAAC,aAAa;AACd,aAAO,KAAK,MAAM,QAAQ,MAAM,WAAW,SAAS;AAAA,IACxD;AACA,UAAM,cAAc,KAAK;AACzB,UAAM,YAAY,KAAK;AACvB,UAAM,QAAQ,MAAM;AACpB,UAAM,SAAS,MAAM,KAAK;AAC1B,QAAI;AACA,WAAK,QAAQ,KAAK;AAClB,aAAO,KAAK,MAAM,QAAQ,MAAM,WAAW,SAAS;AAAA,IACxD,UAAE;AACE,WAAK,SAAS;AACd,WAAK,OAAO;AACZ,YAAM,KAAK,KAAK;AAChB,YAAM,QAAQ,MAAM;AAAA,IACxB;AAAA,EACJ;AAAA,EAEA,gBAAgB,UAAU,OAAO,UAAU;AACvC,aAAS,QAAQ,MAAM;AACvB,aAAS,OAAO,KAAK;AACrB,aAAS,SAAS,KAAK;AACvB,aAAS,WAAW;AAAA,EACxB;AAAA,EAEA,WAAW,OAAO,IAAI,IAAI,MAAM;AAC5B,QAAI,OAAO,QAAW;AAClB,WAAK;AAAA,IACT;AACA,QAAI,SAAS,QAAW;AACpB,aAAO;AAAA,IACX;AACA,QAAI,OAAO,QAAQ,SAAS,MAAM;AAY9B,YAAM,eAAe,KAAK;AAC1B,WAAK,qBAAqB;AAE1B,WAAK,KAAK,YAAY,IAAI;AAE1B,UAAI,cAAc;AACd,eAAO;AAAA,MACX;AAAA,IACJ;AAEA,QAAI,KAAK,kBAAkB,gBAAgB,KAAK,kBAAkB,cAAc;AAE5E,aAAO;AAAA,IACX;AACA,QAAI,kBAAkB,OAAO;AACzB,cAAQ,IAAI,UAAU,QAAQ,SAAS,KAAK,WAAW,EAAE;AAAA,IAC7D;AACA,QAAI,MAAM,UAAU,MAAM;AAEtB,YAAM,QAAQ,CAAC;AAAA,IACnB;AACA,UAAM,MAAM,KAAK,kBAAkB,gBAAgB;AAEnD,WAAO;AAAA,EACX;AAAA,EAQA,YAAY,SAAS;AACjB,UAAM,WAAW,IAAI,SAAS,MAAM,OAAO;AAC3C,QAAI,+BAA+B;AACnC,aAAS,IAAI,GAAG,IAAI,QAAQ,MAAM,QAAQ,KAAK;AAC3C,YAAM,MAAM,QAAQ,MAAM;AAC1B,UAAI,IAAI,iBAAiB,eAAe;AACpC,uCAA+B;AAC/B;AAAA,MACJ;AAAA,IACJ;AACA,QAAI,iCAAiC,MAAM;AACvC,eAAS,gBAAgB;AACzB,eAAS,sBAAsB,6BAA6B;AAC5D,eAAS,aAAa,KAAK,IAAI,gBAAgB,6BAA6B,MAAM;AAAA,IACtF;AACA,UAAM,MAAM,KAAK,cAAc,KAAK;AACpC,UAAM,WAAW,IAAI,OAAO,IAAI,QAAQ;AACxC,QAAI,aAAa,MAAM;AACnB,aAAO;AAAA,IACX;AACA,UAAM,WAAW;AACjB,aAAS,cAAc,IAAI,OAAO;AAClC,YAAQ,YAAY,IAAI;AACxB,aAAS,UAAU;AACnB,QAAI,OAAO,IAAI,QAAQ;AACvB,WAAO;AAAA,EACX;AAAA,EAEA,OAAO,MAAM;AACT,WAAO,KAAK,cAAc;AAAA,EAC9B;AAAA,EAGA,QAAQ,OAAO;AAEX,WAAO,MAAM,QAAQ,KAAK,YAAY,MAAM,QAAQ,CAAC;AAAA,EACzD;AAAA,EAEA,QAAQ,OAAO;AACX,UAAM,UAAU,MAAM,GAAG,CAAC;AAC1B,QAAI,YAAY,KAAK,WAAW,CAAC,GAAG;AAChC,WAAK,QAAQ;AACb,WAAK,SAAS;AAAA,IAClB,OAAO;AACH,WAAK,UAAU;AAAA,IACnB;AACA,UAAM,QAAQ;AAAA,EAClB;AAAA,EAEA,aAAa,IAAI;AACb,QAAI,OAAO,IAAI;AACX,aAAO;AAAA,IACX,OAAO;AACH,aAAO,MAAM,OAAO,aAAa,EAAE,IAAI;AAAA,IAC3C;AAAA,EACJ;AACJ;AAEA,kBAAkB,QAAQ;AAC1B,kBAAkB,YAAY;AAE9B,kBAAkB,eAAe;AACjC,kBAAkB,eAAe;;;AC3nBjC,IAAqB,iBAArB,MAAoC;AAAA,EAChC,YAAY,MAAM,KAAK;AACnB,SAAK,MAAM;AACX,SAAK,OAAO;AAAA,EAChB;AAAA,EAEA,WAAW;AACP,WAAO,MAAM,KAAK,OAAO,OAAO,KAAK,MAAM;AAAA,EAC/C;AACJ;;;ACZA,IAAqB,UAArB,MAA6B;AAAA,EAEzB,cAAc;AACV,SAAK,OAAO,CAAC;AAAA,EACjB;AAAA,EAEA,IAAI,KAAK;AACL,WAAO,KAAK,KAAK,OAAO,QAAQ;AAAA,EACpC;AAAA,EAEA,IAAI,KAAK,OAAO;AACZ,SAAK,KAAK,OAAO,OAAO;AAAA,EAC5B;AAAA,EAEA,SAAS;AACL,WAAO,OAAO,KAAK,KAAK,IAAI,EAAE,OAAO,SAAO,IAAI,WAAW,IAAI,CAAC,EAAE,IAAI,SAAO,KAAK,KAAK,MAAM,IAAI;AAAA,EACrG;AACJ;;;ACDA,IAAM,iBAAiB;AAAA,EAsBnB,KAAK;AAAA,EAoBL,IAAI;AAAA,EAoBJ,0BAA0B;AAAA,EA+F1B,qCAAqC,SAAU,MAAM,SAAS;AAM1D,QAAI,eAAe,2BAA2B,OAAO,GAAG;AACpD,aAAO;AAAA,IACX;AAEA,QAAI,SAAS,eAAe,KAAK;AAI7B,UAAI,QAAQ,oBAAoB;AAE5B,cAAM,MAAM,IAAI,aAAa;AAC7B,iBAAQ,IAAE,GAAE,IAAE,QAAQ,MAAM,QAAO,KAAK;AACpC,cAAI,IAAI,QAAQ,MAAM;AACtB,cAAI,IAAI,UAAU,EAAC,iBAAgB,gBAAgB,KAAI,GAAG,CAAC;AAC3D,cAAI,IAAI,CAAC;AAAA,QACb;AACA,kBAAU;AAAA,MACd;AAAA,IAEJ;AAEA,UAAM,UAAU,eAAe,yBAAyB,OAAO;AAC/D,WAAO,eAAe,qBAAqB,OAAO,KAAK,CAAC,eAAe,6BAA6B,OAAO;AAAA,EAC/G;AAAA,EAYA,0BAA0B,SAAS,SAAS;AACxC,aAAQ,IAAE,GAAE,IAAE,QAAQ,MAAM,QAAO,KAAK;AACpC,YAAM,IAAI,QAAQ,MAAM;AACxB,UAAI,EAAE,iBAAiB,eAAe;AAClC,eAAO;AAAA,MACX;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EAYA,4BAA4B,SAAS,SAAS;AAC1C,aAAQ,IAAE,GAAE,IAAE,QAAQ,MAAM,QAAO,KAAK;AACpC,YAAM,IAAI,QAAQ,MAAM;AACxB,UAAI,EAAE,EAAE,iBAAiB,gBAAgB;AACrC,eAAO;AAAA,MACX;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EAgJA,4BAA4B,SAAS,SAAS;AAC1C,WAAO,eAAe,mBAAmB,OAAO;AAAA,EACpD;AAAA,EAUA,oBAAoB,SAAS,SAAS;AAClC,WAAO,CAAE,eAAe,wBAAwB,OAAO;AAAA,EAC3D;AAAA,EASA,yBAAyB,SAAS,SAAS;AACvC,aAAQ,IAAE,GAAE,IAAE,QAAQ,QAAO,KAAK;AAC9B,YAAM,OAAO,QAAQ;AACrB,UAAI,KAAK,WAAS,GAAG;AACjB,eAAO;AAAA,MACX;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EAWA,sBAAsB,SAAS,SAAS;AACpC,aAAQ,IAAE,GAAE,IAAE,QAAQ,QAAO,KAAK;AAC9B,YAAM,OAAO,QAAQ;AACrB,UAAI,KAAK,SAAO,GAAG;AACf,eAAO;AAAA,MACX;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EAUA,iBAAiB,SAAS,SAAS;AAC/B,QAAI,QAAQ;AACZ,aAAQ,IAAE,GAAE,IAAE,QAAQ,QAAO,KAAK;AAC9B,YAAM,OAAO,QAAQ;AACrB,UAAI,UAAU,MAAM;AAChB,gBAAQ;AAAA,MACZ,WAAW,SAAO,OAAO;AACrB,eAAO;AAAA,MACX;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EAUA,cAAc,SAAS,SAAS;AAC5B,UAAM,MAAM,eAAe,QAAQ,OAAO;AAC1C,QAAI,IAAI,WAAS,GAAG;AAChB,aAAO,IAAI,SAAS;AAAA,IACxB,OAAO;AACH,aAAO,IAAI;AAAA,IACf;AAAA,EACJ;AAAA,EAUA,SAAS,SAAS,SAAS;AACvB,UAAM,MAAM,IAAI,OAAO;AACvB,YAAQ,IAAK,SAAS,MAAM;AAAE,UAAI,GAAG,IAAI;AAAA,IAAG,CAAC;AAC7C,WAAO;AAAA,EACX;AAAA,EAWA,0BAA0B,SAAS,SAAS;AACxC,UAAM,eAAe,IAAI,QAAQ;AACjC,iBAAa,eAAe,SAAS,KAAK;AAAE,eAAS,UAAU,IAAI,MAAM,aAAa,IAAI,OAAO;AAAA,IAAG;AACpG,iBAAa,iBAAiB,SAAS,IAAI,IAAI;AAAE,aAAO,GAAG,MAAM,gBAAgB,GAAG,MAAM,eAAe,GAAG,QAAQ,OAAO,GAAG,OAAO;AAAA,IAAE;AACvI,YAAQ,MAAM,IAAI,SAAS,KAAK;AAC5B,UAAI,OAAO,aAAa,IAAI,GAAG;AAC/B,UAAI,SAAS,MAAM;AACf,eAAO,IAAI,OAAO;AAClB,qBAAa,IAAI,KAAK,IAAI;AAAA,MAC9B;AACA,WAAK,IAAI,IAAI,GAAG;AAAA,IACpB,CAAC;AACD,WAAO,aAAa,UAAU;AAAA,EAClC;AAAA,EAUA,kBAAkB,SAAS,SAAS;AAChC,UAAM,IAAI,IAAI,QAAQ;AACtB,YAAQ,MAAM,IAAI,SAAS,GAAG;AAC1B,UAAI,OAAO,EAAE,IAAI,EAAE,KAAK;AACxB,UAAI,SAAS,MAAM;AACf,eAAO,IAAI,OAAO;AAClB,UAAE,IAAI,EAAE,OAAO,IAAI;AAAA,MACvB;AACA,WAAK,IAAI,EAAE,GAAG;AAAA,IAClB,CAAC;AACD,WAAO;AAAA,EACX;AAAA,EAEA,8BAA8B,SAAS,SAAS;AAC5C,UAAM,SAAS,eAAe,iBAAiB,OAAO,EAAE,OAAO;AAC/D,aAAQ,IAAE,GAAE,IAAE,OAAO,QAAO,KAAK;AAC7B,UAAI,OAAO,GAAG,WAAS,GAAG;AACtB,eAAO;AAAA,MACX;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EAEA,oBAAoB,SAAS,SAAS;AAClC,QAAI,SAAS;AACb,aAAQ,IAAE,GAAE,IAAE,QAAQ,QAAO,KAAK;AAC9B,YAAM,OAAO,QAAQ;AACrB,YAAM,SAAS,KAAK,SAAS;AAC7B,UAAG,WAAS,MAAM;AACd,iBAAS;AAAA,MACb,WAAU,WAAS,QAAQ;AACvB,eAAO,IAAI;AAAA,MACf;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AACJ;AAEA,IAAO,yBAAQ;;;ACviBf,IAAqB,uBAArB,cAAkD,qBAAqB;AAAA,EACnE,YAAY,YAAY,OAAO,YAAY,gBAAgB,gBAAgB,KAAK;AAC5E,UAAM,OAAO,WAAW;AACxB,qBAAiB,kBAAkB,WAAW,gBAAgB;AAC9D,iBAAa,cAAc,WAAW,gBAAgB;AACtD,YAAQ,SAAS,WAAW,eAAe;AAC3C,UAAM,EAAC,SAAS,IAAI,YAAwB,OAAc,IAAQ,CAAC;AAGnE,SAAK,iBAAiB;AAKtB,SAAK,aAAa;AAClB,SAAK,iBAAiB;AAAA,EAC1B;AACJ;;;ACxBA,IAAqB,aAArB,MAAgC;AAAA,EAE5B,YAAY,gBAAgB;AACxB,SAAK,iBAAiB,kBAAkB;AACxC,SAAK,WAAW,IAAI,KAAK,eAAe;AAAA,EAC5C;AAAA,EAEA,IAAI,GAAG,GAAG;AACN,UAAM,IAAI,KAAK,SAAS,IAAI,CAAC,KAAK;AAClC,WAAO,MAAM,OAAO,OAAQ,EAAE,IAAI,CAAC,KAAK;AAAA,EAC5C;AAAA,EAEA,IAAI,GAAG,GAAG,GAAG;AACT,QAAI,IAAI,KAAK,SAAS,IAAI,CAAC,KAAK;AAChC,QAAI,MAAM,MAAM;AACZ,UAAI,IAAI,KAAK,eAAe;AAC5B,WAAK,SAAS,IAAI,GAAG,CAAC;AAAA,IAC1B;AACA,MAAE,IAAI,GAAG,CAAC;AAAA,EACd;AAEJ;;;ACyOA,IAAqB,qBAArB,cAAgD,aAAa;AAAA,EACzD,YAAY,QAAQC,MAAK,eAAeC,qBAAoB;AACxD,UAAMD,MAAKC,mBAAkB;AAC7B,SAAK,SAAS;AACd,SAAK,gBAAgB;AAErB,SAAK,iBAAiB,uBAAe;AAErC,SAAK,SAAS;AACd,SAAK,cAAc;AACnB,SAAK,gBAAgB;AACrB,SAAK,OAAO;AAUZ,SAAK,aAAa;AAClB,SAAK,QAAQ;AACb,SAAK,gBAAgB;AACrB,SAAK,YAAY;AACjB,SAAK,2BAA2B;AAChC,SAAK,YAAY;AACjB,SAAK,cAAc;AAAA,EACvB;AAAA,EAEA,QAAQ;AAAA,EAAC;AAAA,EAET,gBAAgB,OAAO,UAAU,cAAc;AAC3C,QAAI,KAAK,SAAS,KAAK,0BAA0B;AAC7C,cAAQ,IAAI,8BAA8B,WACnB,kBAAkB,KAAK,iBAAiB,KAAK,IAC7C,WAAW,MAAM,GAAG,CAAC,EAAE,OAAO,MAC9B,MAAM,GAAG,CAAC,EAAE,MAAM;AAAA,IAC7C;AACA,SAAK,SAAS;AACd,SAAK,cAAc,MAAM;AACzB,SAAK,gBAAgB;AAErB,UAAM,MAAM,KAAK,cAAc;AAC/B,SAAK,OAAO;AACZ,UAAM,IAAI,MAAM,KAAK;AACrB,UAAM,QAAQ,MAAM;AAIpB,QAAI;AACA,UAAI;AACJ,UAAI,IAAI,eAAe;AAGnB,aAAK,IAAI,wBAAwB,KAAK,OAAO,cAAc,CAAC;AAAA,MAChE,OAAO;AAEH,aAAK,IAAI;AAAA,MACb;AACA,UAAI,OAAK,MAAM;AACX,YAAI,iBAAe,MAAM;AACrB,yBAAe,YAAY;AAAA,QAC/B;AACA,YAAI,KAAK,SAAS,KAAK,0BAA0B;AAC7C,kBAAQ,IAAI,yBAAyB,IAAI,WACtB,kBAAkB,KAAK,iBAAiB,KAAK,IAC7C,oBAAoB,aAAa,SAAS,KAAK,OAAO,SAAS,CAAC;AAAA,QACvF;AAEA,cAAM,UAAU;AAChB,YAAI,aAAa,KAAK,kBAAkB,IAAI,eAAe,YAAY,OAAO,OAAO;AAErF,YAAI,IAAI,eAAe;AAOnB,cAAI,GAAG,UAAU;AACjB,uBAAa,KAAK,sBAAsB,UAAU;AAClD,eAAK,KAAK,YAAY,KAAK,IAAI,SAAS,MAAM,UAAU,CAAC;AACzD,cAAI,wBAAwB,KAAK,OAAO,cAAc,GAAG,EAAE;AAAA,QAC/D,OAAO;AACH,eAAK,KAAK,YAAY,KAAK,IAAI,SAAS,MAAM,UAAU,CAAC;AACzD,cAAI,KAAK;AAAA,QACb;AAAA,MACJ;AACA,YAAM,MAAM,KAAK,QAAQ,KAAK,IAAI,OAAO,OAAO,YAAY;AAC5D,UAAI,KAAK,OAAO;AACZ,gBAAQ,IAAI,2BAA2B,IAAI,SAAS,KAAK,OAAO,cAAc,KAAK,OAAO,aAAa,CAAC;AAAA,MAC5G;AACA,aAAO;AAAA,IACX,UAAE;AACE,WAAK,OAAO;AACZ,WAAK,aAAa;AAClB,YAAM,KAAK,KAAK;AAChB,YAAM,QAAQ,CAAC;AAAA,IACnB;AAAA,EACJ;AAAA,EAkCA,QAAQ,KAAK,IAAI,OAAO,YAAY,cAAe;AAC/C,QAAI,KAAK,SAAS,KAAK,0BAA0B;AAC7C,cAAQ,IAAI,sBAAsB,IAAI,WAC9B,kBAAkB,KAAK,iBAAiB,KAAK,IAC7C,WAAW,MAAM,GAAG,CAAC,EAAE,OAAO,MAAM,MAAM,GAAG,CAAC,EAAE,MAAM;AAAA,IAClE;AACA,QAAI;AACJ,QAAI,YAAY;AAEhB,QAAI,KAAK,OAAO;AACZ,cAAQ,IAAI,UAAU,EAAE;AAAA,IAC5B;AACA,QAAI,IAAI,MAAM,GAAG,CAAC;AAClB,eAAQ;AACJ,UAAI,IAAI,KAAK,uBAAuB,WAAW,CAAC;AAChD,UAAG,MAAI,MAAM;AACT,YAAI,KAAK,mBAAmB,KAAK,WAAW,CAAC;AAAA,MACjD;AACA,UAAG,MAAI,aAAa,OAAO;AAUvB,cAAM,IAAI,KAAK,YAAY,OAAO,cAAc,UAAU,SAAS,UAAU;AAC7E,cAAM,KAAK,UAAU;AACrB,cAAM,KAAK,wDAAwD,UAAU,SAAS,YAAY;AAClG,YAAG,QAAM,IAAI,oBAAoB;AAC7B,iBAAO;AAAA,QACX,OAAO;AACH,gBAAM;AAAA,QACV;AAAA,MACJ;AACA,UAAG,EAAE,uBAAuB,KAAK,mBAAmB,uBAAe,KAAK;AAEpE,YAAI,kBAAkB;AACtB,YAAI,EAAE,eAAa,MAAM;AACrB,cAAI,KAAK,OAAO;AACZ,oBAAQ,IAAI,4CAA4C;AAAA,UAC5D;AACA,gBAAM,gBAAgB,MAAM;AAC5B,cAAG,kBAAkB,YAAY;AAC7B,kBAAM,KAAK,UAAU;AAAA,UACzB;AACA,4BAAkB,KAAK,oBAAoB,EAAE,YAAY,cAAc,IAAI;AAC3E,cAAI,gBAAgB,WAAS,GAAG;AAC5B,gBAAG,KAAK,OAAO;AACX,sBAAQ,IAAI,iBAAiB;AAAA,YACjC;AACA,mBAAO,gBAAgB,SAAS;AAAA,UACpC;AACA,cAAI,kBAAkB,YAAY;AAG9B,kBAAM,KAAK,aAAa;AAAA,UAC5B;AAAA,QACJ;AACA,YAAI,KAAK,WAAW;AAChB,kBAAQ,IAAI,yBAAyB,eAAc,SAAS,CAAC;AAAA,QACjE;AACA,cAAM,UAAU;AAChB,cAAM,aAAa,KAAK,kBAAkB,IAAI,eAAe,cAAc,OAAO;AAClF,aAAK,4BAA4B,KAAK,iBAAiB,EAAE,SAAS,YAAY,MAAM,KAAK;AACzF,cAAM,KAAK,uBAAuB,KAAK,GAAG,YAAY,OAAO,YAAY,YAAY;AACrF,eAAO;AAAA,MACX;AACA,UAAI,EAAE,eAAe;AACjB,YAAI,EAAE,eAAa,MAAM;AACrB,iBAAO,EAAE;AAAA,QACb;AACA,cAAM,YAAY,MAAM;AACxB,cAAM,KAAK,UAAU;AACrB,cAAM,OAAO,KAAK,oBAAoB,EAAE,YAAY,cAAc,IAAI;AACtE,YAAI,KAAK,WAAS,GAAG;AACjB,gBAAM,KAAK,YAAY,OAAO,cAAc,EAAE,SAAS,UAAU;AAAA,QACrE,WAAW,KAAK,WAAS,GAAG;AACxB,iBAAO,KAAK,SAAS;AAAA,QACzB,OAAO;AAEH,eAAK,gBAAgB,KAAK,GAAG,YAAY,WAAW,OAAO,MAAM,EAAE,OAAO;AAC1E,iBAAO,KAAK,SAAS;AAAA,QACzB;AAAA,MACJ;AACA,kBAAY;AAEZ,UAAI,MAAM,MAAM,KAAK;AACjB,cAAM,QAAQ;AACd,YAAI,MAAM,GAAG,CAAC;AAAA,MAClB;AAAA,IACJ;AAAA,EACJ;AAAA,EAaA,uBAAuB,WAAW,GAAG;AACjC,UAAM,QAAQ,UAAU;AACxB,QAAI,UAAQ,MAAM;AACd,aAAO;AAAA,IACX,OAAO;AACH,aAAO,MAAM,IAAI,MAAM;AAAA,IAC3B;AAAA,EACJ;AAAA,EAcA,mBAAmB,KAAK,WAAW,GAAG;AACnC,UAAM,QAAQ,KAAK,gBAAgB,UAAU,SAAS,GAAG,KAAK;AAC7D,QAAG,UAAQ,MAAM;AACb,WAAK,WAAW,KAAK,WAAW,GAAG,aAAa,KAAK;AACrD,aAAO,aAAa;AAAA,IACxB;AAEA,QAAI,IAAI,IAAI,SAAS,MAAM,KAAK;AAEhC,UAAM,eAAe,KAAK,aAAa,KAAK;AAE5C,QAAI,KAAK,OAAO;AACZ,YAAM,aAAa,uBAAe,yBAAyB,KAAK;AAChE,cAAQ,IAAI,oBAAoB,cAAc,UAAU,IAE5C,eAAe,QACf,eAAe,eACf,0BACA,uBAAe,mBAAmB,UAAU,IAAI,uBAChD,KAAK,mBAAmB,KAAK,CAAC;AAAA,IAC9C;AACA,QAAI,iBAAe,IAAI,oBAAoB;AAEvC,QAAE,gBAAgB;AAClB,QAAE,QAAQ,YAAY;AACtB,QAAE,aAAa;AAAA,IACnB,WAAW,uBAAe,oCAAoC,KAAK,gBAAgB,KAAK,GAAG;AAEvF,QAAE,QAAQ,kBAAkB,KAAK,mBAAmB,KAAK;AACzD,QAAE,sBAAsB;AAExB,QAAE,gBAAgB;AAClB,QAAE,aAAa,EAAE,QAAQ,gBAAgB,SAAS;AAAA,IACtD;AACA,QAAI,EAAE,iBAAiB,EAAE,QAAQ,oBAAoB;AACjD,WAAK,kBAAkB,GAAG,KAAK,IAAI,iBAAiB,IAAI,QAAQ,CAAC;AACjE,UAAI,EAAE,eAAa,MAAM;AACrB,UAAE,aAAa,IAAI;AAAA,MACvB;AAAA,IACJ;AAEA,QAAI,KAAK,WAAW,KAAK,WAAW,GAAG,CAAC;AACxC,WAAO;AAAA,EACX;AAAA,EAEA,kBAAkB,UAAU,eAAe;AAGvC,UAAM,QAAQ,cAAc,YAAY;AAGxC,UAAM,yBAAyB,KAAK,8BAA8B,SAAS,OAAO;AAClF,UAAM,YAAY,KAAK,qBAAqB,wBAAwB,SAAS,SAAS,KAAK;AAC3F,QAAI,cAAY,MAAM;AAClB,eAAS,aAAa,KAAK,wBAAwB,wBAAwB,SAAS;AACpF,eAAS,aAAa,IAAI;AAAA,IAC9B,OAAO;AAIH,eAAS,aAAa,uBAAuB,SAAS;AAAA,IAC1D;AAAA,EACJ;AAAA,EAGA,uBAAuB,KAAK,GACS,IACA,OACA,YACA,cAAc;AAC/C,QAAI,KAAK,SAAS,KAAK,0BAA0B;AAC7C,cAAQ,IAAI,4BAA0B,EAAE;AAAA,IAC5C;AACA,UAAM,UAAU;AAChB,QAAI,kBAAkB;AACtB,QAAI;AACJ,QAAI,WAAW;AACf,UAAM,KAAK,UAAU;AACrB,QAAI,IAAI,MAAM,GAAG,CAAC;AAClB,QAAI,eAAe;AACnB,eAAS;AACL,cAAQ,KAAK,gBAAgB,UAAU,GAAG,OAAO;AACjD,UAAI,UAAQ,MAAM;AAUd,cAAM,IAAI,KAAK,YAAY,OAAO,cAAc,UAAU,UAAU;AACpE,cAAM,KAAK,UAAU;AACrB,cAAM,MAAM,KAAK,wDAAwD,UAAU,YAAY;AAC/F,YAAG,QAAM,IAAI,oBAAoB;AAC7B,iBAAO;AAAA,QACX,OAAO;AACH,gBAAM;AAAA,QACV;AAAA,MACJ;AACA,YAAM,aAAa,uBAAe,yBAAyB,KAAK;AAChE,UAAG,KAAK,OAAO;AACX,gBAAQ,IAAI,mBAAmB,aAAa,eACtC,uBAAe,aAAa,UAAU,IAAI,kCAC1C,uBAAe,2BAA2B,UAAU,CAAC;AAAA,MAC/D;AACA,YAAM,YAAY,KAAK,aAAa,KAAK;AAEzC,UAAG,MAAM,cAAY,IAAI,oBAAoB;AACzC,uBAAe,MAAM;AACrB;AAAA,MACJ,WAAW,KAAK,mBAAmB,uBAAe,0BAA0B;AACxE,uBAAe,uBAAe,2BAA2B,UAAU;AACnE,YAAG,iBAAiB,IAAI,oBAAoB;AACxC;AAAA,QACJ;AAAA,MACJ,OAAO;AAGH,YAAI,uBAAe,mBAAmB,UAAU,KAAK,uBAAe,gBAAgB,UAAU,GAAG;AAC7F,4BAAkB;AAClB,yBAAe,uBAAe,mBAAmB,UAAU;AAC3D;AAAA,QACJ;AAAA,MAIJ;AACA,iBAAW;AACX,UAAI,MAAM,MAAM,KAAK;AACjB,cAAM,QAAQ;AACd,YAAI,MAAM,GAAG,CAAC;AAAA,MAClB;AAAA,IACJ;AAIA,QAAI,MAAM,cAAc,IAAI,oBAAqB;AAC7C,WAAK,yBAAyB,KAAK,cAAc,OAAO,YAAY,MAAM,KAAK;AAC/E,aAAO;AAAA,IACX;AA4BA,SAAK,gBAAgB,KAAK,GAAG,YAAY,MAAM,OAAO,iBAAiB,MAAM,KAAK;AAElF,WAAO;AAAA,EACX;AAAA,EAEA,gBAAgB,SAAS,GAAG,SAAS;AACjC,QAAI,KAAK,OAAO;AACZ,cAAQ,IAAI,2CAA2C,OAAO;AAAA,IAClE;AACA,QAAI,KAAK,eAAa,MAAM;AACxB,WAAK,aAAa,IAAI,WAAW;AAAA,IACrC;AACA,UAAM,eAAe,IAAI,aAAa,OAAO;AAY7C,QAAI,oBAAoB;AAGxB,aAAS,IAAE,GAAG,IAAE,QAAQ,MAAM,QAAO,KAAK;AACtC,YAAM,IAAI,QAAQ,MAAM;AACxB,UAAG,KAAK,OAAO;AACX,gBAAQ,IAAI,aAAa,KAAK,aAAa,CAAC,IAAI,SAAS,CAAC;AAAA,MAC9D;AACA,UAAI,EAAE,iBAAiB,eAAe;AAClC,YAAI,WAAW,MAAM,MAAM,KAAK;AAC5B,cAAI,sBAAoB,MAAM;AAC1B,gCAAoB,CAAC;AAAA,UACzB;AACA,4BAAkB,KAAK,CAAC;AACxB,cAAG,KAAK,WAAW;AACf,oBAAQ,IAAI,WAAW,IAAI,uBAAuB;AAAA,UACtD;AAAA,QACJ;AACA;AAAA,MACJ;AACA,eAAQ,IAAE,GAAE,IAAE,EAAE,MAAM,YAAY,QAAO,KAAK;AAC1C,cAAM,QAAQ,EAAE,MAAM,YAAY;AAClC,cAAM,SAAS,KAAK,mBAAmB,OAAO,CAAC;AAC/C,YAAI,WAAS,MAAM;AACf,gBAAM,MAAM,IAAI,UAAU,EAAC,OAAM,OAAM,GAAG,CAAC;AAC3C,uBAAa,IAAI,KAAK,KAAK,UAAU;AACrC,cAAG,KAAK,WAAW;AACf,oBAAQ,IAAI,WAAW,MAAM,kBAAkB;AAAA,UACnD;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAEA,QAAI,QAAQ;AAWZ,QAAI,sBAAoB,QAAQ,MAAI,MAAM,KAAK;AAC3C,UAAI,aAAa,MAAM,WAAS,GAAG;AAK/B,gBAAQ;AAAA,MACZ,WAAW,KAAK,aAAa,YAAY,MAAI,IAAI,oBAAoB;AAGjE,gBAAQ;AAAA,MACZ;AAAA,IACJ;AAIA,QAAI,UAAQ,MAAM;AACd,cAAQ,IAAI,aAAa,OAAO;AAChC,YAAM,cAAc,IAAI,QAAQ;AAChC,YAAM,oBAAoB,MAAM,MAAM;AACtC,eAAS,IAAE,GAAG,IAAE,aAAa,MAAM,QAAO,KAAK;AAC3C,aAAK,QAAQ,aAAa,MAAM,IAAI,OAAO,aAAa,OAAO,SAAS,iBAAiB;AAAA,MAC7F;AAAA,IACJ;AACA,QAAI,MAAM,MAAM,KAAK;AAkBjB,cAAQ,KAAK,mCAAmC,OAAO,UAAU,YAAY;AAAA,IACjF;AASA,QAAI,sBAAoB,SAAW,CAAE,WAAa,CAAE,uBAAe,yBAAyB,KAAK,IAAK;AAClG,eAAS,IAAE,GAAG,IAAE,kBAAkB,QAAO,KAAK;AAC1C,cAAM,IAAI,kBAAkB,IAAI,KAAK,UAAU;AAAA,MACnD;AAAA,IACJ;AACA,QAAI,MAAM,MAAM,WAAS,GAAG;AACxB,aAAO;AAAA,IACX,OAAO;AACH,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAsBA,mCAAmC,SAAS,iBAAiB;AACzD,QAAI,uBAAe,2BAA2B,OAAO,GAAG;AACpD,aAAO;AAAA,IACX;AACA,UAAM,SAAS,IAAI,aAAa,QAAQ,OAAO;AAC/C,aAAQ,IAAE,GAAG,IAAE,QAAQ,MAAM,QAAO,KAAK;AACrC,YAAM,SAAS,QAAQ,MAAM;AAC7B,UAAI,OAAO,iBAAiB,eAAe;AACvC,eAAO,IAAI,QAAQ,KAAK,UAAU;AAClC;AAAA,MACJ;AACA,UAAI,mBAAmB,OAAO,MAAM,wBAAwB;AACxD,cAAM,aAAa,KAAK,IAAI,WAAW,OAAO,KAAK;AACnD,YAAI,WAAW,SAAS,MAAM,OAAO,GAAG;AACpC,gBAAM,iBAAiB,KAAK,IAAI,gBAAgB,OAAO,MAAM;AAC7D,iBAAO,IAAI,IAAI,UAAU,EAAC,OAAM,eAAc,GAAG,MAAM,GAAG,KAAK,UAAU;AAAA,QAC7E;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EAEA,kBAAkB,GAAG,KAAK,SAAS;AAE/B,UAAM,iBAAiB,iCAAiC,KAAK,KAAK,GAAG;AACrE,UAAM,UAAU,IAAI,aAAa,OAAO;AACxC,aAAQ,IAAE,GAAE,IAAE,EAAE,YAAY,QAAO,KAAK;AACpC,YAAM,SAAS,EAAE,YAAY,GAAG;AAChC,YAAM,IAAI,IAAI,UAAU,EAAE,OAAM,QAAQ,KAAI,IAAE,GAAG,SAAQ,eAAe,GAAG,IAAI;AAC/E,YAAM,cAAc,IAAI,QAAQ;AAChC,WAAK,QAAQ,GAAG,SAAS,aAAa,MAAM,SAAS,KAAK;AAAA,IAC9D;AACA,WAAO;AAAA,EACX;AAAA,EA0DA,sBAAsB,SAAS;AAC3B,QAAI;AACJ,UAAM,iBAAiB,CAAC;AACxB,UAAM,YAAY,IAAI,aAAa,QAAQ,OAAO;AAClD,aAAQ,IAAE,GAAG,IAAE,QAAQ,MAAM,QAAQ,KAAK;AACtC,eAAS,QAAQ,MAAM;AAEvB,UAAI,OAAO,QAAQ,GAAG;AAClB;AAAA,MACJ;AACA,YAAM,iBAAiB,OAAO,gBAAgB,eAAe,KAAK,QAAQ,KAAK,aAAa;AAC5F,UAAI,mBAAiB,MAAM;AAEvB;AAAA,MACJ;AACA,qBAAe,OAAO,MAAM,eAAe,OAAO;AAClD,UAAI,mBAAmB,OAAO,iBAAiB;AAC3C,kBAAU,IAAI,IAAI,UAAU,EAAC,iBAAgB,eAAc,GAAG,MAAM,GAAG,KAAK,UAAU;AAAA,MAC1F,OAAO;AACH,kBAAU,IAAI,QAAQ,KAAK,UAAU;AAAA,MACzC;AAAA,IACJ;AACA,aAAQ,IAAE,GAAG,IAAE,QAAQ,MAAM,QAAQ,KAAK;AACtC,eAAS,QAAQ,MAAM;AACvB,UAAI,OAAO,QAAQ,GAAG;AAElB;AAAA,MACJ;AAIA,UAAI,CAAC,OAAO,4BAA4B;AACpC,cAAM,UAAU,eAAe,OAAO,MAAM,gBAAgB;AAC5D,YAAI,YAAU,QAAQ,QAAQ,OAAO,OAAO,OAAO,GAAG;AAElD;AAAA,QACJ;AAAA,MACJ;AACA,gBAAU,IAAI,QAAQ,KAAK,UAAU;AAAA,IACzC;AACA,WAAO;AAAA,EACX;AAAA,EAEA,mBAAmB,OAAO,OAAO;AAC7B,QAAI,MAAM,QAAQ,OAAO,GAAG,KAAK,IAAI,YAAY,GAAG;AAChD,aAAO,MAAM;AAAA,IACjB,OAAO;AACH,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEA,qBAAqB,WAAW,SAAS,OAAO;AAa5C,QAAI,YAAY,CAAC;AACjB,aAAQ,IAAE,GAAE,IAAE,QAAQ,MAAM,QAAO,KAAK;AACpC,YAAM,IAAI,QAAQ,MAAM;AACxB,UAAG,UAAU,IAAK,EAAE,GAAI,GAAG;AACvB,kBAAU,EAAE,OAAO,gBAAgB,UAAU,UAAU,EAAE,QAAQ,MAAM,EAAE,eAAe;AAAA,MAC5F;AAAA,IACJ;AACA,QAAI,YAAY;AAChB,aAAS,IAAG,GAAE,IAAG,QAAM,GAAE,KAAK;AAC1B,YAAM,OAAO,UAAU,MAAM;AAC7B,UAAI,SAAO,MAAM;AACb,kBAAU,KAAK,gBAAgB;AAAA,MACnC,WAAW,SAAS,gBAAgB,MAAM;AACtC,qBAAa;AAAA,MACjB;AAAA,IACJ;AAEA,QAAI,cAAY,GAAG;AACf,kBAAY;AAAA,IAChB;AACA,QAAI,KAAK,OAAO;AACZ,cAAQ,IAAI,iCAAiC,cAAc,SAAS,CAAC;AAAA,IACzE;AACA,WAAO;AAAA,EACX;AAAA,EAEA,wBAAwB,WAAW,WAAW;AAC1C,UAAM,QAAQ,CAAC;AACf,QAAI,oBAAoB;AACxB,aAAS,IAAE,GAAG,IAAE,UAAU,QAAO,KAAK;AAClC,YAAM,OAAO,UAAU;AAEvB,UAAI,cAAY,QAAQ,UAAU,IAAK,CAAE,GAAG;AACxC,cAAM,KAAK,IAAI,eAAe,MAAM,CAAC,CAAC;AAAA,MAC1C;AACA,UAAI,SAAS,gBAAgB,MAAM;AAC/B,4BAAoB;AAAA,MACxB;AAAA,IACJ;AACA,QAAI,CAAE,mBAAmB;AACrB,aAAO;AAAA,IACX;AACA,WAAO;AAAA,EACX;AAAA,EAgDA,wDAAwD,SAAS,cAAc;AAC3E,UAAM,OAAO,KAAK,iCAAiC,SAAS,YAAY;AACxE,UAAM,kBAAkB,KAAK;AAC7B,UAAM,oBAAoB,KAAK;AAC/B,QAAI,MAAM,KAAK,oCAAoC,eAAe;AAClE,QAAI,QAAM,IAAI,oBAAoB;AAC9B,aAAO;AAAA,IACX;AAEA,QAAI,kBAAkB,MAAM,SAAO,GAAG;AAClC,YAAM,KAAK,oCAAoC,iBAAiB;AAChE,UAAI,QAAM,IAAI,oBAAoB;AAC9B,eAAO;AAAA,MACX;AAAA,IACJ;AACA,WAAO,IAAI;AAAA,EACf;AAAA,EAEA,oCAAoC,SAAS;AACzC,UAAM,OAAO,CAAC;AACd,aAAQ,IAAE,GAAE,IAAE,QAAQ,MAAM,QAAQ,KAAK;AACrC,YAAM,IAAI,QAAQ,MAAM;AACxB,UAAI,EAAE,0BAAwB,KAAO,EAAE,iBAAiB,iBAAkB,EAAE,QAAQ,aAAa,GAAI;AACjG,YAAG,KAAK,QAAQ,EAAE,GAAG,IAAE,GAAG;AACtB,eAAK,KAAK,EAAE,GAAG;AAAA,QACnB;AAAA,MACJ;AAAA,IACJ;AACA,QAAI,KAAK,WAAS,GAAG;AACjB,aAAO,IAAI;AAAA,IACf,OAAO;AACH,aAAO,KAAK,IAAI,MAAM,MAAM,IAAI;AAAA,IACpC;AAAA,EACJ;AAAA,EAWA,iCAAkC,SAAS,cAAc;AACrD,UAAM,YAAY,IAAI,aAAa,QAAQ,OAAO;AAClD,UAAM,SAAS,IAAI,aAAa,QAAQ,OAAO;AAC/C,aAAQ,IAAE,GAAE,IAAE,QAAQ,MAAM,QAAQ,KAAK;AACrC,YAAM,IAAI,QAAQ,MAAM;AACxB,UAAI,EAAE,oBAAoB,gBAAgB,MAAM;AAC5C,cAAM,4BAA4B,EAAE,gBAAgB,SAAS,KAAK,QAAQ,YAAY;AACtF,YAAI,2BAA2B;AAC3B,oBAAU,IAAI,CAAC;AAAA,QACnB,OAAO;AACH,iBAAO,IAAI,CAAC;AAAA,QAChB;AAAA,MACJ,OAAO;AACH,kBAAU,IAAI,CAAC;AAAA,MACnB;AAAA,IACJ;AACA,WAAO,CAAC,WAAW,MAAM;AAAA,EAC7B;AAAA,EASA,oBAAoB,iBAAiB,cAAc,UAAU;AACzD,UAAM,cAAc,IAAI,OAAO;AAC/B,aAAQ,IAAE,GAAE,IAAE,gBAAgB,QAAO,KAAK;AACtC,YAAM,OAAO,gBAAgB;AAC7B,UAAI,KAAK,SAAS,gBAAgB,MAAM;AACpC,oBAAY,IAAI,KAAK,GAAG;AACxB,YAAI,CAAE,UAAU;AACZ;AAAA,QACJ;AACA;AAAA,MACJ;AACA,YAAM,4BAA4B,KAAK,KAAK,SAAS,KAAK,QAAQ,YAAY;AAC9E,UAAI,KAAK,SAAS,KAAK,WAAW;AAC9B,gBAAQ,IAAI,eAAe,OAAO,MAAM,yBAAyB;AAAA,MACrE;AACA,UAAI,2BAA2B;AAC3B,YAAI,KAAK,SAAS,KAAK,WAAW;AAC9B,kBAAQ,IAAI,aAAa,KAAK,GAAG;AAAA,QACrC;AACA,oBAAY,IAAI,KAAK,GAAG;AACxB,YAAI,CAAE,UAAU;AACZ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EAQA,QAAQ,QAAQ,SAAS,aAAa,mBAAmB,SAAS,mBAAmB;AACjF,UAAM,eAAe;AACrB,SAAK;AAAA,MAAyB;AAAA,MAAQ;AAAA,MAAS;AAAA,MAAa;AAAA,MACnC;AAAA,MAAS;AAAA,MAAc;AAAA,IAAiB;AAAA,EACrE;AAAA,EAEA,yBAAyB,QAAQ,SAAS,aAAa,mBAAmB,SAAS,OAAO,mBAAmB;AACzG,QAAI,KAAK,SAAS,KAAK,eAAe;AAClC,cAAQ,IAAI,aAAa,OAAO,SAAS,KAAK,QAAO,IAAI,IAAI,GAAG;AAEhE,UAAG,OAAO,0BAAwB,IAAI;AAClC,cAAM;AAAA,MACV;AAAA,IACJ;AACA,QAAI,OAAO,iBAAiB,eAAe;AAGvC,UAAI,CAAE,OAAO,QAAQ,QAAQ,GAAG;AAC5B,iBAAS,IAAG,GAAG,IAAE,OAAO,QAAQ,QAAQ,KAAK;AACzC,cAAI,OAAO,QAAQ,eAAe,CAAC,MAAM,kBAAkB,oBAAoB;AAC3E,gBAAI,SAAS;AACT,sBAAQ,IAAI,IAAI,UAAU,EAAC,OAAM,OAAO,OAAO,SAAQ,kBAAkB,MAAK,GAAG,MAAM,GAAG,KAAK,UAAU;AACzG;AAAA,YACJ,OAAO;AAEH,kBAAI,KAAK,OAAO;AACZ,wBAAQ,IAAI,sBAAsB,KAAK,YAAY,OAAO,MAAM,SAAS,CAAC;AAAA,cAC9E;AACA,mBAAK;AAAA,gBAAS;AAAA,gBAAQ;AAAA,gBAAS;AAAA,gBAAa;AAAA,gBACnC;AAAA,gBAAS;AAAA,gBAAO;AAAA,cAAiB;AAAA,YAC9C;AACA;AAAA,UACJ;AACA,gBAAM,cAAc,KAAK,IAAI,OAAO,OAAO,QAAQ,eAAe,CAAC;AACnE,gBAAM,aAAa,OAAO,QAAQ,UAAU,CAAC;AAC7C,gBAAM,QAAQ,EAAC,OAAM,aAAa,KAAI,OAAO,KAAK,SAAQ,YAAY,iBAAgB,OAAO,gBAAe;AAC5G,gBAAM,IAAI,IAAI,UAAU,OAAO,IAAI;AAInC,YAAE,0BAA0B,OAAO;AACnC,eAAK,yBAAyB,GAAG,SAAS,aAAa,mBAAmB,SAAS,QAAQ,GAAG,iBAAiB;AAAA,QACnH;AACA;AAAA,MACJ,WAAW,SAAS;AAEhB,gBAAQ,IAAI,QAAQ,KAAK,UAAU;AACnC;AAAA,MACJ,OAAO;AAEH,YAAI,KAAK,OAAO;AACZ,kBAAQ,IAAI,sBAAsB,KAAK,YAAY,OAAO,MAAM,SAAS,CAAC;AAAA,QAC9E;AAAA,MACJ;AAAA,IACJ;AACA,SAAK,SAAS,QAAQ,SAAS,aAAa,mBAAmB,SAAS,OAAO,iBAAiB;AAAA,EACpG;AAAA,EAGA,SAAS,QAAQ,SAAS,aAAa,mBAAmB,SAAS,OAAO,mBAAmB;AACzF,UAAM,IAAI,OAAO;AAEjB,QAAI,CAAE,EAAE,wBAAwB;AAC5B,cAAQ,IAAI,QAAQ,KAAK,UAAU;AAAA,IAGvC;AACA,aAAQ,IAAI,GAAE,IAAE,EAAE,YAAY,QAAQ,KAAK;AACvC,UAAG,MAAM,KAAK,KAAK,wCAAwC,MAAM;AAC7D;AAEJ,YAAM,IAAI,EAAE,YAAY;AACxB,YAAM,qBAAqB,qBAAqB,EAAE,aAAa;AAC/D,YAAM,IAAI,KAAK,iBAAiB,QAAQ,GAAG,oBAAoB,UAAU,GAAG,SAAS,iBAAiB;AACtG,UAAI,MAAI,MAAM;AACV,YAAI,WAAW;AACf,YAAK,OAAO,iBAAiB,eAAe;AAMxC,cAAI,KAAK,SAAS,QAAQ,KAAK,KAAK,eAAe;AAC/C,gBAAI,EAAE,8BAA8B,KAAK,KAAK,cAAc,WAAW;AACnE,gBAAE,6BAA6B;AAAA,YACnC;AAAA,UACJ;AAEA,YAAE,2BAA2B;AAC7B,cAAI,YAAY,IAAI,CAAC,MAAI,GAAG;AAExB;AAAA,UACJ;AACA,kBAAQ,uBAAuB;AAC/B,sBAAY;AACZ,cAAI,KAAK,OAAO;AACZ,oBAAQ,IAAI,0BAA0B,CAAC;AAAA,UAC3C;AAAA,QACJ,OAAO;AACH,cAAI,CAAC,EAAE,aAAa,YAAY,IAAI,CAAC,MAAI,GAAE;AAEvC;AAAA,UACJ;AACA,cAAI,aAAa,gBAAgB;AAE7B,gBAAI,YAAY,GAAG;AACf,0BAAY;AAAA,YAChB;AAAA,UACJ;AAAA,QACJ;AACA,aAAK,yBAAyB,GAAG,SAAS,aAAa,oBAAoB,SAAS,UAAU,iBAAiB;AAAA,MACnH;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,wCAAwC,QAAQ;AAE5C,UAAM,IAAI,OAAO;AAMjB,QAAG,EAAE,cAAc,SAAS;AACxB,aAAO;AACX,QAAG,EAAE,cAAc,SAAS,mBAAmB,CAAC,EAAE,wBAC3C,OAAO,QAAQ,QAAQ,KAAK,OAAO,QAAQ,aAAa;AAC3D,aAAO;AAGX,UAAM,UAAU,OAAO,QAAQ;AAC/B,aAAQ,IAAE,GAAG,IAAE,SAAS,KAAK;AACzB,YAAM,cAAc,KAAK,IAAI,OAAO,OAAO,QAAQ,eAAe,CAAC;AACnE,UAAI,YAAY,cAAc,EAAE;AAC5B,eAAO;AAAA,IACf;AAEA,UAAM,qBAAqB,EAAE,YAAY,GAAG;AAC5C,UAAM,mBAAmB,mBAAmB,SAAS;AACrD,UAAM,gBAAgB,KAAK,IAAI,OAAO;AAItC,aAAQ,IAAE,GAAG,IAAE,SAAS,KAAK;AACzB,YAAM,oBAAoB,OAAO,QAAQ,eAAe,CAAC;AACzD,YAAM,cAAc,KAAK,IAAI,OAAO;AAEpC,UAAI,YAAY,YAAY,WAAW,KAAK,CAAC,YAAY,YAAY,GAAG;AACpE,eAAO;AAGX,YAAM,oBAAoB,YAAY,YAAY,GAAG;AACrD,UAAK,YAAY,cAAc,SAAS,aAAa,sBAAsB;AACvE;AAKJ,UAAK,gBAAgB;AACjB;AAIJ,UAAK,sBAAsB;AACvB;AAIJ,UAAI,kBAAkB,cAAc,SAAS,aAAa,kBAAkB,YAAY,WAAW,KACxF,kBAAkB,YAAY,GAAG,aAAa,kBAAkB,YAAY,GAAG,WAAW;AACjG;AAGJ,aAAO;AAAA,IACX;AACA,WAAO;AAAA,EACX;AAAA,EAEA,YAAY,OAAO;AACf,QAAI,KAAK,WAAS,QAAQ,SAAO,GAAG;AAChC,aAAO,KAAK,OAAO,UAAU;AAAA,IACjC,OAAO;AACH,aAAO,WAAW,QAAQ;AAAA,IAC9B;AAAA,EACJ;AAAA,EAEA,iBAAiB,QAAQ,GAAG,mBAAmB,WAAW,SAAS,mBAAmB;AAClF,YAAO,EAAE,mBAAmB;AAAA,MAC5B,KAAK,WAAW;AACZ,eAAO,KAAK,eAAe,QAAQ,CAAC;AAAA,MACxC,KAAK,WAAW;AACZ,eAAO,KAAK,qBAAqB,QAAQ,GAAG,mBAAmB,WAAW,OAAO;AAAA,MACrF,KAAK,WAAW;AACZ,eAAO,KAAK,eAAe,QAAQ,GAAG,mBAAmB,WAAW,OAAO;AAAA,MAC/E,KAAK,WAAW;AACZ,eAAO,KAAK,iBAAiB,QAAQ,CAAC;AAAA,MAC1C,KAAK,WAAW;AACZ,eAAO,IAAI,UAAU,EAAC,OAAM,EAAE,OAAM,GAAG,MAAM;AAAA,MACjD,KAAK,WAAW;AAAA,MAChB,KAAK,WAAW;AAAA,MAChB,KAAK,WAAW;AAGZ,YAAI,mBAAmB;AACnB,cAAI,EAAE,QAAQ,MAAM,KAAK,GAAG,CAAC,GAAG;AAC5B,mBAAO,IAAI,UAAU,EAAC,OAAO,EAAE,OAAM,GAAG,MAAM;AAAA,UAClD;AAAA,QACJ;AACA,eAAO;AAAA,MACX;AACI,eAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEA,iBAAiB,QAAQ,GAAG;AACxB,QAAI,KAAK,OAAO;AACZ,YAAM,QAAQ,EAAE,gBAAgB,KAAK,QAAQ,EAAE;AAC/C,cAAQ,IAAI,iBAAiB,EAAE,YAAY,MAAM,KAAK;AAAA,IAC1D;AACA,WAAO,IAAI,UAAU,EAAC,OAAM,EAAE,OAAM,GAAG,MAAM;AAAA,EACjD;AAAA,EAEA,qBAAqB,QAAQ,IAAI,mBAAmB,WAAW,SAAS;AACpE,QAAI,KAAK,OAAO;AACZ,cAAQ,IAAI,6BAA6B,oBAAoB,OACrD,GAAG,aAAa,0BAA0B;AAClD,UAAI,KAAK,WAAS,MAAM;AACpB,gBAAQ,IAAI,iCAAiC,cAAc,KAAK,OAAO,uBAAuB,CAAC,CAAC;AAAA,MACpG;AAAA,IACJ;AACA,QAAI,IAAI;AACR,QAAI,qBAAqB,WAAW;AAChC,UAAI,SAAS;AAKT,cAAM,kBAAkB,KAAK,OAAO;AACpC,aAAK,OAAO,KAAK,KAAK,WAAW;AACjC,cAAM,eAAe,GAAG,aAAa,EAAE,SAAS,KAAK,QAAQ,KAAK,aAAa;AAC/E,aAAK,OAAO,KAAK,eAAe;AAChC,YAAI,cAAc;AACd,cAAI,IAAI,UAAU,EAAC,OAAM,GAAG,OAAM,GAAG,MAAM;AAAA,QAC/C;AAAA,MACJ,OAAO;AACH,cAAM,YAAY,gBAAgB,WAAW,OAAO,iBAAiB,GAAG,aAAa,CAAC;AACtF,YAAI,IAAI,UAAU,EAAC,OAAM,GAAG,QAAQ,iBAAgB,UAAS,GAAG,MAAM;AAAA,MAC1E;AAAA,IACJ,OAAO;AACH,UAAI,IAAI,UAAU,EAAC,OAAM,GAAG,OAAM,GAAG,MAAM;AAAA,IAC/C;AACA,QAAI,KAAK,OAAO;AACZ,cAAQ,IAAI,iCAAiC,CAAC;AAAA,IAClD;AACA,WAAO;AAAA,EACX;AAAA,EAEA,eAAe,QAAQ,IAAI,mBAAmB,WAAW,SAAS;AAC9D,QAAI,KAAK,OAAO;AACZ,cAAQ,IAAI,6BAA6B,oBAAoB,OAAO,GAAG,YAC/D,MAAM,GAAG,YAAY,qBAAqB,GAAG,cAAc;AACnE,UAAI,KAAK,WAAS,MAAM;AACpB,gBAAQ,IAAI,iCAAiC,cAAc,KAAK,OAAO,uBAAuB,CAAC,CAAC;AAAA,MACpG;AAAA,IACJ;AACA,QAAI,IAAI;AACR,QAAI,sBAAuB,GAAG,kBAAkB,aAAc,CAAE,GAAG,iBAAiB;AAChF,UAAI,SAAS;AAKT,cAAM,kBAAkB,KAAK,OAAO;AACpC,aAAK,OAAO,KAAK,KAAK,WAAW;AACjC,cAAM,eAAe,GAAG,aAAa,EAAE,SAAS,KAAK,QAAQ,KAAK,aAAa;AAC/E,aAAK,OAAO,KAAK,eAAe;AAChC,YAAI,cAAc;AACd,cAAI,IAAI,UAAU,EAAC,OAAM,GAAG,OAAM,GAAG,MAAM;AAAA,QAC/C;AAAA,MACJ,OAAO;AACH,cAAM,YAAY,gBAAgB,WAAW,OAAO,iBAAiB,GAAG,aAAa,CAAC;AACtF,YAAI,IAAI,UAAU,EAAC,OAAM,GAAG,QAAQ,iBAAgB,UAAS,GAAG,MAAM;AAAA,MAC1E;AAAA,IACJ,OAAO;AACH,UAAI,IAAI,UAAU,EAAC,OAAM,GAAG,OAAM,GAAG,MAAM;AAAA,IAC/C;AACA,QAAI,KAAK,OAAO;AACZ,cAAQ,IAAI,iCAAiC,CAAC;AAAA,IAClD;AACA,WAAO;AAAA,EACX;AAAA,EAEA,eAAe,QAAQ,GAAG;AACtB,QAAI,KAAK,OAAO;AACZ,cAAQ,IAAI,eAAe,KAAK,YAAY,EAAE,OAAO,SAAS,IAAI,WAAW,OAAO,OAAO;AAAA,IAC/F;AACA,UAAM,cAAc,EAAE;AACtB,UAAM,aAAa,2BAA2B,OAAO,OAAO,SAAS,YAAY,WAAW;AAC5F,WAAO,IAAI,UAAU,EAAC,OAAM,EAAE,QAAQ,SAAQ,WAAU,GAAG,MAAO;AAAA,EACtE;AAAA,EAEA,mBAAmB,SAAS;AACxB,UAAM,UAAU,uBAAe,yBAAyB,OAAO;AAC/D,WAAO,uBAAe,QAAQ,OAAO;AAAA,EACzC;AAAA,EAsCA,8BAA8B,SAAS;AACnC,QAAI,kBAAkB;AACtB,QAAI,QAAQ,cAAa,IAAI,oBAAoB;AAC7C,wBAAkB,IAAI,OAAO;AAC7B,sBAAgB,IAAI,QAAQ,SAAS;AAAA,IACzC,OAAO;AACH,wBAAkB,QAAQ;AAAA,IAC9B;AACA,WAAO;AAAA,EACX;AAAA,EAEA,aAAa,GAAG;AACZ,QAAI,MAAI,MAAM,KAAK;AACf,aAAO;AAAA,IACX;AACA,QAAI,KAAK,WAAS,QAAQ,KAAK,OAAO,iBAAe,MAAM;AACvD,UAAI,KAAK,KAAK,OAAO,aAAa,UAAU,KAAK,KAAK,OAAO,cAAc,QAAQ;AAC/E,gBAAQ,IAAI,KAAK,IAAI,0BAA0B,KAAK,OAAO,YAAY;AACvE,gBAAQ,IAAI,KAAK,KAAK,OAAO,eAAe,EAAE,UAAU,CAAC;AAAA,MAC7D,OAAO;AACH,cAAM,OAAO,KAAK,OAAO,aAAa,MAAM,KAAK,OAAO,cAAc;AACtE,eAAO,OAAO,MAAM,IAAI;AAAA,MAC5B;AAAA,IACJ;AACA,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,iBAAiB,OAAO;AACpB,WAAO,KAAK,aAAa,MAAM,GAAG,CAAC,CAAC;AAAA,EACxC;AAAA,EAOA,mBAAmB,MAAM;AACrB,YAAQ,IAAI,oBAAoB;AAChC,UAAM,OAAO,KAAK,kBAAkB;AACpC,aAAQ,IAAE,GAAG,IAAE,KAAK,QAAQ,KAAK;AAC7B,YAAM,IAAI,KAAK;AACf,UAAI,QAAQ;AACZ,UAAI,EAAE,MAAM,YAAY,SAAO,GAAG;AAC9B,cAAM,IAAI,EAAE,MAAM,YAAY;AAC9B,YAAI,aAAa,gBAAgB;AAC7B,kBAAQ,UAAS,KAAK,aAAa,EAAE,KAAK;AAAA,QAC9C,WAAW,aAAa,eAAe;AACnC,gBAAM,MAAO,aAAa;AAC1B,mBAAS,MAAM,MAAM,MAAM,SAAS,EAAE;AAAA,QAC1C;AAAA,MACJ;AACA,cAAQ,MAAM,EAAE,SAAS,KAAK,QAAQ,IAAI,IAAI,MAAM,KAAK;AAAA,IAC7D;AAAA,EACJ;AAAA,EAEA,YAAY,OAAO,cAAc,SAAS,YAAY;AAClD,WAAO,IAAI,qBAAqB,KAAK,QAAQ,OAAO,MAAM,IAAI,UAAU,GAAG,MAAM,GAAG,CAAC,GAAG,SAAS,YAAY;AAAA,EACjH;AAAA,EAEA,aAAa,SAAS;AAClB,QAAI,MAAM,IAAI;AACd,aAAQ,IAAE,GAAE,IAAE,QAAQ,MAAM,QAAO,KAAK;AACpC,YAAM,IAAI,QAAQ,MAAM;AACxB,UAAI,QAAQ,IAAI,oBAAoB;AAChC,cAAM,EAAE;AAAA,MACZ,WAAW,EAAE,QAAM,KAAK;AACpB,eAAO,IAAI;AAAA,MACf;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EAsBA,WAAW,KAAK,OAAO,GAAG,IAAI;AAC1B,QAAI,KAAK,OAAO;AACZ,cAAQ,IAAI,UAAU,QAAQ,SAAS,KAAK,WAAW,KAAK,aAAa,CAAC,CAAC;AAAA,IAC/E;AACA,QAAI,OAAK,MAAM;AACX,aAAO;AAAA,IACX;AACA,SAAK,KAAK,YAAY,KAAK,EAAE;AAC7B,QAAI,UAAQ,QAAQ,IAAI,MAAM,IAAI,KAAK,IAAI,cAAc;AACrD,aAAO;AAAA,IACX;AACA,QAAI,MAAM,UAAQ,MAAM;AACpB,YAAM,QAAQ,CAAC;AAAA,IACnB;AACA,UAAM,MAAM,IAAE,KAAK;AAEnB,QAAI,KAAK,OAAO;AACZ,YAAM,eAAe,KAAK,WAAS,OAAO,OAAO,KAAK,OAAO;AAC7D,YAAM,gBAAgB,KAAK,WAAS,OAAO,OAAO,KAAK,OAAO;AAC9D,cAAQ,IAAI,WAAW,IAAI,SAAS,cAAc,aAAa,CAAC;AAAA,IACpE;AACA,WAAO;AAAA,EACX;AAAA,EAiBA,YAAY,KAAK,GAAG;AAChB,QAAI,MAAM,aAAa,OAAO;AAC1B,aAAO;AAAA,IACX;AACA,UAAM,WAAW,IAAI,OAAO,IAAI,CAAC;AACjC,QAAG,aAAW,MAAM;AAChB,aAAO;AAAA,IACX;AACA,MAAE,cAAc,IAAI,OAAO;AAC3B,QAAI,CAAE,EAAE,QAAQ,UAAU;AACtB,QAAE,QAAQ,gBAAgB,IAAI;AAC9B,QAAE,QAAQ,YAAY,IAAI;AAAA,IAC9B;AACA,QAAI,OAAO,IAAI,CAAC;AAChB,QAAI,KAAK,OAAO;AACZ,cAAQ,IAAI,2BAA2B,CAAC;AAAA,IAC5C;AACA,WAAO;AAAA,EACX;AAAA,EAEA,4BAA4B,KAAK,iBAAiB,SAAS,YAAY,WAAW;AAC9E,QAAI,KAAK,SAAS,KAAK,aAAa;AAChC,YAAM,WAAW,IAAI,SAAS,YAAY,YAAY,CAAC;AACvD,cAAQ,IAAI,0CAA0C,IAAI,WAAW,MAAM,UACxD,aAAa,KAAK,OAAO,eAAe,EAAE,QAAQ,QAAQ,CAAC;AAAA,IAClF;AACA,QAAI,KAAK,WAAS,MAAM;AACpB,WAAK,OAAO,yBAAyB,EAAE,4BAA4B,KAAK,QAAQ,KAAK,YAAY,WAAW,iBAAiB,OAAO;AAAA,IACxI;AAAA,EACJ;AAAA,EAEA,yBAAyB,KAAK,YAAY,SAAS,YAAY,WAAW;AACtE,QAAI,KAAK,SAAS,KAAK,aAAa;AAChC,YAAM,WAAW,IAAI,SAAS,YAAY,YAAY,CAAC;AACvD,cAAQ,IAAI,uCAAuC,IAAI,WAAW,MAAM,UACrD,aAAa,KAAK,OAAO,eAAe,EAAE,QAAQ,QAAQ,CAAC;AAAA,IAClF;AACA,QAAI,KAAK,WAAS,MAAM;AACpB,WAAK,OAAO,yBAAyB,EAAE,yBAAyB,KAAK,QAAQ,KAAK,YAAY,WAAW,YAAY,OAAO;AAAA,IAChI;AAAA,EACJ;AAAA,EAGA,gBAAgB,KAAK,GAAG,YAAY,WACL,OAAO,WAAW,SAAU;AACvD,QAAI,KAAK,SAAS,KAAK,aAAa;AAChC,YAAM,WAAW,IAAI,SAAS,YAAY,YAAY,CAAC;AACvD,cAAQ,IAAI,qBAAqB,YAAY,MAAM,UAChC,aAAa,KAAK,OAAO,eAAe,EAAE,QAAQ,QAAQ,CAAC;AAAA,IAClF;AACA,QAAI,KAAK,WAAS,MAAM;AACpB,WAAK,OAAO,yBAAyB,EAAE,gBAAgB,KAAK,QAAQ,KAAK,YAAY,WAAW,OAAO,WAAW,OAAO;AAAA,IAC7H;AAAA,EACJ;AACJ;;;AC7qDA,IAAO,cAAQ,EAAE,KAAK,iBAAiB,mBAAmB,oBAAoB,uCAAe;;;ACA7F,IAAqB,gBAArB,MAAmC;AAAA,EAC/B,YAAY,KAAK,cAAc,eAAe;AAC1C,SAAK,MAAM;AACX,SAAK,eAAe,gBAAgB,CAAC;AACrC,SAAK,gBAAgB,iBAAiB,CAAC;AAAA,EAC3C;AAAA,EAEA,WAAW;AACR,QAAG,KAAK,IAAI,OAAO,MAAM;AACrB,aAAO;AAAA,IACX;AACA,QAAI,MAAM;AACV,UAAM,SAAS,KAAK,IAAI,aAAa;AACrC,aAAQ,IAAE,GAAG,IAAE,OAAO,QAAQ,KAAK;AAC/B,YAAM,IAAI,OAAO;AACjB,UAAG,EAAE,UAAQ,MAAM;AACd,cAAM,IAAI,EAAE,MAAM;AAClB,iBAAQ,IAAE,GAAE,IAAE,GAAE,KAAK;AACjB,gBAAM,IAAI,EAAE,MAAM,MAAM;AACxB,cAAG,MAAI,QAAQ,EAAE,gBAAgB,YAAY;AACzC,kBAAM,IAAI,OAAO,KAAK,eAAe,CAAC,CAAC;AACvC,kBAAM,IAAI,OAAO,GAAG;AACpB,kBAAM,IAAI,OAAO,KAAK,aAAa,CAAC,CAAC;AACrC,kBAAM,IAAI,OAAO,IAAI;AACrB,kBAAM,IAAI,OAAO,KAAK,eAAe,CAAC,CAAC;AACvC,kBAAM,IAAI,OAAO,IAAI;AAAA,UACzB;AAAA,QACJ;AAAA,MACL;AAAA,IACJ;AACA,WAAO,IAAI,WAAS,IAAI,OAAO;AAAA,EAClC;AAAA,EAEA,aAAa,GAAG;AACZ,QAAI,MAAI,GAAG;AACP,aAAO;AAAA,IACX,WAAU,KAAK,iBAAgB,QAAQ,KAAK,kBAAgB,MAAM;AAC9D,aAAO,KAAK,aAAa,IAAE,MAAM,KAAK,cAAc,IAAE;AAAA,IAC1D,OAAO;AACH,aAAO,OAAO,aAAa,IAAE,CAAC;AAAA,IAClC;AAAA,EACJ;AAAA,EAEA,eAAe,GAAG;AACd,UAAM,gBAAiB,EAAE,gBAAgB,MAAM,MAAM,MAAM,EAAE,eAAgB,EAAE,sBAAsB,MAAM;AAC3G,QAAG,EAAE,eAAe;AAChB,UAAI,EAAE,eAAe,MAAM;AACvB,eAAO,eAAe,OAAO,cAAc,EAAE,UAAU;AAAA,MAC3D,OAAO;AACH,eAAO,eAAe,OAAO,EAAE,WAAW,SAAS;AAAA,MACvD;AAAA,IACJ,OAAO;AACH,aAAO;AAAA,IACX;AAAA,EACJ;AACJ;;;AC5DA,IAAqB,qBAArB,cAAgD,cAAc;AAAA,EAC1D,YAAY,KAAK;AACb,UAAM,KAAK,IAAI;AAAA,EACnB;AAAA,EAEA,aAAa,GAAG;AACZ,WAAO,MAAM,OAAO,aAAa,CAAC,IAAI;AAAA,EAC1C;AACJ;;;ACFA,IAAqB,MAArB,MAAyB;AAAA,EACxB,YAAY,eAAe,UAAU;AACpC,QAAI,aAAa,QAAW;AAC3B,iBAAW;AAAA,IACZ;AAIA,SAAK,gBAAgB;AACrB,SAAK,WAAW;AAKhB,SAAK,UAAU,IAAI,QAAQ;AAC3B,SAAK,KAAK;AAMV,SAAK,gBAAgB;AACrB,QAAI,yBAAyB,oBAC7B;AACC,UAAI,cAAc,sBAAsB;AACvC,aAAK,gBAAgB;AACrB,cAAM,kBAAkB,IAAI,SAAS,MAAM,IAAI,aAAa,CAAC;AAC7D,wBAAgB,QAAQ,CAAC;AACzB,wBAAgB,gBAAgB;AAChC,wBAAgB,sBAAsB;AACtC,aAAK,KAAK;AAAA,MACX;AAAA,IACD;AAAA,EACD;AAAA,EAYA,wBAAwB,YAAY;AACnC,QAAI,CAAE,KAAK,eAAgB;AAC1B,YAAO;AAAA,IACR;AAEA,QAAI,aAAa,KAAK,cAAc,KAAK,GAAG,MAAM,QAAQ;AACzD,aAAO;AAAA,IACR;AACA,WAAO,KAAK,GAAG,MAAM,eAAe;AAAA,EACrC;AAAA,EAYA,wBAAwB,YAAY,YAAY;AAC/C,QAAI,CAAE,KAAK,eAAgB;AAC1B,YAAO;AAAA,IACR;AACA,QAAI,aAAa,GAAG;AACnB;AAAA,IACD;AAOA,SAAK,GAAG,MAAM,cAAc;AAAA,EAC7B;AAAA,EAmBA,iBAAiB,eAAe;AAC/B,QAAI,KAAK,kBAAgB,eAAe;AACvC,WAAK,UAAU,IAAI,QAAQ;AAC3B,UAAI,eAAe;AAClB,cAAM,kBAAkB,IAAI,SAAS,MAAM,IAAI,aAAa,CAAC;AAC7D,wBAAgB,QAAQ,CAAC;AACzB,wBAAgB,gBAAgB;AAChC,wBAAgB,sBAAsB;AACtC,aAAK,KAAK;AAAA,MACX,OAAO;AACN,aAAK,KAAK;AAAA,MACX;AACA,WAAK,gBAAgB;AAAA,IACtB;AAAA,EACD;AAAA,EAKA,eAAe;AACd,UAAM,OAAO,KAAK,QAAQ,OAAO;AACjC,WAAO,KAAK,KAAK,SAAS,GAAG,GAAG;AAC/B,aAAO,EAAE,cAAc,EAAE;AAAA,IAC1B,CAAC;AAAA,EACF;AAAA,EAEA,SAAS,cAAc,eAAe;AACrC,mBAAe,gBAAgB;AAC/B,oBAAgB,iBAAiB;AACjC,QAAI,KAAK,OAAO,MAAM;AACrB,aAAO;AAAA,IACR;AACA,UAAM,aAAa,IAAI,cAAc,MAAM,cAAc,aAAa;AACtE,WAAO,WAAW,SAAS;AAAA,EAC5B;AAAA,EAEA,gBAAgB;AACf,QAAI,KAAK,OAAO,MAAM;AACrB,aAAO;AAAA,IACR;AACA,UAAM,aAAa,IAAI,mBAAmB,IAAI;AAC9C,WAAO,WAAW,SAAS;AAAA,EAC5B;AAAA,EAEA,IAAI,SAAQ;AACX,WAAO,KAAK;AAAA,EACb;AACD;;;ACpJA,IAAO,cAAQ,EAAE,KAAK,eAAe,oBAAoB,eAAe;;;ACNxE,IAAqB,oBAArB,MAAuC;AAAA,EACnC,cAAc,MAAM;AAAA,EACpB;AAAA,EAEA,eAAe,MAAM;AAAA,EACrB;AAAA,EAEA,eAAe,MAAM;AAAA,EACrB;AAAA,EAEA,cAAc,MAAM;AAAA,EACpB;AACJ;;;ACZA,IAAqB,mBAArB,MAAsC;AAAA,EAClC,MAAM,KAAK;AACP,QAAI,MAAM,QAAQ,GAAG,GAAG;AACpB,aAAO,IAAI,IAAI,SAAS,OAAO;AAC3B,eAAO,MAAM,OAAO,IAAI;AAAA,MAC5B,GAAG,IAAI;AAAA,IACX,OAAO;AACH,aAAO,IAAI,OAAO,IAAI;AAAA,IAC1B;AAAA,EACJ;AAAA,EAEA,cAAc,KAAK;AACf,QAAI,IAAI,UAAU;AACd,aAAO,KAAK,MAAM,IAAI,QAAQ;AAAA,IAClC,OAAO;AACH,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEA,cAAc,MAAM;AAAA,EACpB;AAAA,EAEA,eAAe,MAAM;AAAA,EACrB;AACJ;;;ACrBA,IAAqB,kBAArB,MAAqC;AAAA,EAUjC,KAAK,UAAU,GAAG;AACd,UAAM,YAAY,aAAa,aAC1B,EAAE,gBAAgB,UAAa,EAAE,YAAY;AAClD,QAAI,WAAW;AACX,eAAS,eAAe,CAAC;AAAA,IAC7B,WAAW,aAAa,cAAc;AAClC,eAAS,cAAc,CAAC;AAAA,IAC5B,OAAO;AACH,WAAK,UAAU,UAAU,CAAC;AAC1B,eAAS,IAAI,GAAG,IAAI,EAAE,cAAc,GAAG,KAAK;AACxC,cAAM,QAAQ,EAAE,SAAS,CAAC;AAC1B,aAAK,KAAK,UAAU,KAAK;AAAA,MAC7B;AACA,WAAK,SAAS,UAAU,CAAC;AAAA,IAC7B;AAAA,EACJ;AAAA,EAQA,UAAU,UAAU,GAAG;AACnB,UAAM,MAAM,EAAE,eAAe;AAC7B,aAAS,eAAe,GAAG;AAC3B,QAAI,UAAU,QAAQ;AAAA,EAC1B;AAAA,EAQA,SAAS,UAAU,GAAG;AAClB,UAAM,MAAM,EAAE,eAAe;AAC7B,QAAI,SAAS,QAAQ;AACrB,aAAS,cAAc,GAAG;AAAA,EAC9B;AACJ;AAEA,gBAAgB,UAAU,IAAI,gBAAgB;;;AC9C9C,IAAO,eAAQ,EAAE,sBAAO,UAAU,WAAW,cAAc,mBAAmB,kBAAkB,gBAAgB;;;ACHhH,IAAqB,yBAArB,cAAoD,qBAAqB;AAAA,EACrE,YAAY,YAAY;AACpB,UAAM,EAAC,SAAS,IAAI,YAAwB,OAAO,WAAW,eAAe,GAAG,KAAK,WAAW,KAAI,CAAC;AACrG,SAAK,iBAAiB,WAAW,gBAAgB;AAAA,EACrD;AACJ;;;ACFA,IAAqB,2BAArB,cAAsD,qBAAqB;AAAA,EACvE,YAAY,YAAY,WAAW,SAAS;AACxC,UAAM;AAAA,MACF,SAAS,cAAc,WAAW,WAAW,IAAI;AAAA,MAAG;AAAA,MACpD,OAAO,WAAW,eAAe;AAAA,MAAG,KAAK,WAAW;AAAA,IACxD,CAAC;AACD,UAAM,IAAI,WAAW,QAAQ,IAAI,OAAO,WAAW;AACnD,UAAM,QAAQ,EAAE,YAAY;AAC5B,QAAI,iBAAiB,qBAAqB;AACtC,WAAK,YAAY,MAAM;AACvB,WAAK,iBAAiB,MAAM;AAAA,IAChC,OAAO;AACH,WAAK,YAAY;AACjB,WAAK,iBAAiB;AAAA,IAC1B;AACA,SAAK,YAAY;AACjB,SAAK,iBAAiB,WAAW,gBAAgB;AAAA,EACrD;AACJ;AAGA,SAAS,cAAc,WAAW,SAAS;AACvC,MAAI,YAAW,MAAM;AACjB,WAAO;AAAA,EACX,OAAO;AACH,WAAO,wBAAwB,YAAY;AAAA,EAC/C;AACJ;;;ACXA,IAAqB,0BAArB,cAAqD,cAAc;AAAA,EAClE,YAAY,WAAW;AACtB,UAAM;AACN,gBAAY,aAAa;AAEzB,SAAK,YAAY;AAAA,EAClB;AAAA,EAEA,gBAAgB,YAAY,KAAK,YAAY,WAAW,OAAO,WAAW,SAAS;AAClF,QAAI,KAAK,aAAa,CAAC,OAAO;AAC7B;AAAA,IACD;AACA,UAAM,MAAM,uBACX,KAAK,uBAAuB,YAAY,GAAG,IAC3C,iBACA,KAAK,mBAAmB,WAAW,OAAO,IAC1C,cACA,WAAW,eAAe,EAAE,QAAQ,IAAI,SAAS,YAAY,SAAS,CAAC,IAAI;AAC5E,eAAW,qBAAqB,GAAG;AAAA,EACpC;AAAA,EAEA,4BAA4B,YAAY,KAAK,YAAY,WAAW,iBAAiB,SAAS;AAC7F,UAAM,MAAM,mCACX,KAAK,uBAAuB,YAAY,GAAG,IAC3C,cACA,WAAW,eAAe,EAAE,QAAQ,IAAI,SAAS,YAAY,SAAS,CAAC,IAAI;AAC5E,eAAW,qBAAqB,GAAG;AAAA,EACpC;AAAA,EAEA,yBAAyB,YAAY,KAAK,YAAY,WAAW,YAAY,SAAS;AACrF,UAAM,MAAM,gCACX,KAAK,uBAAuB,YAAY,GAAG,IAC3C,cACA,WAAW,eAAe,EAAE,QAAQ,IAAI,SAAS,YAAY,SAAS,CAAC,IAAI;AAC5E,eAAW,qBAAqB,GAAG;AAAA,EACpC;AAAA,EAEA,uBAAuB,YAAY,KAAK;AACvC,UAAM,WAAW,IAAI;AACrB,UAAM,YAAY,IAAI,cAAc;AAEpC,UAAM,YAAY,WAAW;AAC7B,QAAI,YAAY,KAAK,aAAa,UAAU,QAAQ;AACnD,aAAO,KAAK;AAAA,IACb;AACA,UAAM,WAAW,UAAU,cAAc;AACzC,QAAI,aAAa,QAAQ,SAAS,WAAW,GAAG;AAC/C,aAAO,KAAK;AAAA,IACb;AACA,WAAO,GAAG,aAAa;AAAA,EACxB;AAAA,EAaA,mBAAmB,cAAc,SAAS;AACzC,QAAI,iBAAiB,MAAM;AAC1B,aAAO;AAAA,IACR;AACA,UAAM,SAAS,IAAI,OAAO;AAC1B,aAAS,IAAI,GAAG,IAAI,QAAQ,MAAM,QAAQ,KAAK;AAC9C,aAAO,IAAI,QAAQ,MAAM,GAAG,GAAG;AAAA,IAChC;AACA,WAAO,IAAI,OAAO,OAAO,EAAE,KAAK,IAAI;AAAA,EACrC;AACD;;;AClGA,IAAqB,6BAArB,cAAwD,MAAM;AAAA,EAC1D,cAAc;AACV,UAAM;AACN,UAAM,kBAAkB,MAAM,0BAA0B;AAAA,EAC5D;AACJ;;;ACJA,IAAqB,gBAArB,MAAmC;AAAA,EAE/B,MAAM,YAAY;AAAA,EAClB;AAAA,EAEA,cAAc,YAAY;AAAA,EAC1B;AAAA,EAEA,QAAQ,YAAY,GAAG;AAAA,EACvB;AAAA,EAEA,KAAK,YAAY;AAAA,EACjB;AAAA,EAEA,oBAAoB,YAAY;AAAA,EAChC;AAAA,EAEA,YAAY,YAAY;AAAA,EACxB;AACJ;;;ACPA,IAAqB,uBAArB,cAAkD,cAAc;AAAA,EAC5D,cAAc;AACV,UAAM;AAQN,SAAK,oBAAoB;AASzB,SAAK,iBAAiB;AACtB,SAAK,kBAAkB;AACvB,SAAK,oBAAoB;AACzB,SAAK,iBAAiB;AAAA,EAC1B;AAAA,EAMA,MAAM,YAAY;AACd,SAAK,kBAAkB,UAAU;AAAA,EACrC;AAAA,EAQA,oBAAoB,YAAY;AAC5B,SAAK,oBAAoB;AAAA,EAC7B;AAAA,EAEA,oBAAoB,YAAY;AAC5B,WAAO,KAAK;AAAA,EAChB;AAAA,EAOA,kBAAkB,YAAY;AAC1B,SAAK,oBAAoB;AACzB,SAAK,kBAAkB;AACvB,SAAK,iBAAiB;AAAA,EAC1B;AAAA,EAMA,YAAY,YAAY;AACpB,SAAK,kBAAkB,UAAU;AAAA,EACrC;AAAA,EAqBA,YAAY,YAAY,GAAG;AAGvB,QAAG,KAAK,oBAAoB,UAAU,GAAG;AACrC;AAAA,IACJ;AACA,SAAK,oBAAoB,UAAU;AACnC,QAAK,aAAa,sBAAuB;AACrC,WAAK,0BAA0B,YAAY,CAAC;AAAA,IAChD,WAAY,aAAa,wBAAyB;AAC9C,WAAK,oBAAoB,YAAY,CAAC;AAAA,IAC1C,WAAY,aAAa,0BAA2B;AAChD,WAAK,sBAAsB,YAAY,CAAC;AAAA,IAC5C,OAAO;AACH,cAAQ,IAAI,qCAAqC,EAAE,YAAY,IAAI;AACnE,cAAQ,IAAI,EAAE,KAAK;AACnB,iBAAW,qBAAqB,EAAE,kBAAkB,GAAG,EAAE,WAAW,GAAG,CAAC;AAAA,IAC5E;AAAA,EACJ;AAAA,EAWA,QAAQ,YAAY,GAAG;AACnB,QAAI,KAAK,mBAAiB,WAAW,eAAe,EAAE,SAClD,KAAK,oBAAoB,QAAQ,KAAK,gBAAgB,QAAQ,WAAW,KAAK,KAAG,GAAG;AAKpF,iBAAW,QAAQ;AAAA,IACvB;AACA,SAAK,iBAAiB,WAAW,OAAO;AACxC,QAAI,KAAK,oBAAoB,MAAM;AAC/B,WAAK,kBAAkB,CAAC;AAAA,IAC5B;AACA,SAAK,gBAAgB,KAAK,WAAW,KAAK;AAC1C,UAAM,YAAY,KAAK,oBAAoB,UAAU;AACrD,SAAK,aAAa,YAAY,SAAS;AAAA,EAC3C;AAAA,EAiDA,KAAK,YAAY;AAEb,QAAI,KAAK,oBAAoB,UAAU,GAAG;AACtC;AAAA,IACJ;AACA,UAAM,IAAI,WAAW,QAAQ,IAAI,OAAO,WAAW;AACnD,UAAM,KAAK,WAAW,eAAe,EAAE,GAAG,CAAC;AAE3C,UAAM,aAAa,WAAW,IAAI,WAAW,CAAC;AAC9C,QAAG,WAAW,SAAS,EAAE,GAAG;AACxB,WAAK,oBAAoB;AACzB,WAAK,iBAAiB,SAAS;AAC/B;AAAA,IACJ,WAAW,WAAW,SAAS,MAAM,OAAO,GAAG;AAC3C,UAAG,KAAK,sBAAsB,MAAM;AAGhC,aAAK,oBAAoB,WAAW;AACpC,aAAK,kBAAkB,WAAW;AAAA,MACtC;AACA;AAAA,IACJ;AACA,YAAQ,EAAE,WAAW;AAAA,MACjB,KAAK,SAAS;AAAA,MACd,KAAK,SAAS;AAAA,MACd,KAAK,SAAS;AAAA,MACd,KAAK,SAAS;AAEV,YAAI,KAAK,oBAAoB,UAAU,MAAM,MAAM;AAC/C;AAAA,QACJ,OAAO;AACH,gBAAM,IAAI,uBAAuB,UAAU;AAAA,QAC/C;AAAA,MACJ,KAAK,SAAS;AAAA,MACd,KAAK,SAAS;AACV;AACA,eAAK,oBAAoB,UAAU;AACnC,gBAAM,YAAY,IAAI,YAAY;AAClC,oBAAU,OAAO,WAAW,kBAAkB,CAAC;AAC/C,gBAAM,iCAAiC,UAAU,OAAO,KAAK,oBAAoB,UAAU,CAAC;AAC5F,eAAK,aAAa,YAAY,8BAA8B;AAAA,QAC5D;AACA;AAAA,MACJ;AAAA,IAEJ;AAAA,EACJ;AAAA,EAWA,0BAA0B,YAAY,GAAG;AACrC,UAAM,SAAS,WAAW,eAAe;AACzC,QAAI;AACJ,QAAG,WAAW,MAAM;AAChB,UAAI,EAAE,WAAW,SAAO,MAAM,KAAK;AAC/B,gBAAQ;AAAA,MACZ,OAAO;AACH,gBAAQ,OAAO,QAAQ,IAAI,SAAS,EAAE,WAAW,YAAY,EAAE,eAAe,UAAU,CAAC;AAAA,MAC7F;AAAA,IACJ,OAAO;AACH,cAAQ;AAAA,IACZ;AACA,UAAM,MAAM,oCAAoC,KAAK,iBAAiB,KAAK;AAC3E,eAAW,qBAAqB,KAAK,EAAE,gBAAgB,CAAC;AAAA,EAC5D;AAAA,EAWA,oBAAoB,YAAY,GAAG;AAC/B,UAAM,MAAM,sBAAsB,KAAK,qBAAqB,EAAE,cAAc,IACxE,gBAAgB,EAAE,kBAAkB,EAAE,SAAS,WAAW,cAAc,WAAW,aAAa;AACpG,eAAW,qBAAqB,KAAK,EAAE,gBAAgB,CAAC;AAAA,EAC5D;AAAA,EAWA,sBAAsB,YAAY,GAAG;AACjC,UAAM,WAAW,WAAW,UAAU,WAAW,KAAK;AACtD,UAAM,MAAM,UAAU,WAAW,MAAM,EAAE;AACzC,eAAW,qBAAqB,KAAK,EAAE,gBAAgB,CAAC;AAAA,EAC5D;AAAA,EAqBA,oBAAoB,YAAY;AAC5B,QAAI,KAAK,oBAAoB,UAAU,GAAG;AACtC;AAAA,IACJ;AACA,SAAK,oBAAoB,UAAU;AACnC,UAAM,IAAI,WAAW,gBAAgB;AACrC,UAAM,YAAY,KAAK,qBAAqB,CAAC;AAC7C,UAAM,YAAY,KAAK,kBAAkB,UAAU;AACnD,UAAM,MAAM,sBAAsB,YAAY,gBAC1C,UAAU,SAAS,WAAW,cAAc,WAAW,aAAa;AACxE,eAAW,qBAAqB,KAAK,GAAG,IAAI;AAAA,EAChD;AAAA,EAmBA,mBAAmB,YAAY;AAC3B,QAAK,KAAK,oBAAoB,UAAU,GAAG;AACvC;AAAA,IACJ;AACA,SAAK,oBAAoB,UAAU;AACnC,UAAM,IAAI,WAAW,gBAAgB;AACrC,UAAM,YAAY,KAAK,kBAAkB,UAAU;AACnD,UAAM,MAAM,aAAa,UAAU,SAAS,WAAW,cAAc,WAAW,aAAa,IACzF,SAAS,KAAK,qBAAqB,CAAC;AACxC,eAAW,qBAAqB,KAAK,GAAG,IAAI;AAAA,EAChD;AAAA,EAoDA,cAAc,YAAY;AAEtB,UAAM,gBAAgB,KAAK,oBAAoB,UAAU;AACzD,QAAI,kBAAkB,MAAM;AAGxB,iBAAW,QAAQ;AACnB,aAAO;AAAA,IACX;AAEA,QAAI,KAAK,qBAAqB,UAAU,GAAG;AACvC,aAAO,KAAK,iBAAiB,UAAU;AAAA,IAC3C;AAEA,UAAM,IAAI,uBAAuB,UAAU;AAAA,EAC/C;AAAA,EAmBA,qBAAqB,YAAY;AAC7B,UAAM,oBAAoB,WAAW,eAAe,EAAE,GAAG,CAAC;AAI1D,UAAMC,OAAM,WAAW,QAAQ;AAC/B,UAAM,eAAeA,KAAI,OAAO,WAAW;AAC3C,UAAM,OAAO,aAAa,YAAY,GAAG;AACzC,UAAM,iBAAiBA,KAAI,WAAW,MAAM,WAAW,IAAI;AAC3D,QAAI,eAAe,SAAS,iBAAiB,GAAG;AAC5C,WAAK,mBAAmB,UAAU;AAClC,aAAO;AAAA,IACX,OAAO;AACH,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAqBA,oBAAoB,YAAY;AAC5B,UAAM,gBAAgB,WAAW,eAAe,EAAE,GAAG,CAAC;AACtD,UAAM,YAAY,KAAK,kBAAkB,UAAU;AACnD,QAAI,UAAU,SAAS,aAAa,GAAG;AACnC,WAAK,oBAAoB,UAAU;AAKnC,iBAAW,QAAQ;AAEnB,YAAM,gBAAgB,WAAW,gBAAgB;AACjD,WAAK,YAAY,UAAU;AAC3B,aAAO;AAAA,IACX,OAAO;AACH,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAuBA,iBAAiB,YAAY;AACzB,UAAM,gBAAgB,WAAW,gBAAgB;AACjD,UAAM,YAAY,KAAK,kBAAkB,UAAU;AACnD,UAAM,oBAAoB,UAAU,MAAM;AAC1C,QAAI;AACJ,QAAI,sBAAoB,MAAM,KAAK;AAC/B,kBAAY;AAAA,IAChB,OAAO;AACH,kBAAY,cAAc,WAAW,aAAa,qBAAqB;AAAA,IAC3E;AACA,QAAI,UAAU;AACd,UAAM,WAAW,WAAW,eAAe,EAAE,GAAG,EAAE;AAClD,QAAI,QAAQ,SAAO,MAAM,OAAO,aAAa,MAAM;AAC/C,gBAAU;AAAA,IACd;AACA,WAAO,WAAW,gBAAgB,EAAE;AAAA,MAAO,QAAQ;AAAA,MAC/C;AAAA,MAAmB;AAAA,MAAW,MAAM;AAAA,MACpC;AAAA,MAAI;AAAA,MAAI,QAAQ;AAAA,MAAM,QAAQ;AAAA,IAAM;AAAA,EAC5C;AAAA,EAEA,kBAAkB,YAAY;AAC1B,WAAO,WAAW,kBAAkB;AAAA,EACxC;AAAA,EAWA,qBAAqB,GAAG;AACpB,QAAI,MAAM,MAAM;AACZ,aAAO;AAAA,IACX;AACA,QAAI,IAAI,EAAE;AACV,QAAI,MAAM,MAAM;AACZ,UAAI,EAAE,SAAO,MAAM,KAAK;AACpB,YAAI;AAAA,MACR,OAAO;AACH,YAAI,MAAM,EAAE,OAAO;AAAA,MACvB;AAAA,IACJ;AACA,WAAO,KAAK,iBAAiB,CAAC;AAAA,EAClC;AAAA,EAEA,iBAAiB,GAAG;AAChB,QAAI,EAAE,QAAQ,OAAM,KAAK;AACzB,QAAI,EAAE,QAAQ,OAAM,KAAK;AACzB,QAAI,EAAE,QAAQ,OAAM,KAAK;AACzB,WAAO,MAAM,IAAI;AAAA,EACrB;AAAA,EA+FA,oBAAoB,YAAY;AAC5B,UAAMA,OAAM,WAAW,QAAQ;AAC/B,QAAI,MAAM,WAAW;AACrB,UAAM,aAAa,IAAI,YAAY;AACnC,WAAO,QAAQ,QAAQ,IAAI,iBAAe,GAAG;AAEzC,YAAM,gBAAgBA,KAAI,OAAO,IAAI;AACrC,YAAM,KAAK,cAAc,YAAY;AACrC,YAAM,SAASA,KAAI,WAAW,GAAG,WAAW;AAC5C,iBAAW,OAAO,MAAM;AACxB,YAAM,IAAI;AAAA,IACd;AACA,eAAW,UAAU,MAAM,OAAO;AAClC,WAAO;AAAA,EACX;AAAA,EAGA,aAAa,YAAY,KAAK;AAC1B,QAAI,QAAQ,WAAW,eAAe,EAAE,GAAG,CAAC;AAC5C,WAAO,UAAU,MAAM,OAAO,CAAC,IAAI,SAAS,KAAK,GAAG;AAChD,iBAAW,QAAQ;AACnB,cAAQ,WAAW,eAAe,EAAE,GAAG,CAAC;AAAA,IAC5C;AAAA,EACJ;AACJ;;;AChpBA,IAAqB,oBAArB,cAA+C,qBAAqB;AAAA,EAEhE,cAAc;AACV,UAAM;AAAA,EACV;AAAA,EAQA,QAAQ,YAAY,GAAG;AACnB,QAAI,UAAU,WAAW;AACzB,WAAO,YAAY,MAAM;AACrB,cAAQ,YAAY;AACpB,gBAAU,QAAQ;AAAA,IACtB;AACA,UAAM,IAAI,2BAA2B,CAAC;AAAA,EAC1C;AAAA,EAMA,cAAc,YAAY;AACtB,SAAK,QAAQ,YAAY,IAAI,uBAAuB,UAAU,CAAC;AAAA,EACnE;AAAA,EAGA,KAAK,YAAY;AAAA,EAEjB;AACJ;;;ACtDA,IAAO,gBAAQ;AAAA,EACX;AAAA,EAAsB;AAAA,EAAsB;AAAA,EAA2B;AAAA,EAAwB;AAAA,EAC/F;AAAA,EAAyB;AAAA,EAAmB;AAAA,EAAsB;AACtE;;;ACFA,IAAqB,cAArB,MAAiC;AAAA,EAChC,YAAY,MAAM,2BAA2B;AAC5C,SAAK,OAAO;AACZ,SAAK,UAAU;AACf,SAAK,4BAA4B,6BAA6B;AAE9D,SAAK,SAAS;AACd,SAAK,OAAO,CAAC;AACb,QAAI,KAAK,2BAA2B;AACnC,eAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,UAAU;AAC1C,cAAM,YAAY,KAAK,QAAQ,YAAY,CAAC;AAC5C,aAAK,KAAK,KAAK,SAAS;AACxB,aAAK,aAAa,QAAS,IAAI;AAAA,MAChC;AAAA,IACD,OAAO;AACN,WAAK,OAAO,IAAI,MAAM,KAAK,QAAQ,MAAM;AACzC,eAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,QAAQ,KAAK;AAC7C,cAAM,WAAW,KAAK,QAAQ,WAAW,CAAC;AAC1C,aAAK,KAAK,KAAK;AAAA,MAChB;AAAA,IACD;AACA,SAAK,QAAQ,KAAK,KAAK;AAAA,EACxB;AAAA,EAOA,QAAQ;AACP,SAAK,SAAS;AAAA,EACf;AAAA,EAEA,UAAU;AACT,QAAI,KAAK,UAAU,KAAK,OAAO;AAE9B,YAAO;AAAA,IACR;AACA,SAAK,UAAU;AAAA,EAChB;AAAA,EAEA,GAAG,QAAQ;AACV,QAAI,WAAW,GAAG;AACjB,aAAO;AAAA,IACR;AACA,QAAI,SAAS,GAAG;AACf,gBAAU;AAAA,IACX;AACA,UAAM,MAAM,KAAK,SAAS,SAAS;AACnC,QAAI,MAAM,KAAK,OAAO,KAAK,OAAO;AACjC,aAAO,MAAM;AAAA,IACd;AACA,WAAO,KAAK,KAAK;AAAA,EAClB;AAAA,EAEA,GAAG,QAAQ;AACV,WAAO,KAAK,GAAG,MAAM;AAAA,EACtB;AAAA,EAGA,OAAO;AACN,WAAO;AAAA,EACR;AAAA,EAEA,QAAQ,QAAQ;AAAA,EAChB;AAAA,EAMA,KAAK,QAAQ;AACZ,QAAI,UAAU,KAAK,QAAQ;AAC1B,WAAK,SAAS;AAEd;AAAA,IACD;AAEA,SAAK,SAAS,KAAK,IAAI,QAAQ,KAAK,KAAK;AAAA,EAC1C;AAAA,EAEA,QAAQ,OAAO,MAAM;AACpB,QAAI,QAAQ,KAAK,OAAO;AACvB,aAAO,KAAK,QAAQ;AAAA,IACrB;AACA,QAAI,SAAS,KAAK,OAAO;AACxB,aAAO;AAAA,IACR,OAAO;AACN,UAAI,KAAK,2BAA2B;AACnC,YAAI,SAAS;AACb,iBAAS,IAAI,OAAO,KAAK,MAAM,KAAK;AACnC,oBAAU,OAAO,cAAc,KAAK,KAAK,EAAE;AAAA,QAC5C;AACA,eAAO;AAAA,MACR,OAAO;AACN,eAAO,KAAK,QAAQ,MAAM,OAAO,OAAO,CAAC;AAAA,MAC1C;AAAA,IACD;AAAA,EACD;AAAA,EAEA,WAAW;AACV,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,IAAI,QAAO;AACV,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,IAAI,OAAM;AACT,WAAO,KAAK;AAAA,EACb;AACD;;;ACzHA,gBAAe;AASf,IAAO,sBAAQ;AAAA,EAEb,YAAY,SAAS,KAAK;AACxB,WAAO,IAAI,YAAY,KAAK,IAAI;AAAA,EAClC;AAAA,EAUA,UAAU,SAAS,MAAM,UAAU,QAAQ,SAAS;AAClD,UAAM,SAAS,IAAI,OAAO,WAAW;AACrC,WAAO,SAAS,SAAS,GAAG;AAC1B,YAAM,KAAK,IAAI,YAAY,EAAE,OAAO,QAAQ,IAAI;AAChD,aAAO,EAAE;AAAA,IACX;AACA,WAAO,UAAU;AACjB,WAAO,WAAW,MAAM,QAAQ;AAAA,EAClC;AAAA,EAOA,YAAY,SAAS,QAAQ,UAAU;AACrC,WAAO,IAAI,YAAY,OAAO,SAAS,QAAQ,GAAG,IAAI;AAAA,EACxD;AAAA,EAQA,UAAU,SAAS,MAAM,UAAU,UAAU;AAC3C,cAAAC,QAAG,SAAS,MAAM,UAAU,SAAS,KAAK,MAAM;AAC9C,UAAI,KAAK;AACT,UAAI,SAAS,MAAM;AACjB,aAAK,IAAI,YAAY,MAAM,IAAI;AAAA,MACjC;AACA,eAAS,KAAK,EAAE;AAAA,IAClB,CAAC;AAAA,EACH;AAAA,EAOA,cAAc,SAAS,MAAM,UAAU;AACrC,UAAM,OAAO,UAAAA,QAAG,aAAa,MAAM,QAAQ;AAC3C,WAAO,IAAI,YAAY,MAAM,IAAI;AAAA,EACnC;AACF;;;ACnEA,IAAAC,aAAe;AAMf,IAAqB,aAArB,cAAwC,YAAY;AAAA,EACnD,YAAY,UAAU,2BAA2B;AAChD,UAAM,OAAO,WAAAC,QAAG,aAAa,UAAU,MAAM;AAC7C,UAAM,MAAM,yBAAyB;AACrC,SAAK,WAAW;AAAA,EACjB;AACD;;;ACbA,IAAqB,cAArB,MAAiC;AAAC;;;ACiBlC,IAAqB,sBAArB,cAAiD,YAAY;AAAA,EAC5D,YAAY,aAAa;AAExB,UAAM;AAEN,SAAK,cAAc;AAMnB,SAAK,SAAS,CAAC;AAcf,SAAK,QAAQ;AAkBb,SAAK,aAAa;AAAA,EACnB;AAAA,EAEA,OAAO;AACN,WAAO;AAAA,EACR;AAAA,EAEA,QAAQ,QAAQ;AAAA,EAEhB;AAAA,EAEA,QAAQ;AACP,SAAK,KAAK,CAAC;AAAA,EACZ;AAAA,EAEA,KAAK,OAAO;AACX,SAAK,SAAS;AACd,SAAK,QAAQ,KAAK,gBAAgB,KAAK;AAAA,EACxC;AAAA,EAEA,IAAI,OAAO;AACV,SAAK,SAAS;AACd,WAAO,KAAK,OAAO;AAAA,EACpB;AAAA,EAEA,UAAU;AACT,QAAI,eAAe;AACnB,QAAI,KAAK,SAAS,GAAG;AACpB,UAAI,KAAK,YAAY;AAGpB,uBAAe,KAAK,QAAQ,KAAK,OAAO,SAAS;AAAA,MAClD,OAAO;AAEN,uBAAe,KAAK,QAAQ,KAAK,OAAO;AAAA,MACzC;AAAA,IACD,OAAO;AAEN,qBAAe;AAAA,IAChB;AACA,QAAI,CAAC,gBAAgB,KAAK,GAAG,CAAC,MAAM,MAAM,KAAK;AAC9C,YAAM;AAAA,IACP;AACA,QAAI,KAAK,KAAK,KAAK,QAAQ,CAAC,GAAG;AAC9B,WAAK,QAAQ,KAAK,gBAAgB,KAAK,QAAQ,CAAC;AAAA,IACjD;AAAA,EACD;AAAA,EASA,KAAK,GAAG;AACP,UAAM,IAAI,IAAI,KAAK,OAAO,SAAS;AACnC,QAAI,IAAI,GAAG;AACV,YAAM,UAAU,KAAK,MAAM,CAAC;AAC5B,aAAO,WAAW;AAAA,IACnB;AACA,WAAO;AAAA,EACR;AAAA,EAOA,MAAM,GAAG;AACR,QAAI,KAAK,YAAY;AACpB,aAAO;AAAA,IACR;AACA,aAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AAC3B,YAAM,IAAI,KAAK,YAAY,UAAU;AACrC,QAAE,aAAa,KAAK,OAAO;AAC3B,WAAK,OAAO,KAAK,CAAC;AAClB,UAAI,EAAE,SAAS,MAAM,KAAK;AACzB,aAAK,aAAa;AAClB,eAAO,IAAI;AAAA,MACZ;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EAGA,UAAU,OAAO,MAAM,OAAO;AAC7B,QAAI,UAAU,QAAW;AACxB,cAAQ;AAAA,IACT;AACA,QAAI,QAAQ,KAAK,OAAO,GAAG;AAC1B,aAAO;AAAA,IACR;AACA,SAAK,SAAS;AACd,UAAM,SAAS,CAAC;AAChB,QAAI,QAAQ,KAAK,OAAO,QAAQ;AAC/B,aAAO,KAAK,OAAO,SAAS;AAAA,IAC7B;AACA,aAAS,IAAI,OAAO,IAAI,MAAM,KAAK;AAClC,YAAM,IAAI,KAAK,OAAO;AACtB,UAAI,EAAE,SAAS,MAAM,KAAK;AACzB;AAAA,MACD;AACA,UAAI,UAAU,QAAQ,MAAM,SAAS,EAAE,IAAI,GAAG;AAC7C,eAAO,KAAK,CAAC;AAAA,MACd;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EAEA,GAAG,GAAG;AACL,WAAO,KAAK,GAAG,CAAC,EAAE;AAAA,EACnB;AAAA,EAEA,GAAG,GAAG;AACL,QAAI,KAAK,QAAQ,IAAI,GAAG;AACvB,aAAO;AAAA,IACR;AACA,WAAO,KAAK,OAAO,KAAK,QAAQ;AAAA,EACjC;AAAA,EAEA,GAAG,GAAG;AACL,SAAK,SAAS;AACd,QAAI,MAAM,GAAG;AACZ,aAAO;AAAA,IACR;AACA,QAAI,IAAI,GAAG;AACV,aAAO,KAAK,GAAG,CAAC,CAAC;AAAA,IAClB;AACA,UAAM,IAAI,KAAK,QAAQ,IAAI;AAC3B,SAAK,KAAK,CAAC;AACX,QAAI,KAAK,KAAK,OAAO,QAAQ;AAE5B,aAAO,KAAK,OAAO,KAAK,OAAO,SAAS;AAAA,IACzC;AACA,WAAO,KAAK,OAAO;AAAA,EACpB;AAAA,EAgBA,gBAAgB,GAAG;AAClB,WAAO;AAAA,EACR;AAAA,EAEA,WAAW;AACV,QAAI,KAAK,UAAU,IAAI;AACtB,WAAK,MAAM;AAAA,IACZ;AAAA,EACD;AAAA,EAEA,QAAQ;AACP,SAAK,KAAK,CAAC;AACX,SAAK,QAAQ,KAAK,gBAAgB,CAAC;AAAA,EACpC;AAAA,EAGA,eAAe,aAAa;AAC3B,SAAK,cAAc;AACnB,SAAK,SAAS,CAAC;AACf,SAAK,QAAQ;AACb,SAAK,aAAa;AAAA,EACnB;AAAA,EAOA,mBAAmB,GAAG,SAAS;AAC9B,SAAK,KAAK,CAAC;AACX,QAAI,KAAK,KAAK,OAAO,QAAQ;AAC5B,aAAO;AAAA,IACR;AACA,QAAI,QAAQ,KAAK,OAAO;AACxB,WAAO,MAAM,YAAY,KAAK,SAAS;AACtC,UAAI,MAAM,SAAS,MAAM,KAAK;AAC7B,eAAO;AAAA,MACR;AACA,WAAK;AACL,WAAK,KAAK,CAAC;AACX,cAAQ,KAAK,OAAO;AAAA,IACrB;AACA,WAAO;AAAA,EACR;AAAA,EAOA,uBAAuB,GAAG,SAAS;AAClC,WAAO,KAAK,KAAK,KAAK,OAAO,GAAG,YAAY,SAAS;AACpD,WAAK;AAAA,IACN;AACA,WAAO;AAAA,EACR;AAAA,EAOA,uBAAuB,YACrB,SAAS;AACV,QAAI,YAAY,QAAW;AAC1B,gBAAU;AAAA,IACX;AACA,SAAK,SAAS;AACd,QAAI,aAAa,KAAK,cAAc,KAAK,OAAO,QAAQ;AACvD,YAAM,KAAK,aAAa,gBAAgB,KAAK,OAAO,SAAS;AAAA,IAC9D;AACA,UAAM,gBAAgB,KAAK,mBAAmB,aAAa,GAAG,MAAM,qBAAqB;AACzF,UAAM,QAAQ,aAAa;AAE3B,UAAM,KAAK,kBAAkB,KAAK,KAAK,OAAO,SAAS,IAAI;AAC3D,WAAO,KAAK,iBAAiB,OAAO,IAAI,OAAO;AAAA,EAChD;AAAA,EAOA,sBAAsB,YACpB,SAAS;AACV,QAAI,YAAY,QAAW;AAC1B,gBAAU;AAAA,IACX;AACA,SAAK,SAAS;AACd,QAAI,aAAa,KAAK,cAAc,KAAK,OAAO,QAAQ;AACvD,YAAM,KAAK,aAAa,gBAAgB,KAAK,OAAO,SAAS;AAAA,IAC9D;AACA,UAAM,gBAAgB,KAAK,uBAAuB,aAAa,GAAG,MAAM,qBAAqB;AAC7F,QAAI,kBAAkB,aAAa,GAAG;AACrC,aAAO;AAAA,IACR;AAEA,UAAM,QAAQ,gBAAgB;AAC9B,UAAM,KAAK,aAAa;AACxB,WAAO,KAAK,iBAAiB,OAAO,IAAI,OAAO;AAAA,EAChD;AAAA,EAEA,iBAAiB,MAAM,OAAO,SAAS;AACtC,UAAM,SAAS,CAAC;AAChB,aAAS,IAAI,MAAM,IAAI,QAAQ,GAAG,KAAK;AACtC,YAAM,IAAI,KAAK,OAAO;AACtB,UAAI,YAAY,IAAI;AACnB,YAAI,EAAE,YAAY,MAAM,uBAAuB;AAC9C,iBAAO,KAAK,CAAC;AAAA,QACd;AAAA,MACD,WAAW,EAAE,YAAY,SAAS;AACjC,eAAO,KAAK,CAAC;AAAA,MACd;AAAA,IACD;AACA,QAAI,OAAO,WAAW,GAAG;AACxB,aAAO;AAAA,IACR;AACA,WAAO;AAAA,EACR;AAAA,EAEA,gBAAgB;AACf,WAAO,KAAK,YAAY,cAAc;AAAA,EACvC;AAAA,EAGA,QAAQ,UAAU;AACjB,SAAK,SAAS;AACd,SAAK,KAAK;AACV,QAAI,aAAa,UAAa,aAAa,MAAM;AAChD,iBAAW,IAAI,SAAS,GAAG,KAAK,OAAO,SAAS,CAAC;AAAA,IAClD;AACA,QAAI,QAAQ,SAAS;AACrB,QAAI,iBAAiB,OAAO;AAC3B,cAAQ,MAAM;AAAA,IACf;AACA,QAAI,OAAO,SAAS;AACpB,QAAI,gBAAgB,OAAO;AAC1B,aAAO,KAAK;AAAA,IACb;AACA,QAAI,UAAU,QAAQ,SAAS,QAAQ,QAAQ,KAAK,OAAO,GAAG;AAC7D,aAAO;AAAA,IACR;AACA,QAAI,QAAQ,KAAK,OAAO,QAAQ;AAC/B,aAAO,KAAK,OAAO,SAAS;AAAA,IAC7B;AACA,QAAI,IAAI;AACR,aAAS,IAAI,OAAO,IAAI,OAAO,GAAG,KAAK;AACtC,YAAM,IAAI,KAAK,OAAO;AACtB,UAAI,EAAE,SAAS,MAAM,KAAK;AACzB;AAAA,MACD;AACA,UAAI,IAAI,EAAE;AAAA,IACX;AACA,WAAO;AAAA,EACR;AAAA,EAGA,OAAO;AACN,SAAK,SAAS;AACd,WAAO,KAAK,MAAM,GAAI,MAAM,KAAM;AACjC;AAAA,IACD;AAAA,EACD;AACD;;;AC3VA,IAAqB,oBAArB,cAA+C,oBAAoB;AAAA,EAC/D,YAAY,OAAO,SAAS;AACxB,UAAM,KAAK;AACX,SAAK,UAAU,YAAU,SAAY,MAAM,kBAAkB;AAAA,EACjE;AAAA,EAEA,gBAAgB,GAAG;AACf,WAAO,KAAK,mBAAmB,GAAG,KAAK,OAAO;AAAA,EAClD;AAAA,EAEA,GAAG,GAAG;AACF,QAAI,MAAI,KAAK,KAAK,QAAM,IAAE,GAAG;AACzB,aAAO;AAAA,IACX;AACA,QAAI,IAAI,KAAK;AACb,QAAI,IAAI;AAER,WAAO,KAAK,GAAG;AAEX,UAAI,KAAK,uBAAuB,IAAI,GAAG,KAAK,OAAO;AACnD,WAAK;AAAA,IACT;AACA,QAAI,IAAI,GAAG;AACP,aAAO;AAAA,IACX;AACA,WAAO,KAAK,OAAO;AAAA,EACvB;AAAA,EAEA,GAAG,GAAG;AACF,SAAK,SAAS;AACd,QAAI,MAAM,GAAG;AACT,aAAO;AAAA,IACX;AACA,QAAI,IAAI,GAAG;AACP,aAAO,KAAK,GAAG,CAAC,CAAC;AAAA,IACrB;AACA,QAAI,IAAI,KAAK;AACb,QAAI,IAAI;AAER,WAAO,IAAI,GAAG;AAEV,UAAI,KAAK,KAAK,IAAI,CAAC,GAAG;AAClB,YAAI,KAAK,mBAAmB,IAAI,GAAG,KAAK,OAAO;AAAA,MACnD;AACA,WAAK;AAAA,IACT;AACA,WAAO,KAAK,OAAO;AAAA,EACvB;AAAA,EAGA,6BAA6B;AACzB,QAAI,IAAI;AACR,SAAK,KAAK;AACV,aAAS,IAAG,GAAG,IAAG,KAAK,OAAO,QAAO,KAAK;AACtC,YAAM,IAAI,KAAK,OAAO;AACtB,UAAI,EAAE,YAAU,KAAK,SAAS;AAC1B,aAAK;AAAA,MACT;AACA,UAAI,EAAE,SAAO,MAAM,KAAK;AACpB;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AACJ;;;AC3FA,IAAqB,gBAArB,cAA2C,kBAAkB;AAAA,EACzD,YAAY,QAAQ;AAChB,UAAM;AACN,SAAK,SAAS;AAAA,EAClB;AAAA,EAEA,eAAe,KAAK;AAChB,YAAQ,IAAI,aAAa,KAAK,OAAO,UAAU,IAAI,aAAa,aAAa,KAAK,OAAO,OAAO,GAAG,CAAC,EAAE,IAAI;AAAA,EAC9G;AAAA,EAEA,cAAc,MAAM;AAChB,YAAQ,IAAI,aAAa,KAAK,SAAS,WAAW,KAAK,OAAO,UAAU,KAAK,OAAO,KAAK,UAAU;AAAA,EACvG;AAAA,EAEA,cAAc,KAAK;AACf,YAAQ,IAAI,aAAa,KAAK,OAAO,UAAU,IAAI,aAAa,aAAa,KAAK,OAAO,OAAO,GAAG,CAAC,EAAE,IAAI;AAAA,EAC9G;AACJ;;;ACTA,IAAqB,SAArB,cAAoC,WAAW;AAAA,EAK3C,YAAY,OAAO;AACf,UAAM;AAEN,SAAK,SAAS;AAKd,SAAK,cAAc,IAAI,qBAAqB;AAC5C,SAAK,mBAAmB,CAAC;AACzB,SAAK,iBAAiB,KAAK,CAAC;AAK5B,SAAK,OAAO;AAKZ,SAAK,kBAAkB;AAQvB,SAAK,UAAU;AAKf,SAAK,kBAAkB;AAKvB,SAAK,gBAAgB;AACrB,SAAK,eAAe,KAAK;AAAA,EAC7B;AAAA,EAGA,QAAQ;AACJ,QAAI,KAAK,WAAW,MAAM;AACtB,WAAK,OAAO,KAAK,CAAC;AAAA,IACtB;AACA,SAAK,YAAY,MAAM,IAAI;AAC3B,SAAK,OAAO;AACZ,SAAK,gBAAgB;AACrB,SAAK,SAAS,KAAK;AACnB,SAAK,mBAAmB,CAAC;AACzB,SAAK,iBAAiB,KAAK,CAAC;AAC5B,QAAI,KAAK,YAAY,MAAM;AACvB,WAAK,QAAQ,MAAM;AAAA,IACvB;AAAA,EACJ;AAAA,EAoBA,MAAM,OAAO;AACT,QAAI,IAAI,KAAK,gBAAgB;AAC7B,QAAI,EAAE,SAAS,OAAO;AAClB,WAAK,YAAY,YAAY,IAAI;AACjC,WAAK,QAAQ;AAAA,IACjB,OAAO;AACH,UAAI,KAAK,YAAY,cAAc,IAAI;AACvC,UAAI,KAAK,mBAAmB,EAAE,eAAe,IAAI;AAI7C,aAAK,KAAK,aAAa,CAAC;AAAA,MAC5B;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EAmBA,gBAAgB;AACZ,QAAI,IAAI,KAAK,gBAAgB;AAC7B,QAAI,EAAE,OAAO,GAAG;AACZ,WAAK,YAAY,YAAY,IAAI;AACjC,WAAK,QAAQ;AAAA,IACjB,OAAO;AACH,UAAI,KAAK,YAAY,cAAc,IAAI;AACvC,UAAI,KAAK,oBAAoB,EAAE,eAAe,IAAI;AAI9C,aAAK,KAAK,aAAa,CAAC;AAAA,MAC5B;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EAEA,oBAAoB;AAChB,WAAO,KAAK,mBAAmB,CAAC;AAAA,EACpC;AAAA,EA+BA,iBAAiB,UAAU;AACvB,QAAI,aAAa,MAAM;AACnB,YAAM;AAAA,IACV;AACA,QAAI,KAAK,oBAAoB,MAAM;AAC/B,WAAK,kBAAkB,CAAC;AAAA,IAC5B;AACA,SAAK,gBAAgB,KAAK,QAAQ;AAAA,EACtC;AAAA,EASA,oBAAoB,UAAU;AAC1B,QAAI,KAAK,oBAAoB,MAAM;AAC/B,YAAM,MAAM,KAAK,gBAAgB,QAAQ,QAAQ;AACjD,UAAI,OAAO,GAAG;AACV,aAAK,gBAAgB,OAAO,KAAK,CAAC;AAAA,MACtC;AACA,UAAI,KAAK,gBAAgB,WAAW,GAAG;AACnC,aAAK,kBAAkB;AAAA,MAC3B;AAAA,IACJ;AAAA,EACJ;AAAA,EAGA,uBAAuB;AACnB,SAAK,kBAAkB;AAAA,EAC3B;AAAA,EAGA,wBAAwB;AACpB,QAAI,KAAK,oBAAoB,MAAM;AAC/B,YAAM,MAAM,KAAK;AACjB,WAAK,gBAAgB,QAAQ,SAAU,UAAU;AAC7C,iBAAS,eAAe,GAAG;AAC3B,YAAI,UAAU,QAAQ;AAAA,MAC1B,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EAMA,uBAAuB;AACnB,QAAI,KAAK,oBAAoB,MAAM;AAE/B,YAAM,MAAM,KAAK;AACjB,WAAK,gBAAgB,MAAM,CAAC,EAAE,QAAQ,EAAE,QAAQ,SAAU,UAAU;AAChE,YAAI,SAAS,QAAQ;AACrB,iBAAS,cAAc,GAAG;AAAA,MAC9B,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EAEA,kBAAkB;AACd,WAAO,KAAK,OAAO,YAAY;AAAA,EACnC;AAAA,EAGA,gBAAgB,SAAS;AACrB,SAAK,OAAO,YAAY,WAAW;AAAA,EACvC;AAAA,EASA,uBAAuB;AACnB,UAAM,gBAAgB,KAAK,iBAAiB;AAC5C,QAAI,kBAAkB,MAAM;AACxB,YAAM;AAAA,IACV;AACA,QAAI,SAAS,KAAK,mBAAmB;AACrC,QAAI,WAAW,MAAM;AACjB,YAAM,yBAAyB,IAAI,0BAA0B;AAC7D,6BAAuB,gCAAgC;AACvD,eAAS,IAAI,gBAAgB,sBAAsB,EAC9C,YAAY,aAAa;AAC9B,WAAK,mBAAmB,iBAAiB;AAAA,IAC7C;AACA,WAAO;AAAA,EACX;AAAA,EAEA,iBAAiB;AACb,WAAO,KAAK,eAAe;AAAA,EAC/B;AAAA,EAEA,eAAe,OAAO;AAClB,SAAK,eAAe,KAAK;AAAA,EAC7B;AAAA,EAEA,iBAAiB;AACb,WAAO,KAAK;AAAA,EAChB;AAAA,EAGA,eAAe,OAAO;AAClB,SAAK,SAAS;AACd,SAAK,MAAM;AACX,SAAK,SAAS;AAAA,EAClB;AAAA,EAMA,kBAAkB;AACd,WAAO,KAAK,OAAO,GAAG,CAAC;AAAA,EAC3B;AAAA,EAEA,qBAAqB,KAAK,gBAAgB,KAAK;AAC3C,qBAAiB,kBAAkB;AACnC,UAAM,OAAO;AACb,QAAI,mBAAmB,MAAM;AACzB,uBAAiB,KAAK,gBAAgB;AAAA,IAC1C;AACA,SAAK,iBAAiB;AACtB,UAAM,OAAO,eAAe;AAC5B,UAAM,SAAS,eAAe;AAC9B,UAAM,WAAW,KAAK,yBAAyB;AAC/C,aAAS,YAAY,MAAM,gBAAgB,MAAM,QAAQ,KAAK,GAAG;AAAA,EACrE;AAAA,EAuBA,UAAU;AACN,UAAM,IAAI,KAAK,gBAAgB;AAC/B,QAAI,EAAE,SAAS,MAAM,KAAK;AACtB,WAAK,eAAe,EAAE,QAAQ;AAAA,IAClC;AACA,UAAM,cAAc,KAAK,oBAAoB,QAAQ,KAAK,gBAAgB,SAAS;AACnF,QAAI,KAAK,mBAAmB,aAAa;AACrC,UAAI;AACJ,UAAI,KAAK,YAAY,oBAAoB,IAAI,GAAG;AAC5C,eAAO,KAAK,KAAK,aAAa,CAAC;AAAA,MACnC,OAAO;AACH,eAAO,KAAK,KAAK,aAAa,CAAC;AAAA,MACnC;AACA,WAAK,gBAAgB,KAAK;AAC1B,UAAI,aAAa;AACb,aAAK,gBAAgB,QAAQ,SAAU,UAAU;AAC7C,cAAI,gBAAgB,aAAc,KAAK,gBAAgB,UAAa,KAAK,YAAY,GAAI;AACrF,qBAAS,eAAe,IAAI;AAAA,UAChC,WAAW,gBAAgB,cAAc;AACrC,qBAAS,cAAc,IAAI;AAAA,UAC/B;AAAA,QACJ,CAAC;AAAA,MACL;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EAEA,wBAAwB;AAEpB,QAAI,KAAK,KAAK,cAAc,MAAM;AAC9B,WAAK,KAAK,UAAU,SAAS,KAAK,IAAI;AAAA,IAC1C;AAAA,EACJ;AAAA,EAMA,UAAU,UAAU,OAAO,WAAW;AAClC,SAAK,QAAQ;AACb,SAAK,OAAO;AACZ,SAAK,KAAK,QAAQ,KAAK,OAAO,GAAG,CAAC;AAClC,QAAI,KAAK,iBAAiB;AACtB,WAAK,sBAAsB;AAAA,IAC/B;AACA,SAAK,sBAAsB;AAAA,EAC/B;AAAA,EAEA,WAAW;AACP,SAAK,KAAK,OAAO,KAAK,OAAO,GAAG,EAAE;AAElC,SAAK,qBAAqB;AAC1B,SAAK,QAAQ,KAAK,KAAK;AACvB,SAAK,OAAO,KAAK,KAAK;AAAA,EAC1B;AAAA,EAEA,cAAc,UAAU,QAAQ;AAC5B,aAAS,aAAa,MAAM;AAG5B,QAAI,KAAK,mBAAmB,KAAK,SAAS,UAAU;AAChD,UAAI,KAAK,KAAK,cAAc,MAAM;AAC9B,aAAK,KAAK,UAAU,gBAAgB;AACpC,aAAK,KAAK,UAAU,SAAS,QAAQ;AAAA,MACzC;AAAA,IACJ;AACA,SAAK,OAAO;AAAA,EAChB;AAAA,EAQA,gBAAgB;AACZ,QAAI,KAAK,iBAAiB,WAAW,GAAG;AACpC,aAAO;AAAA,IACX,OAAO;AACH,aAAO,KAAK,iBAAiB,KAAK,iBAAiB,SAAS;AAAA,IAChE;AAAA,EACJ;AAAA,EAEA,mBAAmB,UAAU,OAAO,WAAW,YAAY;AACvD,SAAK,QAAQ;AACb,SAAK,iBAAiB,KAAK,UAAU;AACrC,SAAK,OAAO;AACZ,SAAK,KAAK,QAAQ,KAAK,OAAO,GAAG,CAAC;AAClC,SAAK,sBAAsB;AAAA,EAC/B;AAAA,EAGA,wBAAwB,UAAU,OAAO,WAAW;AAChD,UAAM,WAAW,KAAK;AACtB,aAAS,YAAY;AACrB,aAAS,gBAAgB;AACzB,aAAS,OAAO,KAAK,OAAO,GAAG,EAAE;AAEjC,SAAK,OAAO;AACZ,SAAK,KAAK,QAAQ,SAAS;AAC3B,QAAI,KAAK,iBAAiB;AACtB,WAAK,KAAK,SAAS,QAAQ;AAAA,IAC/B;AACA,SAAK,sBAAsB;AAAA,EAC/B;AAAA,EAEA,wBAAwB,WAAW;AAC/B,SAAK,iBAAiB,IAAI;AAC1B,SAAK,KAAK,OAAO,KAAK,OAAO,GAAG,EAAE;AAClC,UAAM,SAAS,KAAK;AAEpB,UAAM,iBAAiB,KAAK,kBAAkB;AAC9C,QAAI,mBAAmB,QAAQ,eAAe,SAAS,GAAG;AACtD,aAAO,KAAK,SAAS,WAAW;AAC5B,aAAK,qBAAqB;AAC1B,aAAK,OAAO,KAAK,KAAK;AAAA,MAC1B;AAAA,IACJ,OAAO;AACH,WAAK,OAAO;AAAA,IAChB;AAEA,WAAO,YAAY;AACnB,QAAI,KAAK,mBAAmB,cAAc,MAAM;AAE5C,gBAAU,SAAS,MAAM;AAAA,IAC7B;AAAA,EACJ;AAAA,EAEA,mBAAmB,WAAW;AAC1B,QAAI,MAAM,KAAK;AACf,WAAO,QAAQ,MAAM;AACjB,UAAI,IAAI,cAAc,WAAW;AAC7B,eAAO;AAAA,MACX;AACA,YAAM,IAAI;AAAA,IACd;AACA,WAAO;AAAA,EACX;AAAA,EAEA,SAAS,UAAU,YAAY;AAC3B,WAAO,cAAc,KAAK,iBAAiB,KAAK,iBAAiB,SAAS;AAAA,EAC9E;AAAA,EAEA,UAAU,SAAS;AAEf,WAAO;AAAA,EACX;AAAA,EAgBA,gBAAgB,QAAQ;AACpB,UAAMC,OAAM,KAAK,QAAQ;AACzB,QAAI,MAAM,KAAK;AACf,UAAM,IAAIA,KAAI,OAAO,KAAK;AAC1B,QAAI,YAAYA,KAAI,WAAW,CAAC;AAChC,QAAI,UAAU,SAAS,MAAM,GAAG;AAC5B,aAAO;AAAA,IACX;AACA,QAAI,CAAC,UAAU,SAAS,MAAM,OAAO,GAAG;AACpC,aAAO;AAAA,IACX;AACA,WAAO,QAAQ,QAAQ,IAAI,iBAAiB,KAAK,UAAU,SAAS,MAAM,OAAO,GAAG;AAChF,YAAM,gBAAgBA,KAAI,OAAO,IAAI;AACrC,YAAM,KAAK,cAAc,YAAY;AACrC,kBAAYA,KAAI,WAAW,GAAG,WAAW;AACzC,UAAI,UAAU,SAAS,MAAM,GAAG;AAC5B,eAAO;AAAA,MACX;AACA,YAAM,IAAI;AAAA,IACd;AACA,QAAI,UAAU,SAAS,MAAM,OAAO,KAAK,WAAW,MAAM,KAAK;AAC3D,aAAO;AAAA,IACX,OAAO;AACH,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EASA,oBAAoB;AAChB,WAAO,KAAK,QAAQ,IAAI,kBAAkB,KAAK,OAAO,KAAK,IAAI;AAAA,EACnE;AAAA,EAEA,qCAAqC;AACjC,UAAMA,OAAM,KAAK,QAAQ;AACzB,UAAM,IAAIA,KAAI,OAAO,KAAK;AAC1B,WAAOA,KAAI,WAAW,CAAC;AAAA,EAC3B;AAAA,EAGA,aAAa,UAAU;AACnB,UAAM,YAAY,KAAK,gBAAgB,EAAE;AACzC,QAAI,cAAc,MAAM;AACpB,aAAO;AAAA,IACX,OAAO;AACH,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAUA,uBAAuB,GAAG;AACtB,QAAI,KAAK;AACT,QAAI,MAAM,MAAM;AACZ,UAAI,KAAK;AAAA,IACb;AACA,UAAM,QAAQ,CAAC;AACf,WAAO,MAAM,MAAM;AAEf,YAAM,YAAY,EAAE;AACpB,UAAI,YAAY,GAAG;AACf,cAAM,KAAK,KAAK;AAAA,MACpB,OAAO;AACH,cAAM,KAAK,KAAK,UAAU,UAAU;AAAA,MACxC;AACA,UAAI,EAAE;AAAA,IACV;AACA,WAAO;AAAA,EACX;AAAA,EAGA,gBAAgB;AACZ,WAAO,KAAK,QAAQ,cAAc,SAAS;AAAA,EAC/C;AAAA,EAGA,UAAU;AACN,QAAI,UAAU;AACd,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,cAAc,QAAQ,KAAK;AACxD,YAAM,MAAM,KAAK,QAAQ,cAAc;AACvC,UAAI,IAAI,OAAO,SAAS,GAAG;AACvB,YAAI,SAAS;AACT,kBAAQ,IAAI;AAAA,QAChB;AACA,aAAK,QAAQ,QAAQ,cAAc,IAAI,WAAW,GAAG;AACrD,aAAK,QAAQ,MAAM,IAAI,SAAS,KAAK,cAAc,KAAK,aAAa,CAAC;AACtE,kBAAU;AAAA,MACd;AAAA,IACJ;AAAA,EACJ;AAAA,EAQA,gBAAgB;AACZ,WAAO,KAAK,OAAO;AAAA,EACvB;AAAA,EAMA,SAAS,OAAO;AACZ,QAAI,CAAC,OAAO;AACR,WAAK,oBAAoB,KAAK,OAAO;AACrC,WAAK,UAAU;AAAA,IACnB,OAAO;AACH,UAAI,KAAK,YAAY,MAAM;AACvB,aAAK,oBAAoB,KAAK,OAAO;AAAA,MACzC;AACA,WAAK,UAAU,IAAI,cAAc,IAAI;AACrC,WAAK,iBAAiB,KAAK,OAAO;AAAA,IACtC;AAAA,EACJ;AACJ;AASA,OAAO,qBAAqB,CAAC;;;AC3mB7B,IAAqB,yBAArB,MAA4C;AAAA,EAExC,cAAc;AACV,SAAK,QAAQ,IAAI,QAAQ;AAAA,EAC7B;AAAA,EAOA,IAAI,KAAK;AACL,QAAI,QAAQ,kBAAkB,OAAO;AACjC,aAAO,kBAAkB;AAAA,IAC7B;AACA,UAAM,WAAW,KAAK,MAAM,IAAI,GAAG,KAAK;AACxC,QAAI,aAAa,MAAM;AACnB,aAAO;AAAA,IACX;AACA,SAAK,MAAM,IAAI,KAAK,GAAG;AACvB,WAAO;AAAA,EACX;AAAA,EAEA,IAAI,KAAK;AACL,WAAO,KAAK,MAAM,IAAI,GAAG,KAAK;AAAA,EAClC;AAAA,EAEA,IAAI,SAAQ;AACR,WAAO,KAAK,MAAM;AAAA,EACtB;AACJ;;;AClCA,IAAqB,mBAArB,cAA8C,aAAa;AAAA,EACvD,YAAY,QAAQ;AAChB,UAAM;AACN,SAAK,YAAY;AACjB,SAAK,SAAS;AAAA,EAClB;AAAA,EAEA,SAAS,GAAG;AACR,WAAO;AAAA,EACX;AAAA,EAEA,YAAY;AACR,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,YAAY;AACR,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,aAAa;AACT,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,oBAAoB;AAChB,QAAI,KAAK,WAAW,MAAM;AACtB,aAAO,SAAS;AAAA,IACpB;AACA,UAAM,aAAa,KAAK,OAAO;AAC/B,WAAO,IAAI,SAAS,YAAY,UAAU;AAAA,EAC9C;AAAA,EAEA,gBAAgB;AACZ,WAAO;AAAA,EACX;AAAA,EAEA,OAAO,SAAS;AACZ,WAAO,QAAQ,cAAc,IAAI;AAAA,EACrC;AAAA,EAEA,UAAU;AACN,WAAO,KAAK,OAAO;AAAA,EACvB;AAAA,EAEA,WAAW;AACP,QAAI,KAAK,OAAO,SAAS,MAAM,KAAK;AAChC,aAAO;AAAA,IACX,OAAO;AACH,aAAO,KAAK,OAAO;AAAA,IACvB;AAAA,EACJ;AACJ;;;AC7CA,IAAqB,gBAArB,cAA2C,iBAAiB;AAAA,EACxD,YAAY,OAAO;AACf,UAAM,KAAK;AAAA,EACf;AAAA,EAEA,cAAc;AACV,WAAO;AAAA,EACX;AAAA,EAEA,OAAO,SAAS;AACZ,WAAO,QAAQ,eAAe,IAAI;AAAA,EACtC;AACJ;;;ACUA,IAAqB,oBAArB,cAA+C,YAAY;AAAA,EAC1D,YAAY,QAAQ,qBAAqB;AACxC,aAAS,UAAU;AACnB,0BAAsB,uBAAuB;AAC7C,UAAM,QAAQ,mBAAmB;AACjC,SAAK,YAAY;AAQjB,SAAK,WAAW;AAChB,SAAK,QAAQ;AACb,SAAK,OAAO;AAKZ,SAAK,YAAY;AAAA,EAClB;AAAA,EAGA,SAAS,KAAK;AAEb,SAAK,YAAY,IAAI;AACrB,SAAK,gBAAgB,IAAI;AACzB,SAAK,WAAW;AAChB,SAAK,QAAQ,IAAI;AACjB,SAAK,OAAO,IAAI;AAEhB,QAAG,IAAI,UAAU;AAChB,WAAK,WAAW,CAAC;AAEjB,UAAI,SAAS,IAAI,SAAS,OAAO;AAChC,YAAI,iBAAiB,eAAe;AACnC,eAAK,SAAS,KAAK,KAAK;AACxB,gBAAM,YAAY;AAAA,QACnB;AAAA,MACD,GAAG,IAAI;AAAA,IACR;AAAA,EACD;AAAA,EAGA,UAAU,UAAU;AAAA,EACpB;AAAA,EAEA,SAAS,UAAU;AAAA,EACnB;AAAA,EAGA,SAAS,OAAO;AACf,QAAI,KAAK,aAAa,MAAM;AAC3B,WAAK,WAAW,CAAC;AAAA,IAClB;AACA,SAAK,SAAS,KAAK,KAAK;AACxB,WAAO;AAAA,EACR;AAAA,EAMA,kBAAkB;AACjB,QAAI,KAAK,aAAa,MAAM;AAC3B,WAAK,SAAS,IAAI;AAAA,IACnB;AAAA,EACD;AAAA,EAEA,aAAa,OAAO;AACnB,UAAM,OAAO,IAAI,iBAAiB,KAAK;AACvC,SAAK,SAAS,IAAI;AAClB,SAAK,YAAY;AACjB,WAAO;AAAA,EACR;AAAA,EAEA,aAAa,UAAU;AACtB,UAAM,OAAO,IAAI,cAAc,QAAQ;AACvC,SAAK,SAAS,IAAI;AAClB,SAAK,YAAY;AACjB,WAAO;AAAA,EACR;AAAA,EAEA,SAAS,GAAG,MAAM;AACjB,WAAO,QAAQ;AACf,QAAI,KAAK,aAAa,QAAQ,IAAI,KAAK,KAAK,KAAK,SAAS,QAAQ;AACjE,aAAO;AAAA,IACR;AACA,QAAI,SAAS,MAAM;AAClB,aAAO,KAAK,SAAS;AAAA,IACtB,OAAO;AACN,eAAQ,IAAE,GAAG,IAAE,KAAK,SAAS,QAAQ,KAAK;AACzC,cAAM,QAAQ,KAAK,SAAS;AAC5B,YAAG,iBAAiB,MAAM;AACzB,cAAG,MAAI,GAAG;AACT,mBAAO;AAAA,UACR,OAAO;AACN,iBAAK;AAAA,UACN;AAAA,QACD;AAAA,MACD;AACA,aAAO;AAAA,IACR;AAAA,EACD;AAAA,EAEA,SAAS,OAAO,GAAG;AAClB,QAAI,KAAK,aAAa,QAAQ,IAAI,KAAK,KAAK,KAAK,SAAS,QAAQ;AACjE,aAAO;AAAA,IACR;AACA,aAAQ,IAAE,GAAG,IAAE,KAAK,SAAS,QAAQ,KAAK;AACzC,YAAM,QAAQ,KAAK,SAAS;AAC5B,UAAI,iBAAiB,cAAc;AAClC,YAAI,MAAM,OAAO,SAAS,OAAO;AAChC,cAAG,MAAI,GAAG;AACT,mBAAO;AAAA,UACR,OAAO;AACN,iBAAK;AAAA,UACN;AAAA,QACD;AAAA,MACD;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EAEA,UAAU,OAAQ;AACjB,QAAI,KAAK,aAAY,MAAM;AAC1B,aAAO,CAAC;AAAA,IACT,OAAO;AACN,YAAM,SAAS,CAAC;AAChB,eAAQ,IAAE,GAAG,IAAE,KAAK,SAAS,QAAQ,KAAK;AACzC,cAAM,QAAQ,KAAK,SAAS;AAC5B,YAAI,iBAAiB,cAAc;AAClC,cAAI,MAAM,OAAO,SAAS,OAAO;AAChC,mBAAO,KAAK,KAAK;AAAA,UAClB;AAAA,QACD;AAAA,MACD;AACA,aAAO;AAAA,IACR;AAAA,EACD;AAAA,EAEA,oBAAoB,SAAS,GAAG;AAC/B,WAAO,KAAK,SAAS,GAAG,OAAO;AAAA,EAChC;AAAA,EAEA,qBAAqB,SAAS;AAC7B,QAAI,KAAK,aAAY,MAAM;AAC1B,aAAO,CAAC;AAAA,IACT,OAAO;AACN,YAAM,WAAW,CAAC;AAClB,eAAQ,IAAE,GAAG,IAAE,KAAK,SAAS,QAAQ,KAAK;AACzC,cAAM,QAAQ,KAAK,SAAS;AAC5B,YAAI,iBAAiB,SAAS;AAC7B,mBAAS,KAAK,KAAK;AAAA,QACpB;AAAA,MACD;AACA,aAAO;AAAA,IACR;AAAA,EACD;AAAA,EAEA,gBAAgB;AACf,QAAI,KAAK,aAAY,MAAM;AAC1B,aAAO;AAAA,IACR,OAAO;AACN,aAAO,KAAK,SAAS;AAAA,IACtB;AAAA,EACD;AAAA,EAEA,oBAAoB;AACnB,QAAI,KAAK,UAAU,QAAQ,KAAK,SAAS,MAAM;AAC9C,aAAO,SAAS;AAAA,IACjB,OAAO;AACN,aAAO,IAAI,SAAS,KAAK,MAAM,YAAY,KAAK,KAAK,UAAU;AAAA,IAChE;AAAA,EACD;AACD;AAEA,YAAY,QAAQ,IAAI,kBAAkB;;;AC/M1C,IAAO,gBAAQ,EAAE,cAAc;;;ACoB/B,IAAM,SAAS;AAAA,EACX;AAAA,EAAK;AAAA,EAAK;AAAA,EAAM;AAAA,EAAO;AAAA,EAAO;AAAA,EAAa;AAAA,EAAa;AAAA,EAAa;AAAA,EAAY;AAAA,EAAmB;AAAA,EAAO;AAAA,EAC3G;AAAA,EAAwB;AAAA,EAAmB;AAAA,EAAU;AAAA,EAAa;AAAA,EAAa;AACnF;AAEA,IAAO,iBAAQ;;;AC1Bf,IAAM,gBAAgB;AAAA,EAAC;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EACvE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EACvE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EACtE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EACtE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EACtE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EACtE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EACvE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EACtE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EACtE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EACvE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EACtE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EACtE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EACtE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EACvE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EACvE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EACtE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EACrE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EACvE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EACvE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EACtE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EACtE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EACtE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EACrE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EACtE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAI;AAAA,EACtE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EACvE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EACrE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EACvE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EACrE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EACrE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EACrE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EACrE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EACrE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EACrE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EACtE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EACtE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EACtE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EACtE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EACvE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EACtE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EACvE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EACtE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EACvE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EACvE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EACtE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EACvE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EACvE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EACvE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EACrE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EACvE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EACvE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EACvE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EACvE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EACvE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EACtE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EACrE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EACtE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EACtE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EACtE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EACvE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EACtE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EACvE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EACvE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EACtE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EACpE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EACpE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EACrE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EACpE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EACvE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EACpE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EACvE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EACvE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EACpE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EACpE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EACvE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EACvE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EACpE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EACpE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EACvE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EACtE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EACvE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EACvE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EACvE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EACrE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EACpE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EACpE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EACtE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EACpE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EACpE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EACvE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EACtE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EACvE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EACpE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EACpE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EACtE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EACrE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EACtE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EACvE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EACvE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EACtE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EACvE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EACvE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EACrE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EACpE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EACvE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EACvE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EACvE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EACtE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EACrE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EACpE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EACvE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EACvE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EACvE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EACvE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EACtE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EACtE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EACpE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EACvE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EACtE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EACpE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EACtE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EACvE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EACtE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EACvE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EACvE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EACpE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EACvE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EACtE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EACrE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EACtE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EACtE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EACvE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EACrE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EACvE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EACpE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EACtE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EACtE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EACvE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EACtE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EACpE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAC;AAGb,IAAM,MAAM,IAAI,eAAO,IAAI,gBAAgB,EAAE,YAAY,aAAa;AAEtE,IAAM,iBAAiB,IAAI,gBAAgB,IAAK,CAAC,IAAI,UAAU,IAAI,eAAO,IAAI,IAAI,IAAI,KAAK,CAAE;AAE7F,IAAqB,kBAArB,cAA6C,eAAO,MAAM;AAAA,EAiCtD,YAAY,OAAO;AACf,UAAM,KAAK;AACX,SAAK,UAAU,IAAI,eAAO,IAAI,kBAAkB,MAAM,KAAK,gBAAgB,IAAI,eAAO,uBAAuB,CAAC;AAAA,EAClH;AAAA,EAEA,IAAI,MAAM;AACN,WAAO;AAAA,EACX;AACJ;AAvCI,cAFiB,iBAEV,mBAAkB;AACzB,cAHiB,iBAGV,gBAAe,CAAE,yBAAyB,QAAS;AAC7D,cAJoB,iBAIb,aAAY,CAAE,cAAe;AACpC,cALoB,iBAKb,gBAAe;AAAA,EAAE;AAAA,EAAM;AAAA,EAAW;AAAA,EAAU;AAAA,EAC3B;AAAA,EAAO;AAAA,EAAO;AAAA,EAAO;AAAA,EAAQ;AAAA,EAAO;AAAA,EACpC;AAAA,EAAa;AAAA,EAAkB;AAAA,EAC/B;AAAA,EAAwB;AAAA,EACxB;AAAA,EAAO;AAAA,EAAO;AAAA,EAAqB;AAAA,EAAQ;AAAA,EAC3C;AAAA,EAAM;AAAA,EAAsB;AAAA,EAAgB;AAAA,EAC5C;AAAA,EAAM;AAAA,EAA0B;AAAA,EAAW;AAAA,EAC3C;AAAA,EAAS;AAAA,EAAuB;AAAA,EAChC;AAAA,EAA0B;AAAA,EAC1B;AAAA,EAAM;AAAA,EAAQ;AAAA,EAAM;AAAA,EAAO;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAC7C;AAAA,EAAM;AAAA,EAAS;AAAQ;AAC/C,cAhBoB,iBAgBb,iBAAgB;AAAA,EAAE;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAC1C;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAC1C;AAAA,EAAM;AAAA,EAAM;AAAA,EAAM;AAAA,EAAY;AAAA,EAAc;AAAA,EAC5C;AAAA,EAAQ;AAAA,EAAU;AAAA,EAAM;AAAA,EAAY;AAAA,EAAS;AAAA,EAC7C;AAAA,EAAQ;AAAA,EAAS;AAAA,EAAU;AAAA,EAAY;AAAA,EACvC;AAAA,EAAU;AAAA,EAAQ;AAAA,EAAU;AAAA,EAAO;AAAA,EAAU;AAAA,EAC7C;AAAA,EAAQ;AAAA,EAAU;AAAA,EAAS;AAAA,EAAM;AAAA,EAAQ;AAAA,EACzC;AAAA,EAAY;AAAA,EAAM;AAAK;AAChD,cAxBoB,iBAwBb,aAAY;AAAA,EAAE;AAAA,EAAQ;AAAA,EAAQ;AAAA,EAAQ;AAAA,EAAQ;AAAA,EAAQ;AAAA,EAAQ;AAAA,EAChD;AAAA,EAAQ;AAAA,EAAQ;AAAA,EAAQ;AAAA,EAAS;AAAA,EAAS;AAAA,EAC1C;AAAA,EAAS;AAAA,EAAS;AAAA,EAAS;AAAA,EAAS;AAAA,EAAS;AAAA,EAC7C;AAAA,EAAc;AAAA,EAAc;AAAA,EAAQ;AAAA,EAAU;AAAA,EAC9C;AAAA,EAAY;AAAA,EAAS;AAAA,EAAU;AAAA,EAAQ;AAAA,EAAS;AAAA,EAChD;AAAA,EAAY;AAAA,EAAS;AAAA,EAAU;AAAA,EAAQ;AAAA,EAAU;AAAA,EACjD;AAAA,EAAU;AAAA,EAAQ;AAAA,EAAQ;AAAA,EAAU;AAAA,EAAS;AAAA,EAC7C;AAAA,EAAQ;AAAA,EAAY;AAAA,EAAY;AAAA,EAAM;AAAK;AAYjE,gBAAgB,MAAM,eAAO,MAAM;AACnC,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,QAAQ;AACxB,gBAAgB,QAAQ;AACxB,gBAAgB,QAAQ;AACxB,gBAAgB,QAAQ;AACxB,gBAAgB,QAAQ;AACxB,gBAAgB,QAAQ;AACxB,gBAAgB,QAAQ;AACxB,gBAAgB,QAAQ;AACxB,gBAAgB,WAAW;AAC3B,gBAAgB,aAAa;AAC7B,gBAAgB,aAAa;AAC7B,gBAAgB,OAAO;AACvB,gBAAgB,SAAS;AACzB,gBAAgB,KAAK;AACrB,gBAAgB,WAAW;AAC3B,gBAAgB,QAAQ;AACxB,gBAAgB,SAAS;AACzB,gBAAgB,OAAO;AACvB,gBAAgB,QAAQ;AACxB,gBAAgB,SAAS;AACzB,gBAAgB,WAAW;AAC3B,gBAAgB,QAAQ;AACxB,gBAAgB,SAAS;AACzB,gBAAgB,OAAO;AACvB,gBAAgB,SAAS;AACzB,gBAAgB,MAAM;AACtB,gBAAgB,SAAS;AACzB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,SAAS;AACzB,gBAAgB,QAAQ;AACxB,gBAAgB,KAAK;AACrB,gBAAgB,OAAO;AACvB,gBAAgB,WAAW;AAC3B,gBAAgB,WAAW;AAC3B,gBAAgB,KAAK;AACrB,gBAAgB,KAAK;;;AC7OrB,IAAqB,qBAArB,cAAgD,eAAO,KAAK,kBAAkB;AAAA,EAG7E,aAAa,KAAK;AAAA,EAClB;AAAA,EAGA,YAAY,KAAK;AAAA,EACjB;AAAA,EAIA,UAAU,KAAK;AAAA,EACf;AAAA,EAGA,SAAS,KAAK;AAAA,EACd;AAAA,EAIA,eAAe,KAAK;AAAA,EACpB;AAAA,EAGA,cAAc,KAAK;AAAA,EACnB;AAAA,EAIA,WAAW,KAAK;AAAA,EAChB;AAAA,EAGA,UAAU,KAAK;AAAA,EACf;AAAA,EAIA,yBAAyB,KAAK;AAAA,EAC9B;AAAA,EAGA,wBAAwB,KAAK;AAAA,EAC7B;AAAA,EAIA,UAAU,KAAK;AAAA,EACf;AAAA,EAGA,SAAS,KAAK;AAAA,EACd;AAAA,EAIA,uBAAuB,KAAK;AAAA,EAC5B;AAAA,EAGA,sBAAsB,KAAK;AAAA,EAC3B;AAAA,EAIA,qBAAqB,KAAK;AAAA,EAC1B;AAAA,EAGA,oBAAoB,KAAK;AAAA,EACzB;AAAA,EAIA,uBAAuB,KAAK;AAAA,EAC5B;AAAA,EAGA,sBAAsB,KAAK;AAAA,EAC3B;AAAA,EAIA,kBAAkB,KAAK;AAAA,EACvB;AAAA,EAGA,iBAAiB,KAAK;AAAA,EACtB;AAAA,EAIA,gBAAgB,KAAK;AAAA,EACrB;AAAA,EAGA,eAAe,KAAK;AAAA,EACpB;AAAA,EAIA,oBAAoB,KAAK;AAAA,EACzB;AAAA,EAGA,mBAAmB,KAAK;AAAA,EACxB;AAAA,EAIA,sBAAsB,KAAK;AAAA,EAC3B;AAAA,EAGA,qBAAqB,KAAK;AAAA,EAC1B;AAAA,EAIA,kBAAkB,KAAK;AAAA,EACvB;AAAA,EAGA,iBAAiB,KAAK;AAAA,EACtB;AAAA,EAIA,qBAAqB,KAAK;AAAA,EAC1B;AAAA,EAGA,oBAAoB,KAAK;AAAA,EACzB;AAAA,EAIA,yBAAyB,KAAK;AAAA,EAC9B;AAAA,EAGA,wBAAwB,KAAK;AAAA,EAC7B;AAAA,EAIA,uCAAuC,KAAK;AAAA,EAC5C;AAAA,EAGA,sCAAsC,KAAK;AAAA,EAC3C;AAAA,EAIA,0CAA0C,KAAK;AAAA,EAC/C;AAAA,EAGA,yCAAyC,KAAK;AAAA,EAC9C;AAAA,EAIA,uBAAuB,KAAK;AAAA,EAC5B;AAAA,EAGA,sBAAsB,KAAK;AAAA,EAC3B;AAAA,EAIA,UAAU,KAAK;AAAA,EACf;AAAA,EAGA,SAAS,KAAK;AAAA,EACd;AAAA,EAIA,qCAAqC,KAAK;AAAA,EAC1C;AAAA,EAGA,oCAAoC,KAAK;AAAA,EACzC;AAAA,EAIA,8BAA8B,KAAK;AAAA,EACnC;AAAA,EAGA,6BAA6B,KAAK;AAAA,EAClC;AAAA,EAIA,yBAAyB,KAAK;AAAA,EAC9B;AAAA,EAGA,wBAAwB,KAAK;AAAA,EAC7B;AAAA,EAIA,kBAAkB,KAAK;AAAA,EACvB;AAAA,EAGA,iBAAiB,KAAK;AAAA,EACtB;AAAA,EAIA,qBAAqB,KAAK;AAAA,EAC1B;AAAA,EAGA,oBAAoB,KAAK;AAAA,EACzB;AAAA,EAIA,mBAAmB,KAAK;AAAA,EACxB;AAAA,EAGA,kBAAkB,KAAK;AAAA,EACvB;AAAA,EAIA,4BAA4B,KAAK;AAAA,EACjC;AAAA,EAGA,2BAA2B,KAAK;AAAA,EAChC;AAAA,EAIA,mBAAmB,KAAK;AAAA,EACxB;AAAA,EAGA,kBAAkB,KAAK;AAAA,EACvB;AAAA,EAIA,0BAA0B,KAAK;AAAA,EAC/B;AAAA,EAGA,yBAAyB,KAAK;AAAA,EAC9B;AAAA,EAIA,2BAA2B,KAAK;AAAA,EAChC;AAAA,EAGA,0BAA0B,KAAK;AAAA,EAC/B;AAAA,EAIA,kBAAkB,KAAK;AAAA,EACvB;AAAA,EAGA,iBAAiB,KAAK;AAAA,EACtB;AAAA,EAIA,gBAAgB,KAAK;AAAA,EACrB;AAAA,EAGA,eAAe,KAAK;AAAA,EACpB;AAAA,EAIA,kBAAkB,KAAK;AAAA,EACvB;AAAA,EAGA,iBAAiB,KAAK;AAAA,EACtB;AAAA,EAIA,WAAW,KAAK;AAAA,EAChB;AAAA,EAGA,UAAU,KAAK;AAAA,EACf;AAAA,EAIA,UAAU,KAAK;AAAA,EACf;AAAA,EAGA,SAAS,KAAK;AAAA,EACd;AAAA,EAIA,YAAY,KAAK;AAAA,EACjB;AAAA,EAGA,WAAW,KAAK;AAAA,EAChB;AAAA,EAIA,YAAY,KAAK;AAAA,EACjB;AAAA,EAGA,WAAW,KAAK;AAAA,EAChB;AAAA,EAIA,UAAU,KAAK;AAAA,EACf;AAAA,EAGA,SAAS,KAAK;AAAA,EACd;AAAA,EAIA,oBAAoB,KAAK;AAAA,EACzB;AAAA,EAGA,mBAAmB,KAAK;AAAA,EACxB;AAAA,EAIA,gBAAgB,KAAK;AAAA,EACrB;AAAA,EAGA,eAAe,KAAK;AAAA,EACpB;AAAA,EAIA,cAAc,KAAK;AAAA,EACnB;AAAA,EAGA,aAAa,KAAK;AAAA,EAClB;AAID;;;ACnXA,IAAqB,oBAArB,cAA+C,eAAO,KAAK,iBAAiB;AAAA,EAG3E,aAAa,KAAK;AAChB,WAAO,KAAK,cAAc,GAAG;AAAA,EAC/B;AAAA,EAIA,UAAU,KAAK;AACb,WAAO,KAAK,cAAc,GAAG;AAAA,EAC/B;AAAA,EAIA,eAAe,KAAK;AAClB,WAAO,KAAK,cAAc,GAAG;AAAA,EAC/B;AAAA,EAIA,WAAW,KAAK;AACd,WAAO,KAAK,cAAc,GAAG;AAAA,EAC/B;AAAA,EAIA,yBAAyB,KAAK;AAC5B,WAAO,KAAK,cAAc,GAAG;AAAA,EAC/B;AAAA,EAIA,UAAU,KAAK;AACb,WAAO,KAAK,cAAc,GAAG;AAAA,EAC/B;AAAA,EAIA,uBAAuB,KAAK;AAC1B,WAAO,KAAK,cAAc,GAAG;AAAA,EAC/B;AAAA,EAIA,qBAAqB,KAAK;AACxB,WAAO,KAAK,cAAc,GAAG;AAAA,EAC/B;AAAA,EAIA,uBAAuB,KAAK;AAC1B,WAAO,KAAK,cAAc,GAAG;AAAA,EAC/B;AAAA,EAIA,kBAAkB,KAAK;AACrB,WAAO,KAAK,cAAc,GAAG;AAAA,EAC/B;AAAA,EAIA,gBAAgB,KAAK;AACnB,WAAO,KAAK,cAAc,GAAG;AAAA,EAC/B;AAAA,EAIA,oBAAoB,KAAK;AACvB,WAAO,KAAK,cAAc,GAAG;AAAA,EAC/B;AAAA,EAIA,sBAAsB,KAAK;AACzB,WAAO,KAAK,cAAc,GAAG;AAAA,EAC/B;AAAA,EAIA,kBAAkB,KAAK;AACrB,WAAO,KAAK,cAAc,GAAG;AAAA,EAC/B;AAAA,EAIA,qBAAqB,KAAK;AACxB,WAAO,KAAK,cAAc,GAAG;AAAA,EAC/B;AAAA,EAIA,yBAAyB,KAAK;AAC5B,WAAO,KAAK,cAAc,GAAG;AAAA,EAC/B;AAAA,EAIA,uCAAuC,KAAK;AAC1C,WAAO,KAAK,cAAc,GAAG;AAAA,EAC/B;AAAA,EAIA,0CAA0C,KAAK;AAC7C,WAAO,KAAK,cAAc,GAAG;AAAA,EAC/B;AAAA,EAIA,uBAAuB,KAAK;AAC1B,WAAO,KAAK,cAAc,GAAG;AAAA,EAC/B;AAAA,EAIA,UAAU,KAAK;AACb,WAAO,KAAK,cAAc,GAAG;AAAA,EAC/B;AAAA,EAIA,qCAAqC,KAAK;AACxC,WAAO,KAAK,cAAc,GAAG;AAAA,EAC/B;AAAA,EAIA,8BAA8B,KAAK;AACjC,WAAO,KAAK,cAAc,GAAG;AAAA,EAC/B;AAAA,EAIA,yBAAyB,KAAK;AAC5B,WAAO,KAAK,cAAc,GAAG;AAAA,EAC/B;AAAA,EAIA,kBAAkB,KAAK;AACrB,WAAO,KAAK,cAAc,GAAG;AAAA,EAC/B;AAAA,EAIA,qBAAqB,KAAK;AACxB,WAAO,KAAK,cAAc,GAAG;AAAA,EAC/B;AAAA,EAIA,mBAAmB,KAAK;AACtB,WAAO,KAAK,cAAc,GAAG;AAAA,EAC/B;AAAA,EAIA,4BAA4B,KAAK;AAC/B,WAAO,KAAK,cAAc,GAAG;AAAA,EAC/B;AAAA,EAIA,mBAAmB,KAAK;AACtB,WAAO,KAAK,cAAc,GAAG;AAAA,EAC/B;AAAA,EAIA,0BAA0B,KAAK;AAC7B,WAAO,KAAK,cAAc,GAAG;AAAA,EAC/B;AAAA,EAIA,2BAA2B,KAAK;AAC9B,WAAO,KAAK,cAAc,GAAG;AAAA,EAC/B;AAAA,EAIA,kBAAkB,KAAK;AACrB,WAAO,KAAK,cAAc,GAAG;AAAA,EAC/B;AAAA,EAIA,gBAAgB,KAAK;AACnB,WAAO,KAAK,cAAc,GAAG;AAAA,EAC/B;AAAA,EAIA,kBAAkB,KAAK;AACrB,WAAO,KAAK,cAAc,GAAG;AAAA,EAC/B;AAAA,EAIA,WAAW,KAAK;AACd,WAAO,KAAK,cAAc,GAAG;AAAA,EAC/B;AAAA,EAIA,UAAU,KAAK;AACb,WAAO,KAAK,cAAc,GAAG;AAAA,EAC/B;AAAA,EAIA,YAAY,KAAK;AACf,WAAO,KAAK,cAAc,GAAG;AAAA,EAC/B;AAAA,EAIA,YAAY,KAAK;AACf,WAAO,KAAK,cAAc,GAAG;AAAA,EAC/B;AAAA,EAIA,UAAU,KAAK;AACb,WAAO,KAAK,cAAc,GAAG;AAAA,EAC/B;AAAA,EAIA,oBAAoB,KAAK;AACvB,WAAO,KAAK,cAAc,GAAG;AAAA,EAC/B;AAAA,EAIA,gBAAgB,KAAK;AACnB,WAAO,KAAK,cAAc,GAAG;AAAA,EAC/B;AAAA,EAIA,cAAc,KAAK;AACjB,WAAO,KAAK,cAAc,GAAG;AAAA,EAC/B;AAID;;;ACzPA,IAAMC,iBAAgB;AAAA,EAAC;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EACtE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EACrE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EACtE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EACtE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EACtE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EACvE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EACvE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EACtE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EACtE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EACtE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EACtE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EACtE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EACtE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EACvE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EACvE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EACrE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EACtE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EACtE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EACtE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EACtE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EACrE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EACtE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EACtE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EACtE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EACtE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EACvE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EACpE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAI;AAAA,EACtE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EACrE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EACtE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EACvE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EACvE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EACvE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EACvE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EACvE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EACvE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EACvE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EACvE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EACtE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EACvE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EACtE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EACtE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EACrE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EACrE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EACtE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EACtE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EACvE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EACvE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EACtE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EACrE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EACvE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EACvE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EACrE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EACrE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EACtE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EACvE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EACvE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EACtE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EACvE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EACrE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EACvE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EACtE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EACtE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EACvE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EACvE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAI;AAAA,EACtE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EACtE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EACrE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EACpE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EACvE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EACrE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EACtE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EACvE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EACtE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EACtE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EACvE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EACtE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EACrE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EACvE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EACrE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EACtE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EACvE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EACrE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EACrE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EACtE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EACvE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EACtE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EACpE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EACvE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EACtE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EACpE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EACpE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EACtE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EACpE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EACtE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EACvE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EACtE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EACtE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EACpE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EACtE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EACvE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EACtE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EACtE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EACvE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EACvE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EACtE;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EACtE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EACtE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EACtE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EACvE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EACtE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EACvE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EACpE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EACvE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EACtE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EACvE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAG;AAAA,EAAG;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EACtE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EACtE;AAAA,EAAI;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAI;AAAA,EAAG;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;AAAA,EAAE;A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",
  "names": ["a", "b", "HASH_KEY_PREFIX", "atn", "payloads", "parents", "atn", "atn", "data1", "data2", "atn", "sharedContextCache", "atn", "sharedContextCache", "atn", "sharedContextCache", "atn", "fs", "import_fs", "fs", "atn", "serializedATN", "atn", "decisionsToDFA", "val", "exp", "index"]
}
