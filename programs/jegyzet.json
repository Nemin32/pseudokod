{
  "1": [
    {
      "name": "1.1. Algoritmus Euklideszi algoritmus",
      "inputs": "m − egész, n − egész",
      "outputs": "n − egész",
      "code": [
        "függvény LNKO(m : egész, n : egész)",
        "r ← m mod n",
        "ciklus amíg r 6 = 0",
        "m ← n",
        "n ← r",
        "r ← m mod n",
        "ciklus vége",
        "vissza n",
        "függvény vége"
      ]
    },

    {
      "name": "1.2. Algoritmus Euklideszi algoritmus (2)",
      "inputs": "m − egész, n − egész",
      "outputs": "n − egész",
      "code": [
        "eljárás LNKO(m : egész, címszerint n : egész)",
        "r ← m mod n",
        "ciklus amíg r 6 = 0",
        "m ← n",
        "n ← r",
        "r ← m mod n",
        "ciklus vége",
        "eljárás vége"
      ]
    },

    {
      "name": "1.3. Algoritmus Relatív prím vizsgálat",
      "inputs": "x − egész tömb, n − egész (tömb mérete), érték − egész",
      "outputs": "y − logikai tömb",
      "code": [
        "függvény RelatívPrímVizsgálat(x : egész tömb, n : egész, érték : egész)",
        "y ← Létrehoz(logikai)[n]",
        "ciklus i ← 1-től n-ig",
        "ha LNKO(x[i], érték) = 1 akkor",
        "y[i] ← igaz",
        "különben",
        "y[i] ← hamis",
        "elágazás vége",
        "ciklus vége",
        "vissza y",
        "függvény vége"
      ]
    },

    {
      "name": "1.4. Algoritmus Nullát eredményező elempárok száma",
      "inputs": "x − egész tömb, n − egész",
      "outputs": "db − egész",
      "code": [
        "függvény NullátAdóElempárokSzáma(x : egész tömb, n : egész)",
        "db ← 0",
        "ciklus i ← 1-től (n − 1)-ig",
        "ciklus j ← (i + 1)-től n-ig",
        "ha x[i] + x[j] = 0 akkor",
        "db ← db + 1",
        "elágazás vége",
        "ciklus vége",
        "ciklus vége",
        "vissza db",
        "függvény vége"
      ]
    }
  ],

  "2": [
    {
      "name": "2.1. Algoritmus Sorozatszámítás programozási tétel",
      "inputs": "x − T tömb, n − egész (tömb mérete)",
      "outputs": "érték − T",
      "code": [
        "függvény Sorozatszámítás(x : T tömb, n : egész)",
        "érték ← érték0",
        "ciklus i ← 1-től n-ig",
        "érték ← érték ⊕ x[i]",
        "ciklus vége",
        "vissza érték",
        "függvény vége"
      ]
    },

    {
      "name": "2.2. Algoritmus Eldöntés programozási tétel",
      "inputs": "x − T tömb, n − egész (tömb mérete), P − logikai (tulajdonság)",
      "outputs": "van − logikai",
      "code": [
        "függvény Eldöntés(x : T tömb, n : egész, P : logikai)",
        "i ← 1",
        "ciklus amíg (i ≤ n) ∧ ¬P (x[i])",
        "i ← i + 1",
        "ciklus vége",
        "van ← (i ≤ n)",
        "vissza van",
        "függvény vége"
      ]
    },

    {
      "name": "2.3. Algoritmus Módosított eldöntés programozási tétel",
      "inputs": "x − T tömb, n − egész (tömb mérete), P − logikai (tulajdonság)",
      "outputs": "van − logikai",
      "code": [
        "függvény Eldöntés_Minden(x : T tömb, n : egész, P : logikai)",
        "i ← 1",
        "ciklus amíg (i ≤ n) ∧ P (x[i])",
        "i ← i + 1",
        "ciklus vége",
        "van ← (i > n)",
        "vissza van",
        "függvény vége"
      ]
    },

    {
      "name": "2.4. Algoritmus Prím teszt",
      "inputs": "N − egész (N ≥ 2)",
      "outputs": "prím − logikai",
      "code": [
        "függvény PrímTeszt(N : egész)",
        "i ← 2",
        "ciklus amíg (i ≤ √N ) ∧ ¬Osztója(i, N )",
        "i ← i + 1",
        "ciklus vége",
        "prím ← (i > √N )",
        "vissza prím",
        "függvény vége"
      ]
    },

    {
      "name": "2.5. Algoritmus Növekvő rendezettség vizsgálata",
      "inputs": "x − T tömb, n − egész; ahol T összehasonlítható",
      "outputs": "rendezett − logikai",
      "code": [
        "függvény Rendezett_E(x : T tömb, n : egész)",
        "i ← 1",
        "ciklus amíg (i ≤ n − 1) ∧ (x[i] ≤ x[i + 1])",
        "i ← i + 1",
        "ciklus vége",
        "rendezett ← (i > n − 1)",
        "vissza rendezett",
        "függvény vége"
      ]
    },

    {
      "name": "2.6. Algoritmus Kiválasztás programozási tétel",
      "inputs": "x − T tömb, n − egész, P − logikai",
      "outputs": "idx − egész",
      "code": [
        "függvény Kiválasztás(x : T tömb, n : egész, P : logikai)",
        "i ← 1",
        "ciklus amíg ¬P (x[i])",
        "i ← i + 1",
        "ciklus vége",
        "idx ← i",
        "vissza idx",
        "függvény vége"
      ]
    },

    {
      "name": "2.7. Algoritmus Lineáris keresés programozási tétel",
      "inputs": "x − T tömb, n − egész, P − logikai",
      "outputs": "van − logikai, idx − egész",
      "code": [
        "függvény LineárisKeresés(x : T tömb, n : egész, P : logikai)",
        "i ← 1",
        "ciklus amíg (i ≤ n) ∧ ¬P (x[i])",
        "i ← i + 1",
        "ciklus vége",
        "van ← (i ≤ n)",
        "ha van akkor",
        "idx ← i",
        "vissza (van, idx)",
        "különben",
        "vissza van",
        "elágazás vége",
        "függvény vége"
      ]
    },

    {
      "name": "2.8. Algoritmus Lineáris keresés programozási tétel (konkrét érték keresése)",
      "inputs": "x − T tömb, n − egész, érték − T",
      "outputs": "van − logikai, idx − egész",
      "code": [
        "függvény LineárisKeresés(x : T tömb, n : egész, érték : T)",
        "i ← 1",
        "ciklus amíg (i ≤ n) ∧ (x[i] 6 = érték)",
        "i ← i + 1",
        "ciklus vége",
        "van ← (i ≤ n)",
        "ha van akkor",
        "idx ← i",
        "vissza (van, idx)",
        "különben",
        "vissza van",
        "elágazás vége",
        "függvény vége"
      ]
    },

    {
      "name": "2.9. Algoritmus Megszámlálás programozási tétel",
      "inputs": "x − T tömb, n − egész (tömb mérete), P − logikai (tulajdonság)",
      "outputs": "db − egész (darabszám)",
      "code": [
        "függvény Megszámlálás(x : T tömb, n : egész, P : logikai)",
        "db ← 0",
        "ciklus i ← 1-től n-ig",
        "ha P (x[i]) akkor",
        "db ← db + 1",
        "elágazás vége",
        "ciklus vége",
        "vissza db",
        "függvény vége"
      ]
    },

    {
      "name": "2.10. Algoritmus Maximumkiválasztás programozási tétel.",
      "inputs": "x − T tömb, n − egész (tömb mérete); ahol T összehasonlítható",
      "outputs": "max − egész",
      "code": [
        "függvény Maximumkiválasztás(x : T tömb, n : egész)",
        "max ← 1",
        "ciklus i ← 2-től n-ig",
        "ha x[i] > x[max] akkor",
        "max ← i",
        "elágazás vége",
        "ciklus vége",
        "vissza max",
        "függvény vége"
      ]
    },

    {
      "name": "2.11. Algoritmus Másolás programozási tétel",
      "inputs": "x − T tömb, n − egész (tömb mérete), f − művelet",
      "outputs": "y − T tömb",
      "code": [
        "függvény Másolás(x : T tömb, n : egész, f : művelet)",
        "y ← Létrehoz(T)[n]",
        "ciklus i ← 1-től n-ig",
        "y[i] ← f (x[i])",
        "ciklus vége",
        "vissza y",
        "függvény vége"
      ]
    },

    {
      "name": "2.12. Algoritmus Kiválogatás programozási tétel",
      "inputs": "x − T tömb, n − egész (tömb mérete), P − logikai",
      "outputs": "y − T tömb, db − egész",
      "code": [
        "függvény Kiválogatás(x : T tömb, n : egész, P : logikai)",
        "y ← Létrehoz(T)[n]",
        "db ← 0",
        "ciklus i ← 1-től n-ig",
        "ha P (x[i]) akkor",
        "db ← db + 1",
        "y[db] ← x[i]",
        "elágazás vége",
        "ciklus vége",
        "vissza (y, db)",
        "függvény vége"
      ]
    },

    {
      "name": "2.13. Algoritmus Kiválogatás programozási tétel az eredeti tömbben",
      "inputs": "x − T tömb, n − egész (tömb mérete), P − logikai",
      "outputs": "x − T tömb, db − egész",
      "code": [
        "függvény KiválogatásHelyben(címszerint x : T tömb, n : egész, P : logikai)",
        "db ← 0",
        "ciklus i ← 1-től n-ig",
        "ha P (x[i]) akkor",
        "db ← db + 1",
        "x[db] ← x[i]",
        "elágazás vége",
        "ciklus vége",
        "vissza db",
        "függvény vége"
      ]
    },

    {
      "name": "2.14. Algoritmus Kiválogatás programozási tétel az eredeti tömbben az eredeti elemek megtartásával",
      "inputs": "x − T tömb, n − egész (tömb mérete), P − logikai",
      "outputs": "x − T tömb, db − egész",
      "code": [
        "függvény Szétválogatás(címszerint x : T tömb, n : egész, P : logikai)",
        "db ← 0",
        "ciklus i ← 1-től n-ig",
        "ha P (x[i]) akkor",
        "db ← db + 1",
        "x[db] ↔ x[i]",
        "elágazás vége",
        "ciklus vége",
        "vissza db",
        "függvény vége"
      ]
    },

    {
      "name": "2.15. Algoritmus Szétválogatás programozási tétel",
      "inputs": "x − T tömb, n − egész (tömb mérete), P − logikai",
      "outputs": "y1 − T tömb, db1 − egész, y2 − T tömb, db2 − egész",
      "code": [
        "függvény Szétválogatás(x : T tömb, n : egész, P : logikai)",
        "y1 ← Létrehoz(T)[n]",
        "y2 ← Létrehoz(T)[n]",
        "db1 ← 0",
        "db2 ← 0",
        "ciklus i ← 1-től n-ig",
        "ha P (x[i]) akkor",
        "db1 ← db1 + 1",
        "y1[db1] ← x[i]",
        "különben",
        "db2 ← db2 + 1",
        "y2[db2] ← x[i]",
        "elágazás vége",
        "ciklus vége",
        "vissza(y1, db1, y2, db2)",
        "függvény vége"
      ]
    },

    {
      "name": "2.16. Algoritmus Szétválogatás programozási tétel egyetlen új kimeneti tömbbe",
      "inputs": "x − T tömb, n − egész (tömb mérete), P − logikai",
      "outputs": "y − T tömb, db − egész",
      "code": [
        "függvény Szétválogatás(x : T tömb, n : egész, P : logikai)",
        "y ← Létrehoz(T)[n]",
        "db ← 0",
        "jobb ← n + 1",
        "ciklus i ← 1-től n-ig",
        "ha P (x[i]) akkor",
        "db ← db + 1",
        "y[db] ← x[i]",
        "különben",
        "jobb ← jobb − 1",
        "y[jobb] ← x[i]",
        "elágazás vége",
        "ciklus vége",
        "vissza(y, db)",
        "függvény vége"
      ]
    },

    {
      "name": "2.17. Algoritmus Szétválogatás programozási tétel az eredeti tömbben",
      "inputs": "x − T tömb, n − egész (tömb mérete), P − logikai",
      "outputs": "x − T tömb, db − egész",
      "code": [
        "függvény Szétválogat(címszerint x : T tömb, n : egész, P : logikai)",
        "bal ← 1",
        "jobb ← n",
        "segéd ← x[1]",
        "ciklus amíg bal < jobb",
        "ciklus amíg (bal < jobb) ∧ ¬P (x[jobb])",
        "jobb ← jobb − 1",
        "ciklus vége",
        "ha bal < jobb akkor",
        "x[bal] ← x[jobb]",
        "bal ← bal + 1",
        "ciklus amíg (bal < jobb) ∧ P (x[bal])",
        "bal ← bal + 1",
        "ciklus vége",
        "ha bal < jobb akkor",
        "x[jobb] ← x[bal]",
        "jobb ← jobb − 1",
        "elágazás vége",
        "elágazás vége",
        "ciklus vége",
        "x[bal] ← segéd",
        "ha P (x[bal]) akkor",
        "db ← bal",
        "különben",
        "db ← bal − 1",
        "elágazás vége",
        "vissza db",
        "függvény vége"
      ]
    },

    {
      "name": "2.18. Algoritmus Metszet programozási tétel",
      "inputs": "x1 − T tömb, n1 − egész (tömb mérete), x2 − T tömb, n2 − egész (tömb mérete)",
      "outputs": "y − T tömb, db − egész",
      "code": [
        "függvény Metszet(x1 : T tömb, n1 : egész, x2 : T tömb, n2 : egész)",
        "y ← Létrehoz(T)[n1]",
        "db ← 0",
        "ciklus i ← 1-től n1-ig",
        "j ← 1",
        "ciklus amíg (j ≤ n2) ∧ (x1[i] 6 = x2[j])",
        "j ← j + 1",
        "ciklus vége",
        "ha j ≤ n2 akkor",
        "db ← db + 1",
        "y[db] ← x1[i]",
        "elágazás vége",
        "ciklus vége",
        "vissza (y, db)",
        "függvény vége"
      ]
    },

    {
      "name": "2.19. Algoritmus Közös elem létezésének vizsgálata",
      "inputs": "x1 − T tömb, n1 − egész (tömb mérete), x2 − T tömb, n2 − egész (tömb mérete)",
      "outputs": "van − logikai",
      "code": [
        "függvény KözösElemEldöntése(x1 : T tömb, n1 : egész, x2 : T tömb, n2 : T tömb)",
        "i ← 1",
        "van ← hamis",
        "ciklus amíg (i ≤ n1) ∧ ¬van",
        "j ← 1",
        "ciklus amíg (j ≤ n2) ∧ (x1[i] 6 = x2[j])",
        "j ← j + 1",
        "ciklus vége",
        "ha j ≤ n2 akkor",
        "van ← igaz",
        "különben",
        "i ← i + 1",
        "elágazás vége",
        "ciklus vége",
        "vissza van",
        "függvény vége"
      ]
    },

    {
      "name": "2.20. Algoritmus Unió programozási tétel",
      "inputs": "x1 − T tömb, n1 − egész (tömb mérete), x2 − T tömb, n2 − egész (tömb mérete)",
      "outputs": "y − T tömb, db − egész",
      "code": [
        "függvény Unió(x1 : T tömb, n1 : egész, x2 : T tömb, n2 : egész)",
        "y ← Létrehoz(T)[n1 + n2]",
        "ciklus i ← 1-től n1-ig",
        "y[i] ← x1[i]",
        "ciklus vége",
        "db ← n1",
        "ciklus j ← 1-től n2-ig",
        "i ← 1",
        "ciklus amíg (i ≤ n1) ∧ (x1[i] 6 = x2[j])",
        "i ← i + 1",
        "ciklus vége",
        "ha i > n1 akkor",
        "db ← db + 1",
        "y[db] ← x2[j]",
        "elágazás vége",
        "ciklus vége",
        "vissza (y, db)",
        "függvény vége"
      ]
    },

    {
      "name": "2.21. Algoritmus Ismétlődések kiszűrése",
      "inputs": "x − T tömb, n − egész (tömb mérete)",
      "outputs": "x − T tömb, db − egész",
      "code": [
        "függvény IsmétlődésekKiszűrése(címszerint x : T tömb, n : egész)",
        "db ← 1",
        "ciklus i ← 2-től n-ig",
        "j ← 1",
        "ciklus amíg (j ≤ db) ∧ (x[i] 6 = x[j])",
        "j ← j + 1",
        "ciklus vége",
        "ha j > db akkor",
        "db ← db + 1",
        "x[db] ← x[i]",
        "elágazás vége",
        "ciklus vége",
        "vissza db",
        "függvény vége"
      ]
    },

    {
      "name": "2.22. Algoritmus Összefuttatás programozási tétel",
      "inputs": "x1 − T rendezett tömb, n1 − egész (tömb mérete), x2 − T rendezett tömb, n2 − Egész (tömb mérete)",
      "outputs": "y − T rendezett tömb, db − egész",
      "code": [
        "függvény Összefuttatás(x1 : T rendezett tömb, n1 : egész, x2 : T rendezett tömb, n2 :",
        "egész)",
        "y ← Létrehoz(T)[n1 + n2]",
        "i ← 1",
        "j ← 1",
        "db ← 0",
        "ciklus amíg (i ≤ n1) ∧ (j ≤ n2)",
        "db ← db + 1",
        "ha x1[i] < x2[j] akkor",
        "y[db] ← x1[i]",
        "i ← i + 1",
        "különben",
        "ha x1[i] > x2[j] akkor",
        "y[db] ← x2[j]",
        "j ← j + 1",
        "különben",
        "y[db] ← x1[i]",
        "i ← i + 1",
        "j ← j + 1",
        "elágazás vége",
        "elágazás vége",
        "ciklus vége",
        "ciklus amíg i ≤ n1",
        "db ← db + 1",
        "y[db] ← x1[i]",
        "i ← i + 1",
        "ciklus vége",
        "ciklus amíg j ≤ n2",
        "db ← db + 1",
        "y[db] ← x2[j]",
        "j ← j + 1",
        "ciklus vége",
        "vissza (y, db)",
        "függvény vége"
      ]
    },

    {
      "name": "2.23. Algoritmus Módosított összefuttatás programozási tétel",
      "inputs": "x1 − T rendezett tömb, n1 − egész (tömb mérete), x2 − T rendezett tömb, n2 − Egész (tömb mérete)",
      "outputs": "y − T rendezett tömb, db − egész",
      "code": [
        "függvény MódosítottÖsszefuttatás(x1 : T rendezett tömb, n1 : egész, x2 : T rendezett",
        "tömb, n2 : egész)",
        "y ← Létrehoz(T)[n1 + n2]",
        "n1 ← n1 + 1",
        "x1[n1] ← +∞",
        "n2 ← n2 + 1",
        "x2[n2] ← +∞",
        "i ← 1",
        "j ← 1",
        "db ← 0",
        "ciklus amíg (i < n1) ∨ (j < n2)",
        "db ← db + 1",
        "ha x1[i] < x2[j] akkor",
        "y[db] ← x1[i]",
        "i ← i + 1",
        "különben ha x1[i] > x2[j] akkor",
        "y[db] ← x2[j]",
        "j ← j + 1",
        "különben",
        "y[db] ← x1[i]",
        "i ← i + 1",
        "j ← j + 1",
        "elágazás vége",
        "ciklus vége",
        "vissza (y, db)",
        "függvény vége"
      ]
    },

    {
      "name": "2.24. Algoritmus Másolás és sorozatszámítás összeépítése",
      "inputs": "x − T tömb, n − egész (tömb mérete), f − művelet",
      "outputs": "érték − T",
      "code": [
        "függvény Másolás_Sorozatszámítás(x : T tömb, n : egész, f : művelet)",
        "érték ← érték0",
        "ciklus i ← 1-től n-ig",
        "érték ← érték ⊕ f (x[i])",
        "ciklus vége",
        "vissza érték",
        "függvény vége"
      ]
    },

    {
      "name": "2.25. Algoritmus Másolás és maximumkiválasztás összeépítése",
      "inputs": "x − T tömb, n − egész (tömb mérete), f − művelet; ahol T összehasonlítható",
      "outputs": "max − egész, maxérték − T",
      "code": [
        "függvény Másolás_Maximumkiválasztás(x : T tömb, n : egész, f : művelet)",
        "max ← 1",
        "maxérték ← f (x[1])",
        "ciklus i ← 2-től n-ig",
        "segéd ← f (x[i])",
        "ha maxérték < segéd akkor",
        "max ← i",
        "maxérték ← segéd",
        "elágazás vége",
        "ciklus vége",
        "vissza (max, maxérték)",
        "függvény vége"
      ]
    },

    {
      "name": "2.26. Algoritmus Másolás és maximumkiválasztás összeépítése (módosított, kevésbé hatékony változat)",
      "inputs": "x − T tömb, n − egész (tömb mérete), f − művelet; ahol T összehasonlítható",
      "outputs": "max − egész",
      "code": [
        "függvény Másolás_Maximumkiválasztás_Módosított(x : T tömb, n : egész, f : művelet)",
        "max ← 1",
        "ciklus i ← 2-től n-ig",
        "ha f (x[max]) < f (x[i]) akkor",
        "max ← i",
        "elágazás vége",
        "ciklus vége",
        "vissza max",
        "függvény vége"
      ]
    },

    {
      "name": "2.27. Algoritmus Megszámolás és keresés összeépítése",
      "inputs": "x − T tömb, n − egész (tömb mérete), P − logikai, k − egész",
      "outputs": "van − logikai, idx − egész",
      "code": [
        "függvény Megszámolás_Keresés(x : T tömb, n : egész, P : logikai, k : egész)",
        "db ← 0",
        "i ← 0",
        "ciklus amíg (i < n) ∧ (db < k)",
        "i ← i + 1",
        "ha P (x[i]) akkor",
        "db ← db + 1",
        "elágazás vége",
        "ciklus vége",
        "van ← (db = k)",
        "ha van akkor",
        "idx ← i",
        "vissza (van, idx)",
        "különben",
        "vissza van",
        "elágazás vége",
        "függvény vége"
      ]
    },

    {
      "name": "2.28. Algoritmus Maximumkiválasztás és kiválogatás összeépítése",
      "inputs": "x − T tömb, n − egész (tömb mérete); ahol T összehasonlítható",
      "outputs": "db − egész, y − egész tömb, maxérték − T",
      "code": [
        "függvény Maximumkiválogatás(x : T tömb, n : egész)",
        "y ← Létrehoz(egész)[n]",
        "maxérték ← x[1]",
        "db ← 1",
        "y[db] ← 1",
        "ciklus i ← 2-től n-ig",
        "ha x[i] > maxérték akkor",
        "maxérték ← x[i]",
        "db ← 1",
        "y[db] ← i",
        "különben",
        "ha x[i] = maxérték akkor",
        "db ← db + 1",
        "y[db] ← i",
        "elágazás vége",
        "elágazás vége",
        "ciklus vége",
        "vissza (db, y, maxérték)",
        "függvény vége"
      ]
    },

    {
      "name": "2.29. Algoritmus Kiválogatás és sorozatszámítás összeépítése",
      "inputs": "x − T tömb, n − egész (tömb mérete), P − logikai",
      "outputs": "érték − T",
      "code": [
        "függvény Kiválogatás_Sorozatszámítás(x : T tömb, n : egész, P : logikai)",
        "érték ← érték0",
        "ciklus i ← 1-től n-ig",
        "ha P (x[i]) akkor",
        "érték ← érték ⊕ x[i]",
        "elágazás vége",
        "ciklus vége",
        "vissza érték",
        "függvény vége"
      ]
    },

    {
      "name": "2.30. Algoritmus Kiválogatás és maximumkiválasztás összeépítése",
      "inputs": "x − T tömb, n − egész (tömb mérete), P − logikai; ahol T összehasonlítható",
      "outputs": "van − logikai, max − egész, maxérték − T",
      "code": [
        "függvény Kiválogatás_Maximumkiválasztás(x : T tömb, n : egész, P : logikai)",
        "maxérték ← −∞",
        "ciklus i ← 1-től n-ig",
        "ha P (x[i]) ∧ (x[i] > maxérték) akkor",
        "max ← i",
        "maxérték ← x[i]",
        "elágazás vége",
        "ciklus vége",
        "van ← (maxérték > −∞)",
        "ha van akkor",
        "vissza (van, max, maxérték)",
        "különben",
        "vissza van",
        "elágazás vége",
        "függvény vége"
      ]
    },

    {
      "name": "2.31. Algoritmus Kiválogatás és másolás összeépítése",
      "inputs": "x − T tömb, n − egész (tömb mérete), P − logikai, f − művelet",
      "outputs": "db − egész, y − T tömb",
      "code": [
        "függvény Kiválogatás_Másolás(x : T tömb, n : egész, P : logikai, f : művelet)",
        "y ← Létrehoz(T)[n]",
        "db ← 0",
        "ciklus i ← 1-től n-ig",
        "ha P (x[i]) akkor",
        "db ← db + 1",
        "y[db] ← f (x[i])",
        "elágazás vége",
        "ciklus vége",
        "vissza (db, y)",
        "függvény vége"
      ]
    }
  ],
  "3": [
    {
      "name": "3.1. Algoritmus Csere",
      "inputs": "a − T, b − T",
      "outputs": "a − T, b − T",
      "code": [
        "eljárás Csere(címszerint a : T, címszerint b : T)",
        "segéd ← a",
        "a ← b",
        "b ← segéd",
        "eljárás vége"
      ]
    },

    {
      "name": "3.2. Algoritmus Egyszerű cserés rendezés",
      "inputs": "x − T tömb, n − egész (tömb mérete); ahol T összehasonlítható",
      "outputs": "x − T rendezett tömb",
      "code": [
        "eljárás EgyszerűCserésRendezés(címszerint x : T tömb, n : egész)",
        "ciklus i ← 1-től (n − 1)-ig",
        "ciklus j ← (i + 1)-től n-ig",
        "ha x[i] > x[j] akkor",
        "x[i] ↔ x[j]",
        "elágazás vége",
        "ciklus vége",
        "ciklus vége",
        "eljárás vége"
      ]
    },

    {
      "name": "3.3. Algoritmus Minimumkiválasztásos rendezés",
      "inputs": "x − T tömb, n − egész (tömb mérete); ahol T összehasonlítható",
      "outputs": "x − T rendezett tömb",
      "code": [
        "eljárás MinimumkiválasztásosRendezés(címszerint x : T tömb, n : egész)",
        "ciklus i ← 1-től (n − 1)-ig",
        "min ← i",
        "ciklus j ← (i + 1)-től n-ig",
        "ha x[min] > x[j] akkor",
        "min ← j",
        "elágazás vége",
        "ciklus vége",
        "x[i] ↔ x[min]",
        "ciklus vége",
        "eljárás vége"
      ]
    },

    {
      "name": "3.4. Algoritmus Buborékrendezés",
      "inputs": "x − T tömb, n − egész (tömb mérete); ahol T összehasonlítható",
      "outputs": "x − T rendezett tömb",
      "code": [
        "eljárás BuborékRendezés(címszerint x : T tömb, n : egész)",
        "ciklus i ← n-től 2-ig",
        "ciklus j ← 1-től (i − 1)-ig",
        "ha x[j] > x[j + 1] akkor",
        "x[j] ↔ x[j + 1]",
        "elágazás vége",
        "ciklus vége",
        "ciklus vége",
        "eljárás vége"
      ]
    },

    {
      "name": "3.5. Algoritmus Javított buborékrendezés",
      "inputs": "x − T tömb, n − egész (tömb mérete); ahol T összehasonlítható",
      "outputs": "x − T rendezett tömb",
      "code": [
        "eljárás JavítottBuborékRendezés(címszerint x : T tömb, n : egész)",
        "i ← n",
        "ciklus amíg i ≥ 2",
        "idx ← 0",
        "ciklus j ← 1-től (i − 1)-ig",
        "ha x[j] > x[j + 1] akkor",
        "x[j] ↔ x[j + 1]",
        "idx ← j",
        "elágazás vége",
        "ciklus vége",
        "i ← idx",
        "ciklus vége",
        "eljárás vége"
      ]
    },

    {
      "name": "3.6. Algoritmus Beillesztéses rendezés",
      "inputs": "x − T tömb, n − egész (tömb mérete); ahol T összehasonlítható",
      "outputs": "x − T rendezett tömb",
      "code": [
        "eljárás BeillesztésesRendezés(címszerint x : T tömb, n : egész)",
        "ciklus i ← 2-től n-ig",
        "j ← i − 1",
        "ciklus amíg (j > 0) ∧ (x[j] > x[j + 1])",
        "x[j] ↔ x[j + 1]",
        "j ← j − 1",
        "ciklus vége",
        "ciklus vége",
        "eljárás vége"
      ]
    },

    {
      "name": "3.7. Algoritmus Javított beillesztéses rendezés",
      "inputs": "x − T tömb, n − egész (tömb mérete); ahol T összehasonlítható",
      "outputs": "x − T rendezett tömb",
      "code": [
        "eljárás JavítottBeillesztésesRendezés(címszerint x : T tömb, n : egész)",
        "ciklus i ← 2-től n-ig",
        "j ← i − 1",
        "segéd ← x[i]",
        "ciklus amíg (j > 0) ∧ (x[j] > segéd)",
        "x[j + 1] ← x[j]",
        "j ← j − 1",
        "ciklus vége",
        "x[j + 1] ← segéd",
        "ciklus vége",
        "eljárás vége"
      ]
    },

    {
      "name": "3.8. Algoritmus Shell rendezés",
      "inputs": "x − T tömb, n − egész (tömb mérete); ahol T összehasonlítható",
      "outputs": "x − T rendezett tömb",
      "code": [
        "eljárás ShellRendezés(címszerint x : T tömb, n : egész)",
        "d ← KezdetiTávolság(n)",
        "ciklus amíg d ≥ 1",
        "ciklus i ← (d + 1)-től n-ig",
        "j ← i − d",
        "segéd ← x[i]",
        "ciklus amíg (j > 0) ∧ (x[j] > segéd)",
        "x[j + d] ← x[j]",
        "j ← j − d",
        "ciklus vége",
        "x[j + d] ← segéd",
        "ciklus vége",
        "d ← KövetkezőTávolság(d)",
        "ciklus vége",
        "eljárás vége"
      ]
    },

    {
      "name": "3.9. Algoritmus Szétosztó rendezés",
      "inputs": "x − T tömb, n − egész (tömb mérete); ahol T kulccsal rendelkezik",
      "outputs": "y − T rendezett tömb",
      "code": [
        "függvény SzétosztóRendezés(x : T tömb, n : egész)",
        "y ← Létrehoz(T)[n]",
        "ciklus i ← 1-től n-ig",
        "y [x[i].kulcs] ← x[i]",
        "ciklus vége",
        "vissza y",
        "függvény vége"
      ]
    },

    {
      "name": "3.10. Algoritmus Számlálva szétosztó rendezés",
      "inputs": "x − T tömb, n − egész (tömb mérete), m − egész; ahol T kulccsal rendelkezik",
      "outputs": "y − T rendezett tömb",
      "code": [
        "függvény SzámlálvaSzétosztóRendezés(x : T tömb, n : egész, m : egész)",
        "db ← Létrehoz(egész)[m]",
        "ciklus i ← 1-től m-ig",
        "db[i] ← 0",
        "ciklus vége",
        "ciklus i ← 1-től n-ig",
        "db [x[i].kulcs] ← db [x[i].kulcs] + 1",
        "ciklus vége",
        "ciklus i ← 2-től m-ig",
        "db[i] ← db[i] + db[i − 1]",
        "ciklus vége",
        "y ← Létrehoz(T)[n]",
        "ciklus i ← 1-től n-ig",
        "y [db [x[i].kulcs]] ← x[i]",
        "db [x[i].kulcs] ← db [x[i].kulcs] − 1",
        "ciklus vége",
        "vissza y",
        "függvény vége"
      ]
    },

    {
      "name": "3.11. Algoritmus Számláló rendezés",
      "inputs": "x − T tömb, n − egész (tömb mérete); ahol T összehasonlítható",
      "outputs": "y − T rendezett tömb",
      "code": [
        "függvény SzámlálóRendezés(x : T tömb, n : egész)",
        "db ← Létrehoz(egész)[n]",
        "ciklus i ← 1-től n-ig",
        "db[i] ← 1",
        "ciklus vége",
        "ciklus i ← 1-től n − 1-ig",
        "ciklus j ← i + 1-től n-ig",
        "ha x[i] > x[j] akkor",
        "db[i] ← db[i] + 1",
        "különben",
        "db[j] ← db[j] + 1",
        "elágazás vége",
        "ciklus vége",
        "ciklus vége",
        "y ← Létrehoz(T)[n]",
        "ciklus i ← 1-től n-ig",
        "y [db[i]] ← x[i]",
        "ciklus vége",
        "vissza y",
        "függvény vége"
      ]
    }
  ],
  "4": [
    {
      "name": "4.1. Algoritmus Faktoriális iteratív kiszámítása",
      "inputs": "N − egész (természetes szám)",
      "outputs": "érték − egész",
      "code": [
        "függvény FaktoriálisIteratív(N : egész)",
        "érték ← 1",
        "ciklus i ← 2-től N -ig",
        "érték ← érték · i",
        "ciklus vége",
        "vissza érték",
        "függvény vége"
      ]
    },

    {
      "name": "4.2. Algoritmus Faktoriális rekurzív kiszámítása",
      "inputs": "N − egész (természetes szám)",
      "outputs": "N faktoriálisa",
      "code": [
        "függvény FaktoriálisRekurzív(N : egész)",
        "ha N = 0 akkor",
        "vissza 1",
        "különben",
        "vissza N · FaktoriálisRekurzív(N − 1)",
        "elágazás vége",
        "függvény vége"
      ]
    },

    {
      "name": "4.3. Algoritmus Fibonacci sorozat N -edik elemének rekurzív meghatározása",
      "inputs": "N − egész",
      "outputs": "N -edik Fibonacci szám",
      "code": [
        "függvény FibonacciRekurzív(N : egész)",
        "ha N ≤ 1 akkor",
        "vissza 1",
        "különben",
        "vissza FibonacciRekurzív(N − 2) + FibonacciRekurzív(N − 1)",
        "elágazás vége",
        "függvény vége"
      ]
    },

    {
      "name": "4.4. Algoritmus Fibonacci sorozat N -edik elemének iteratív meghatározása",
      "inputs": "N − egész",
      "outputs": "aktuális − egész",
      "code": [
        "függvény FibonacciIteratív(N : egész)",
        "aktuális ← 1",
        "előző ← 1",
        "ciklus i ← 1-től (N − 1)-ig",
        "átmeneti ← aktuális + előző",
        "előző ← aktuális",
        "aktuális ← átmeneti",
        "ciklus vége",
        "vissza aktuális",
        "függvény vége"
      ]
    },

    {
      "name": "4.5. Algoritmus Az első N darab Fibonacci szám megadása",
      "inputs": "N − egész",
      "outputs": "x − egész tömb",
      "code": [
        "függvény FibonacciKigyűjt(N : egész)",
        "x ← Létrehoz(egész)[N ]",
        "x[1] ← 1",
        "x[2] ← 2",
        "ciklus i ← 3-től N -ig",
        "x[i] ← x[i − 2] + x[i − 1]",
        "ciklus vége",
        "vissza x",
        "függvény vége"
      ]
    },

    {
      "name": "4.6. Algoritmus aN iteratív meghatározása",
      "inputs": "a − szám, N − egész",
      "outputs": "érték − szám",
      "code": [
        "függvény HatványIteratív(a : szám, N : egész)",
        "érték ← a",
        "ciklus i ← 2-től N -ig",
        "érték ← érték · a",
        "ciklus vége",
        "vissza érték",
        "függvény vége"
      ]
    },

    {
      "name": "4.7. Algoritmus aN rekurzív meghatározása",
      "inputs": "a − szám, N − egész",
      "outputs": "aN értéke",
      "code": [
        "függvény HatványRekurzív(a : szám, N : egész)",
        "ha N = 1 akkor",
        "vissza a",
        "különben",
        "vissza a · HatványRekurzív(a, N − 1)",
        "elágazás vége",
        "függvény vége"
      ]
    },

    {
      "name": "4.8. Algoritmus aN felezéses elvű rekurzív meghatározása",
      "inputs": "a − szám, N − egész",
      "outputs": "aN értéke",
      "code": [
        "függvény HatványFelező(a : szám, N : egész)",
        "ha N = 1 akkor",
        "vissza a",
        "különben",
        "ha N páros akkor",
        "segéd ← HatványFelező (a, N",
        "2",
        ")",
        "vissza segéd · segéd",
        "különben",
        "segéd ← HatványFelező (a, N −1",
        "2",
        ")",
        "vissza a · segéd · segéd",
        "elágazás vége",
        "elágazás vége",
        "függvény vége"
      ]
    },

    {
      "name": "4.9. Algoritmus Hanoi tornyai",
      "inputs": "N − egész, forrás − rúd, cél − rúd, segéd − rúd",
      "outputs": "",
      "code": [
        "eljárás Hanoi(N : egész, forrás : rúd, cél : rúd, segéd : rúd)",
        "ha N = 1 akkor",
        "Mozgat(1, forrás, cél)",
        "különben",
        "Hanoi(N − 1, forrás, segéd, cél)",
        "Mozgat(N, forrás, cél)",
        "Hanoi(N − 1, segéd, cél, forrás)",
        "elágazás vége",
        "eljárás vége"
      ]
    },

    {
      "name": "4.10. Algoritmus Sorozatszámítás programozási tétel rekurzív megvalósítása",
      "inputs": "x − T tömb, jobb − egész",
      "outputs": "A vizsgált résztömb elemeire nézve a ⊕ művelet eredménye.",
      "code": [
        "függvény SorozatszámításRekurzív(x : T tömb, jobb : egész)",
        "ha jobb = 0 akkor",
        "vissza érték0",
        "különben",
        "vissza SorozatszámításRekurzív(x, jobb − 1) ⊕ x[jobb]",
        "elágazás vége",
        "függvény vége"
      ]
    },

    {
      "name": "4.11. Algoritmus Lineáris keresés programozási tétel rekurzív megvalósítása",
      "inputs": "x − T tömb, bal − egész, n − egész (tömb mérete), P − logikai (tulajdonság)",
      "outputs": "Az első P tulajdonságú elem indexe, illetve ha nincs P tulajdonságú elem, akkor 0.",
      "code": [
        "függvény LineárisKeresésRekurzív(x : T tömb, bal : egész, n : egész, P : logikai)",
        "ha bal > n akkor",
        "vissza 0",
        "különben",
        "ha P (x[bal]) akkor",
        "vissza bal",
        "különben",
        "vissza LineárisKeresésRekurzív(x, bal + 1, n, P )",
        "elágazás vége",
        "elágazás vége",
        "függvény vége"
      ]
    },

    {
      "name": "4.12. Algoritmus Megszámlálás programozási tétel rekurzív megvalósítása",
      "inputs": "x − T tömb, jobb − egész, P − logikai (tulajdonság)",
      "outputs": "A vizsgált résztömbben az P tulajdonságú elemek száma.",
      "code": [
        "függvény MegszámlálásRekurzív(x : T tömb, jobb : egész, P : logikai)",
        "ha jobb = 0 akkor",
        "vissza 0",
        "különben",
        "ha P (x[jobb]) akkor",
        "vissza 1 + MegszámlálásRekurzív(x, jobb − 1, P )",
        "különben",
        "vissza MegszámlálásRekurzív(x, jobb − 1, P )",
        "elágazás vége",
        "elágazás vége",
        "függvény vége"
      ]
    },

    {
      "name": "4.13. Algoritmus Maximumkiválasztás programozási tétel rekurzív megvalósítása",
      "inputs": "x − T tömb, jobb − egész; ahol T összehasonlítható",
      "outputs": "A vizsgált résztömbben a maximális értékű elem indexe.",
      "code": [
        "függvény MaximumkiválasztásRekurzív(x : T tömb, jobb : egész)",
        "ha jobb = 1 akkor",
        "vissza 1",
        "különben",
        "max ← MaximumkiválasztásRekurzív(x, jobb − 1)",
        "ha x[jobb] > x[max] akkor",
        "vissza jobb",
        "különben",
        "vissza max",
        "elágazás vége",
        "elágazás vége",
        "függvény vége"
      ]
    }
  ],
  "5": [
    {
      "name": "5.1. Algoritmus Lineáris keresés rendezett tömbben",
      "inputs": "x − T rendezett tömb, n − egész (tömb mérete), érték − T; ahol T összehasonlítható",
      "outputs": "van − logikai, idx − egész",
      "code": [
        "függvény LineárisKeresésRendezettben(x : T rendezett tömb, n : egész, érték : T)",
        "i ← 1",
        "ciklus amíg (i ≤ n) ∧ (x[i] < érték)",
        "i ← i + 1",
        "ciklus vége",
        "van ← (i ≤ n) ∧ (x[i] = érték)",
        "ha van akkor",
        "idx ← i",
        "vissza (van, idx)",
        "különben",
        "vissza van",
        "elágazás vége",
        "függvény vége"
      ]
    },

    {
      "name": "5.2. Algoritmus Logaritmikus keresés iteratív megvalósítása",
      "inputs": "x − T rendezett tömb, n − egész, érték − T; ahol T összehasonlítható",
      "outputs": "van − logikai, idx − egész",
      "code": [
        "függvény LogaritmikusKeresés(x : T rendezett tömb, n : egész, érték : T)",
        "bal ← 1",
        "jobb ← n",
        "center ←",
        "⌊ bal+jobb",
        "2",
        "⌋",
        "ciklus amíg (bal ≤ jobb) ∧ (x[center] 6 = érték)",
        "ha x[center] > érték akkor",
        "jobb ← center − 1",
        "különben",
        "bal ← center + 1",
        "elágazás vége",
        "center ←",
        "⌊ bal+jobb",
        "2",
        "⌋",
        "ciklus vége",
        "van ← (bal ≤ jobb)",
        "ha van akkor",
        "idx ← center",
        "vissza (van, idx)",
        "különben",
        "vissza van",
        "elágazás vége",
        "függvény vége"
      ]
    },

    {
      "name": "5.3. Algoritmus Logaritmikus keresés rekurzív megvalósítása",
      "inputs": "x − T rendezett tömb, bal − egész, jobb − egész, érték − T; ahol T összehasonlítható",
      "outputs": "Az érték-kel megegyező elem indexe, illetve ha nincs ilyen, akkor 0.",
      "code": [
        "függvény LogaritmikusKeresésRekurzív(x : T rendezett tömb, bal : egész, jobb :",
        "egész, érték : T)",
        "ha bal > jobb akkor",
        "vissza 0",
        "különben",
        "center ←",
        "⌊ bal+jobb",
        "2",
        "⌋",
        "ha x[center] = érték akkor",
        "vissza center",
        "különben",
        "ha x[center] > érték akkor",
        "vissza LogaritmikusKeresésRekurzív(x, bal, center − 1, érték)",
        "különben",
        "vissza LogaritmikusKeresésRekurzív(x, center + 1, jobb, érték)",
        "elágazás vége",
        "elágazás vége",
        "elágazás vége",
        "függvény vége"
      ]
    },

    {
      "name": "5.4. Algoritmus Eldöntés programozási tétel rendezett tömbben",
      "inputs": "x − T rendezett tömb, n − egész (tömb mérete), érték − T; ahol T összehasonlítható",
      "outputs": "van − logikai",
      "code": [
        "függvény EldöntésRendezettben(x : T rendezett tömb, n : egész, érték : T)",
        "bal ← 1",
        "jobb ← n",
        "center ←",
        "⌊ bal+jobb",
        "2",
        "⌋",
        "ciklus amíg (bal ≤ jobb) ∧ (x[center] 6 = érték)",
        "ha x[center] > érték akkor",
        "jobb ← center − 1",
        "különben",
        "bal ← center + 1",
        "elágazás vége",
        "center ←",
        "⌊ bal+jobb",
        "2",
        "⌋",
        "ciklus vége",
        "van ← (bal ≤ jobb)",
        "vissza van",
        "függvény vége"
      ]
    },

    {
      "name": "5.5. Algoritmus Módosított eldöntés programozási tétel rendezett tömbben",
      "inputs": "x − T rendezett tömb, n − egész (tömb mérete), alsóhatár − T, felsőhatár − T; ahol T összehasonlítható",
      "outputs": "van − logikai",
      "code": [
        "függvény MódosítottEldöntésRendezettben(x : T rendezett tömb, n : egész, alsóhatár :",
        "T, felsőhatár : T)",
        "bal ← 1",
        "jobb ← n",
        "center ←",
        "⌊ bal+jobb",
        "2",
        "⌋",
        "ciklus amíg (bal ≤ jobb) ∧ ¬ ((alsóhatár ≤ x[center]) ∧ (x[center] ≤ f elsőhatár))",
        "ha x[center] > f elsőhatár akkor",
        "jobb ← center − 1",
        "különben",
        "bal ← center + 1",
        "elágazás vége",
        "center ←",
        "⌊ bal+jobb",
        "2",
        "⌋",
        "ciklus vége",
        "van ← (bal ≤ jobb)",
        "vissza van",
        "függvény vége"
      ]
    },

    {
      "name": "5.6. Algoritmus Kiválasztás programozási tétel rendezettben",
      "inputs": "x − T rendezett tömb, n − egész, érték − T; ahol T összehasonlítható",
      "outputs": "idx − egész",
      "code": [
        "függvény KiválasztásRendezettben(x : T rendezett tömb, n : egész, érték : T)",
        "bal ← 1",
        "jobb ← n",
        "center ←",
        "⌊ bal+jobb",
        "2",
        "⌋",
        "ciklus amíg x[center] 6 = érték",
        "ha x[center] > érték akkor",
        "jobb ← center − 1",
        "különben",
        "bal ← center + 1",
        "elágazás vége",
        "center ←",
        "⌊ bal+jobb",
        "2",
        "⌋",
        "ciklus vége",
        "idx ← center",
        "vissza idx",
        "függvény vége"
      ]
    },

    {
      "name": "5.7. Algoritmus Kiválogatás programozási tétel rendezett tömbben",
      "inputs": "x − T rendezett tömb, n − egész, érték − T; ahol T összehasonlítható",
      "outputs": "van − logikai, bal − egész, jobb − egész",
      "code": [
        "függvény KiválogatásRendezettben(x : T rendezett tömb, n : egész, érték : T)",
        "bal ← 1",
        "jobb ← n",
        "center ←",
        "⌊ bal+jobb",
        "2",
        "⌋",
        "ciklus amíg (bal ≤ jobb) ∧ (x[center] 6 = érték)",
        "ha x[center] > érték akkor",
        "jobb ← center − 1",
        "különben",
        "bal ← center + 1",
        "elágazás vége",
        "center ←",
        "⌊ bal+jobb",
        "2",
        "⌋",
        "ciklus vége",
        "van ← (bal ≤ jobb)",
        "ha van akkor",
        "bal ← center",
        "ciklus amíg (bal > 1) ∧ (x[bal − 1] = érték)",
        "bal ← bal − 1",
        "ciklus vége",
        "jobb ← center",
        "ciklus amíg (jobb < n) ∧ (x[jobb + 1] = érték)",
        "jobb ← jobb + 1",
        "ciklus vége",
        "vissza (van, bal, jobb)",
        "különben",
        "vissza van",
        "elágazás vége",
        "függvény vége"
      ]
    },

    {
      "name": ".8. Algoritmus Módosított kiválogatás programozási tétel rendezett tömbben",
      "inputs": "x−T rendezett tömb, n−egész, alsóhatár−T, f elsőhatár−T; ahol T összehasonlítható",
      "outputs": "van − logikai, bal − egész, jobb − egész",
      "code": [
        "függvény MódosítottKiválogatásRendezettben(x : T rendezett tömb, n : egész, alsóhatár",
        ": T, felsőhatár : T)",
        "bal ← 1",
        "jobb ← n",
        "center ←",
        "⌊ bal+jobb",
        "2",
        "⌋",
        "ciklus amíg (bal ≤ jobb) ∧ ¬ ((alsóhatár ≤ x[center]) ∧ (x[center] ≤ f elsőhatár))",
        "ha x[center] > f elsőhatár akkor",
        "jobb ← center − 1",
        "különben",
        "bal ← center + 1",
        "elágazás vége",
        "center ←",
        "⌊ bal+jobb",
        "2",
        "⌋",
        "ciklus vége",
        "van ← (bal ≤ jobb)",
        "ha van akkor",
        "bal ← center",
        "ciklus amíg (bal > 1) ∧ (x[bal − 1] ≥ alsóhatár)",
        "bal ← bal − 1",
        "ciklus vége",
        "jobb ← center",
        "ciklus amíg (jobb < n) ∧ (x[jobb + 1] ≤ f elsőhatár)",
        "jobb ← jobb + 1",
        "ciklus vége",
        "vissza (van, bal, jobb)",
        "különben",
        "vissza van",
        "elágazás vége",
        "függvény vége"
      ]
    },

    {
      "name": "5.9. Algoritmus Megszámlálás programozási tétel rendezett tömbben",
      "inputs": "x − T rendezett tömb, n − egész, érték − T; ahol T összehasonlítható",
      "outputs": "db − egész",
      "code": [
        "függvény MegszámlálásRendezettben(x : T rendezett tömb, n : egész, érték : T)",
        "bal ← 1",
        "jobb ← n",
        "center ←",
        "⌊ bal+jobb",
        "2",
        "⌋",
        "ciklus amíg (bal ≤ jobb) ∧ (x[center] 6 = érték)",
        "ha x[center] > érték akkor",
        "jobb ← center − 1",
        "különben",
        "bal ← center + 1",
        "elágazás vége",
        "center ←",
        "⌊ bal+jobb",
        "2",
        "⌋",
        "ciklus vége",
        "ha bal ≤ jobb akkor",
        "bal ← center",
        "ciklus amíg (bal > 1) ∧ (x[bal − 1] = érték)",
        "bal ← bal − 1",
        "ciklus vége",
        "jobb ← center",
        "ciklus amíg (jobb < n) ∧ (x[jobb + 1] = érték)",
        "jobb ← jobb + 1",
        "ciklus vége",
        "db ← jobb − bal + 1",
        "különben",
        "db ← 0",
        "elágazás vége",
        "vissza db",
        "függvény vége"
      ]
    },

    {
      "name": "5.10. Algoritmus Halmaztulajdonság vizsgálata",
      "inputs": "x − T rendezett tömb, n − egész (tömb mérete); ahol T összehasonlítható",
      "outputs": "l − logikai",
      "code": [
        "függvény HalmazE(x : T rendezett tömb, n : egész)",
        "i ← 2",
        "ciklus amíg (i ≤ n) ∧ (x[i] 6 = x[i − 1])",
        "i ← i + 1",
        "ciklus vége",
        "l ← (i > n)",
        "vissza l",
        "függvény vég"
      ]
    },

    {
      "name": "5.11. Algoritmus Halmaz létrehozása",
      "inputs": "x − T rendezett tömb, n − egész (tömb mérete); ahol T összehasonlítható",
      "outputs": "a − T halmaz, db − egész",
      "code": [
        "függvény HalmazLétrehozás(x : T rendezett tömb, n : egész)",
        "a ← Létrehoz(T)[n]",
        "db ← 1",
        "a[db] ← x[1]",
        "ciklus i ← 2-től n-ig",
        "ha x[i] 6 = a[db] akkor",
        "db ← db + 1",
        "a[db] ← x[i]",
        "elágazás vége",
        "ciklus vége",
        "vissza (a, db)",
        "függvény vége"
      ]
    },

    {
      "name": "5.12. Algoritmus Tartalmazás vizsgálat",
      "inputs": "a − T halmaz, n − egész (halmaz mérete), érték − T; ahol T összehasonlítható",
      "outputs": "l − logikai",
      "code": [
        "függvény TartalmazzaE(a : T halmaz, n : egész, érték : T)",
        "bal ← 1",
        "jobb ← n",
        "center ←",
        "⌊ bal+jobb",
        "2",
        "⌋",
        "ciklus amíg (bal ≤ jobb) ∧ (a[center] 6 = érték)",
        "ha a[center] > érték akkor",
        "jobb ← center − 1",
        "különben",
        "bal ← center + 1",
        "elágazás vége",
        "center ←",
        "⌊ bal+jobb",
        "2",
        "⌋",
        "ciklus vége",
        "l ← (bal ≤ jobb)",
        "vissza l",
        "függvény vége"
      ]
    },

    {
      "name": "5.13. Algoritmus Részhalmaz vizsgálat",
      "inputs": "a − T halmaz, m − egész (a mérete), b − T halmaz, n − T halmaz (b mérete)",
      "outputs": "l − logikai",
      "code": [
        "függvény Részhalmaz_e(a : T halmaz, m : egész, b : T halmaz, n : egész)",
        "i ← 1",
        "j ← 1",
        "ciklus amíg (i ≤ m) ∧ (j ≤ n) ∧ (a[i] ≥ b[j])",
        "ha a[i] = b[j] akkor",
        "i ← i + 1",
        "elágazás vége",
        "j ← j + 1",
        "ciklus vége",
        "l ← (i > m)",
        "vissza l",
        "függvény vége"
      ]
    },

    {
      "name": "5.14. Algoritmus Halmazok uniója",
      "inputs": "a1 − T halmaz, n1 − egész (halmaz mérete), a2 − T halmaz, n2 − egész (halmaz mérete)",
      "outputs": "b − T halmaz, db − egész",
      "code": [
        "függvény HalmazUnió(a1 : T halmaz, n1 : egész, a2 : T halmaz, n2 : egész)",
        "b ← Létrehoz(T)[n1 + n2]",
        "i ← 1",
        "j ← 1",
        "db ← 0",
        "n1 ← n1 + 1",
        "a1[n1] ← +∞",
        "n2 ← n2 + 1",
        "a2[n2] ← +∞",
        "ciklus amíg (i < n1) ∨ (j < n2)",
        "db ← db + 1",
        "ha a1[i] < a2[j] akkor",
        "b[db] ← a1[i]",
        "i ← i + 1",
        "különben",
        "ha a1[i] > a2[j] akkor",
        "b[db] ← a2[j]",
        "j ← j + 1",
        "különben",
        "b[db] ← a1[i]",
        "i ← i + 1",
        "j ← j + 1",
        "elágazás vége",
        "elágazás vége",
        "ciklus vége",
        "vissza (b, db)",
        "függvény vége"
      ]
    },

    {
      "name": "5.15. Algoritmus Halmazok metszete",
      "inputs": "a1 − T halmaz, n1 − egész (halmaz mérete), a2 − T halmaz, n2 − egész (halmaz mérete)",
      "outputs": "b − T halmaz, db − egész",
      "code": [
        "függvény HalmazMetszet(a1 : T halmaz, n1 : egész, a2 : T halmaz, n2 : egész)",
        "b ← Létrehoz(T)[min(n1, n2)]",
        "i ← 1",
        "j ← 1",
        "db ← 0",
        "ciklus amíg (i ≤ n1) ∧ (j ≤ n2)",
        "ha a1[i] < a2[j] akkor",
        "i ← i + 1",
        "különben ha a1[i] > a2[j] akkor",
        "j ← j + 1",
        "különben",
        "db ← db + 1",
        "b[db] ← a1[i]",
        "i ← i + 1",
        "j ← j + 1",
        "elágazás vége",
        "ciklus vége",
        "vissza (b, db)",
        "függvény vége"
      ]
    },

    {
      "name": "5.16. Algoritmus Halmazok különbsége",
      "inputs": "a1 − T halmaz, n1 − egész (halmaz mérete), a2 − T halmaz, n2 − egész (halmaz mérete)",
      "outputs": "b − T halmaz, db − egész",
      "code": [
        "függvény HalmazKulonbseg(a1 : T halmaz, n1 : egész, a2 : T halmaz, n2 : egész)",
        "b ← Létrehoz(T)[n1]",
        "i ← 1",
        "j ← 1",
        "db ← 0",
        "ciklus amíg (i ≤ n1) ∧ (j ≤ n2)",
        "ha a1[i] < a2[j] akkor",
        "db ← db + 1",
        "b[db] ← a1[i]",
        "i ← i + 1",
        "különben ha a1[i] > a2[j] akkor",
        "j ← j + 1",
        "különben",
        "i ← i + 1",
        "j ← j + 1",
        "elágazás vége",
        "ciklus vége",
        "ciklus amíg i ≤ n1",
        "db ← db + 1",
        "b[db] ← a1[i]",
        "i ← i + 1",
        "ciklus vége",
        "vissza (b, db)",
        "függvény vége"
      ]
    },

    {
      "name": "5.17. Algoritmus Halmazok szimmetrikus differenciája",
      "inputs": "a1 − T halmaz, n1 − egész (halmaz mérete), a2 − T halmaz, n2 − egész (halmaz mérete)",
      "outputs": "b − T halmaz, db − egész",
      "code": [
        "függvény HalmazSzimmetrikusDifferencia(a1 : T halmaz, n1 : egész, a2 : T halmaz, n2 :",
        "egész)",
        "b ← Létrehoz(T)[n1 + n2]",
        "i ← 1",
        "j ← 1",
        "db ← 0",
        "ciklus amíg (i ≤ n1) ∧ (j ≤ n2)",
        "ha a1[i] < a2[j] akkor",
        "db ← db + 1",
        "b[db] ← a1[i]",
        "i ← i + 1",
        "különben ha a1[i] > a2[j] akkor",
        "db ← db + 1",
        "b[db] ← a2[j]",
        "j ← j + 1",
        "különben",
        "i ← i + 1",
        "j ← j + 1",
        "elágazás vége",
        "ciklus vége",
        "ciklus amíg i ≤ n1",
        "db ← db + 1",
        "b[db] ← a1[i]",
        "i ← i + 1",
        "ciklus vége",
        "ciklus amíg j ≤ n2",
        "db ← db + 1",
        "b[db] ← a2[j]",
        "j ← j + 1",
        "ciklus vége",
        "vissza (b, db)",
        "függvény vége"
      ]
    }
  ],
  "6": [
    {
      "name": "6.1. Algoritmus Felező maximumkiválasztás",
      "inputs": "x − T tömb, bal − egész, jobb − egész; ahol T összehasonlítható",
      "outputs": "Az x tömb bal és jobb indexei közötti résztömbje maximális elemének indexe.",
      "code": [
        "függvény FelezőMaximumkiválasztás(x : T tömb, bal : egész, jobb : egész)",
        "ha bal = jobb akkor",
        "vissza bal",
        "különben",
        "center ←",
        "⌊ bal+jobb",
        "2",
        "⌋",
        "balmax ← FelezőMaximumkiválasztás(x, bal, center)",
        "jobbmax ← FelezőMaximumkiválasztás(x, center + 1, jobb)",
        "ha x[balmax] ≥ x[jobbmax] akkor",
        "vissza balmax",
        "különben",
        "vissza jobbmax",
        "elágazás vége",
        "elágazás vége",
        "függvény vége"
      ]
    },

    {
      "name": "6.2. Algoritmus Összefésülő rendezés",
      "inputs": "x − T tömb, bal − egész, jobb − egész; ahol T összehasonlítható",
      "outputs": "x − T rendezett tömb",
      "code": [
        "eljárás ÖsszefésülőRendezés(címszerint x : T tömb, bal : egész, jobb : egész)",
        "ha bal < jobb akkor",
        "center ←",
        "[ bal+jobb",
        "2",
        "]",
        "ÖsszefésülőRendezés(x, bal, center)",
        "ÖsszefésülőRendezés(x, center + 1, jobb)",
        "Összefésül(x, bal, center, jobb)",
        "elágazás vége",
        "eljárás vége"
      ]
    },

    {
      "name": "6.3. Algoritmus Összefésülés",
      "inputs": "x − T tömb, bal − egész, center − egész, jobb − egész; ahol T összehasonlítható",
      "outputs": "x − T tömb",
      "code": [
        "eljárás Összefésül(címszerint x : T tömb, bal : egész, center : egész, jobb : egész)",
        "n1 ← center − bal + 1",
        "n2 ← jobb − center",
        "y1 ← Létrehoz(T)[n1 + 1]",
        "ciklus i ← 1-től n1-ig",
        "y1[i] ← x[bal + i − 1]",
        "ciklus vége",
        "y2 ← Létrehoz(T)[n2 + 1]",
        "ciklus j ← 1-től n2-ig",
        "y2[j] ← x[center + j]",
        "ciklus vége",
        "y1[n1 + 1] ← +∞",
        "y2[n2 + 1] ← +∞",
        "i ← 1",
        "j ← 1",
        "ciklus k ← bal-től jobb-ig",
        "ha y1[i] ≤ y2[j] akkor",
        "x[k] ← y1[i]",
        "i ← i + 1",
        "különben",
        "x[k] ← y2[j]",
        "j ← j + 1",
        "elágazás vége",
        "ciklus vége",
        "eljárás vége"
      ]
    },

    {
      "name": "6.4. Algoritmus Gyorsrendezés",
      "inputs": "x − T tömb, bal − egész, jobb − egész; ahol T összehasonlítható",
      "outputs": "x − T rendezett tömb",
      "code": [
        "eljárás GyorsRendezés(címszerint x : T tömb, bal : egész, jobb : egész)",
        "idx ← Szétválogat(x, bal, jobb)",
        "ha idx > bal + 1 akkor",
        "GyorsRendezés(x, bal, idx − 1)",
        "elágazás vége",
        "ha idx < jobb − 1 akkor",
        "GyorsRendezés(x, idx + 1, jobb)",
        "elágazás vége",
        "eljárás vége"
      ]
    },

    {
      "name": "6.5. Algoritmus Gyorsrendezés szétválogatása",
      "inputs": "x − T tömb, bal − egész, jobb − egész; ahol T összehasonlítható",
      "outputs": "x − T tömb, idx − egész",
      "code": [
        "függvény Szétválogat(címszerint x : T tömb, bal : egész, jobb : egész)",
        "segéd ← x[bal]",
        "ciklus amíg bal < jobb",
        "ciklus amíg (bal < jobb) ∧ (x[jobb] > segéd)",
        "jobb ← jobb − 1",
        "ciklus vége",
        "ha bal < jobb akkor",
        "x[bal] ← x[jobb]",
        "bal ← bal + 1",
        "ciklus amíg (bal < jobb) ∧ (x[bal] ≤ segéd)",
        "bal ← bal + 1",
        "ciklus vége",
        "ha bal < jobb akkor",
        "x[jobb] ← x[bal]",
        "jobb ← jobb − 1",
        "elágazás vége",
        "elágazás vége",
        "ciklus vége",
        "idx ← bal",
        "x[idx] ← segéd",
        "vissza idx",
        "függvény vége"
      ]
    },

    {
      "name": "6.6. Algoritmus k-adik legkisebb elem kiválasztása",
      "inputs": "x − T tömb, bal − egész, jobb − egész, k − egész; ahol T összehasonlítható",
      "outputs": "k-adik legkisebb tömbelem értéke",
      "code": [
        "függvény k-adikLegkisebbElem(x : T tömb, bal : egész, jobb : egész, k : egész)",
        "ha bal = jobb akkor",
        "vissza x[bal]",
        "különben",
        "idx ← Szétválogat(x, bal, jobb)",
        "ha k = idx − bal + 1 akkor",
        "vissza x[idx]",
        "különben ha k < idx − bal + 1 akkor",
        "vissza k-adikLegkisebbElem(x, bal, idx − 1, k)",
        "különben",
        "vissza k-adikLegkisebbElem(x, idx + 1, jobb, k − (idx − bal + 1))",
        "elágazás vége",
        "elágazás vége",
        "függvény vége"
      ]
    }
  ],
  "7": [
    {
      "name": "7.1. Algoritmus 0-1 hátizsák probléma",
      "inputs": "p − egész tömb, w − egész tömb, n − egész (tömb mérete), c − egész",
      "outputs": "F − egész tábla",
      "code": [
        "függvény 0-1Hátizsák(p : egész tömb, w : egész tömb, n : egész, c : egész)",
        "F ← TáblaLétrehoz(egész)[n + 1, c + 1]",
        "ciklus x ← 0-től c-ig",
        "F [0, x] ← 0",
        "ciklus vége",
        "ciklus i ← 1-től n-ig",
        "F [i, 0] ← 0",
        "ciklus vége",
        "ciklus i ← 1-től n-ig",
        "ciklus x ← 1-től c-ig",
        "ha wi ≤ x akkor",
        "F [i, x] ← max (F [i − 1, x], F [i − 1, x − wi] + pi)",
        "különben",
        "F [i, x] ← F [i − 1, x]",
        "elágazás vége",
        "ciklus vége",
        "ciklus vége",
        "vissza F",
        "függvény vége"
      ]
    },

    {
      "name": "7.2. Algoritmus Kiválasztott elemek kiolvasása",
      "inputs": "F − egész tábla, n − egész, c − egész",
      "outputs": "S − egész halmaz",
      "code": [
        "függvény Kiolvas(F : egész tábla, n : egész, c : egész)",
        "S ← ∅",
        "i ← n",
        "x ← c",
        "ciklus amíg (i > 0) ∧ (x > 0)",
        "ha F [i, x] 6 = F [i − 1, x] akkor",
        "S ← S ∪ {i}",
        "x ← x − wi",
        "elágazás vége",
        "i ← i − 1",
        "ciklus vége",
        "vissza S",
        "függvény vége"
      ]
    },

    {
      "name": "7.3. Algoritmus Leghosszabb közös részsorozat hossza",
      "inputs": "X − T tömb, n − egész (tömb mérete), Y − T tömb, m − egész (tömb mérete)",
      "outputs": "F − egész tábla",
      "code": [
        "függvény LKRHossza(X : T tömb, n : egész, Y : T tömb, m : egész)",
        "F ← TáblaLétrehoz(egész)[n + 1, m + 1]",
        "ciklus j ← 0-től m-ig",
        "F [0, j] ← 0",
        "ciklus vége",
        "ciklus i ← 1-től n-ig",
        "F [i, 0] ← 0",
        "ciklus vége",
        "ciklus i ← 1-től n-ig",
        "ciklus j ← 1-től m-ig",
        "ha xi = yj akkor",
        "F [i, j] ← F [i − 1, j − 1] + 1",
        "különben",
        "F [i, j] ← max {F [i − 1, j], F [i, j − 1]},",
        "elágazás vége",
        "ciklus vége",
        "ciklus vége",
        "vissza F",
        "függvény vége"
      ]
    },

    {
      "name": "7.4. Algoritmus Leghosszabb közös részsorozat előállítása",
      "inputs": "F − egész tábla, X − T tömb, n − egész, Y − T tömb, m − egész",
      "outputs": "S − T tömb",
      "code": [
        "függvény LKRElőállítás(F : egész tábla, X : T tömb, n : egész, Y : T tömb, m : egész)",
        "S ← Létrehoz(T)[F [n, m]]",
        "i ← n",
        "j ← m",
        "idx ← F [n, m]",
        "ciklus amíg idx > 0",
        "ha X[i] = Y [j] akkor",
        "S[idx] ← X[i]",
        "idx ← idx − 1",
        "i ← i − 1",
        "j ← j − 1",
        "különben ha F [i − 1, j] > F [i, j − 1] akkor",
        "i ← i − 1",
        "különben",
        "j ← j − 1",
        "elágazás vége",
        "ciklus vége",
        "vissza S",
        "függvény vége"
      ]
    },

    {
      "name": "7.5. Algoritmus Pénzkifizetés mohó algoritmusa",
      "inputs": "x − egész, c − egész rendezett tömb, n − egész",
      "outputs": "db − egész tömb",
      "code": [
        "függvény Pénzkifizetés(x : egész, c : egész tömb, n : egész)",
        "db ← Létrehoz(egész)[n]",
        "ciklus i ← 1-től n-ig",
        "db[i] ← 0",
        "ciklus vége",
        "j ← n",
        "ciklus amíg x > 0",
        "ciklus amíg c[j] > x",
        "j ← j − 1",
        "ciklus vége",
        "db[j] ← db[j] + 1",
        "x ← x − c[j]",
        "ciklus vége",
        "vissza db",
        "függvény vége"
      ]
    },

    {
      "name": "7.6. Algoritmus 0-1 hátizsák probléma mohó megoldása",
      "inputs": "p − egész tömb, w − egész tömb, n − egész (tömb mérete), c − egész",
      "outputs": "S − egész halmaz",
      "code": [
        "függvény Mohó0-1Hátizsák(p : egész tömb, w : egész tömb, n : egész, c : egész)",
        "S ← ∅",
        "i ← 1",
        "ciklus amíg (c > 0) ∧ (i ≤ n)",
        "ha w[i] ≤ c akkor",
        "S ← S ∪ {i}",
        "c ← c − w[i]",
        "elágazás vége",
        "i ← i + 1",
        "ciklus vége",
        "vissza S",
        "függvény vége"
      ]
    },

    {
      "name": "7.7. Algoritmus Összegyűjtött kincsek összege (dinamikus programozás)",
      "inputs": "C − egész tömb, m − egész (C sorainak száma), n − egész (C oszlopainak száma)",
      "outputs": "F − egész tömb",
      "code": [
        "függvény KincsÖsszeg(C : egész tömb, m : egész, n : egész)",
        "F ← Létrehoz(egész)[m, n]",
        "F [1, 1] = C[1, 1]",
        "ciklus j ← 2-től n-ig",
        "F [1, j] = F [1, j − 1] + C[i, j]",
        "ciklus vége",
        "ciklus i ← 2-től m-ig",
        "F [i, 1] = F [i − 1, 1] + C[i, j]",
        "ciklus vége",
        "ciklus i ← 2-től m-ig",
        "ciklus j ← 2-től n-ig",
        "F [i, j] = max (F [i − 1, j], F [i, j − 1]) + C[i, j]",
        "ciklus vége",
        "ciklus vége",
        "vissza F",
        "függvény vége"
      ]
    },

    {
      "name": "7.8. Algoritmus Bejárási út kiolvasása (dinamikus programozás)",
      "inputs": "F − egész tömb, m − egész (F sorainak száma), n − egész (F oszlopainak száma)",
      "outputs": "P − egész tömb",
      "code": [
        "függvény BejárásiÚtKiolvas(F : egész tömb, m : egész, n : egész)",
        "P ← Létrehoz(egész)[m + n − 1]",
        "i ← m",
        "j ← n",
        "k ← m + n − 1",
        "ciklus amíg (i ≥ 2) ∧ (j ≥ 2)",
        "P [k] ← (i, j)",
        "k ← k − 1",
        "ha F [i − 1, j] > F [i, j − 1] akkor",
        "i ← i − 1",
        "különben",
        "j ← j − 1",
        "elágazás vége",
        "ciklus vége",
        "ciklus amíg i ≥ 2",
        "P [k] ← (i, j)",
        "k ← k − 1",
        "i ← i − 1",
        "ciklus vége",
        "ciklus amíg j ≥ 2",
        "P [k] ← (i, j)",
        "k ← k − 1",
        "j ← j − 1",
        "ciklus vége",
        "P [1] ← (1, 1)",
        "vissza P",
        "függvény vége"
      ]
    },

    {
      "name": "7.9. Algoritmus Kincsek begyűjtése (mohó algoritmus)",
      "inputs": "C − egész tömb, m − egész (C sorainak száma), n − egész (C oszlopainak száma)",
      "outputs": "P − egész tömb",
      "code": [
        "függvény MohóKincsGyűjtés(C : egész tömb, m : egész, n : egész)",
        "P ← Létrehoz(egész)[m + n − 1]",
        "i ← 1",
        "j ← 1",
        "k ← 0",
        "ciklus amíg (i < m) ∧ (j < n)",
        "k ← k + 1",
        "P [k] ← (i, j)",
        "ha C[i + 1, j] > C[i, j + 1] akkor",
        "i ← i + 1",
        "különben",
        "j ← j + 1",
        "elágazás vége",
        "ciklus vége",
        "ciklus amíg i < m",
        "k ← k + 1",
        "P [k] ← (i, j)",
        "i ← i + 1",
        "ciklus vége",
        "ciklus amíg j < n",
        "k ← k + 1",
        "P [k] ← (i, j)",
        "j ← j + 1",
        "ciklus vége",
        "k ← k + 1",
        "P [k] ← (i, j)",
        "vissza P",
        "függvény vége"
      ]
    },

    {
      "name": "7.10. Algoritmus Esemény kiválasztás",
      "inputs": "s − idő tömb, f − idő rendezett tömb, n − egész (tömbök mérete)",
      "outputs": "A − egész halmaz",
      "code": [
        "függvény EseményKiválasztás(s : idő tömb, f : idő tömb, negész)",
        "A ← {1}",
        "utolsó ← 1",
        "ciklus i ← 2-től n-ig",
        "ha s[i] ≥ f [utolsó] akkor",
        "A ← A ∪ {i}",
        "utolsó ← i",
        "elágazás vége",
        "ciklus vége",
        "vissza A",
        "függvény vég"
      ]
    },

    {
      "name": "7.11. Algoritmus Esemény elkülönítés",
      "inputs": "s − idő rendezett tömb, f − idő tömb, n − egész (tömbök mérete)",
      "outputs": "A − egész tömb",
      "code": [
        "függvény EseményElkülönítés(s : idő rendezett tömb, f : idő tömb, n : egész)",
        "A ← Létrehoz(egész)[n]",
        "utolsó ← 0",
        "ciklus i ← 1-től n-ig",
        "j ← 1",
        "ciklus amíg (j ≤ utolsó) ∧ ¬KompatiblisEseményErőforrással(A, s, f, i, j)",
        "j ← j + 1",
        "ciklus vége",
        "ha j ≤ utolsó akkor",
        "A[i] ← j",
        "különben",
        "utolsó ← utolsó + 1",
        "A[i] ← utolsó",
        "elágazás vége",
        "ciklus vége",
        "vissza A",
        "függvény vége"
      ]
    },

    {
      "name": "7.12. Algoritmus Ütemezés késés minimalizálással",
      "inputs": "d − idő rendezett tömb, t − idő tömb, n − egész (tömbök mérete)",
      "outputs": "s − idő tömb, f − idő tömb",
      "code": [
        "függvény KésésMinimalizálás(d : idő rendezett tömb, t : idő tömb, n : egész)",
        "s ← Létrehoz(idő)[n]",
        "f ← Létrehoz(idő)[n]",
        "utolsó ← 0",
        "ciklus i ← 1-től n-ig",
        "s[i] ← utolsó",
        "f [i] ← s[i] + t[i]",
        "utolsó ← f [i]",
        "ciklus vége",
        "vissza (s, f )",
        "függvény vége"
      ]
    }
  ],
  "8": [
    {
      "name": "8.1. Algoritmus Kupactulajdonság fenntartása",
      "inputs": "x − T tömb, n − egész (tömb mérete), k − egész (kupac mérete), i − Egész; ahol T összehasonlítható",
      "outputs": "x − T tömb",
      "code": [
        "eljárás Kupacol(címszerint x : T tömb, n : egész, k : egész, i : egész)",
        "bal ← 2 · i",
        "jobb ← 2 · i + 1",
        "ha bal ≤ k ∧ x[bal] > x[i] akkor",
        "max ← bal",
        "különben",
        "max ← i",
        "elágazás vége",
        "ha jobb ≤ k ∧ x[jobb] > x[max] akkor",
        "max ← jobb",
        "elágazás vége",
        "ha max 6 = i akkor",
        "x[i] ↔ x[max]",
        "Kupacol(x, n, k, max)",
        "elágazás vége",
        "eljárás vége"
      ]
    },

    {
      "name": "8.2. Algoritmus Kupac építése",
      "inputs": "x − T tömb, n − egész (tömb mérete); ahol T összehasonlítható",
      "outputs": "x − T kupac",
      "code": [
        "eljárás KupacotÉpít(címszerint x : T tömb, n : egész)",
        "ciklus i ← bn/2c-től 1-ig",
        "Kupacol(x, n, n, i)",
        "ciklus vége",
        "eljárás vége"
      ]
    },

    {
      "name": "8.3. Algoritmus Kupacrendezés",
      "inputs": "x − T tömb, n − egész (tömb mérete); ahol T összehasonlítható",
      "outputs": "x − T rendezett tömb",
      "code": [
        "eljárás Kupacrendezes(címszerint x : T tömb, n : egész)",
        "KupacotÉpít(x, n)",
        "ciklus i ← n-től 2-ig",
        "x[1] ↔ x[i]",
        "Kupacol(x, n, i − 1, 1)",
        "ciklus vége",
        "eljárás vége"
      ]
    }
  ]
}
